Index: app/src/main/java/com/pr/perfectrecovery/fragment/ChartFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pr.perfectrecovery.fragment\r\n\r\nimport android.graphics.Color\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.blankj.utilcode.util.GsonUtils\r\nimport com.github.mikephil.charting.charts.LineChart\r\nimport com.github.mikephil.charting.components.XAxis\r\nimport com.github.mikephil.charting.components.XAxis.XAxisPosition\r\nimport com.github.mikephil.charting.components.YAxis\r\nimport com.github.mikephil.charting.data.*\r\nimport com.github.mikephil.charting.interfaces.datasets.IBarDataSet\r\nimport com.github.mikephil.charting.interfaces.datasets.ILineDataSet\r\nimport com.pr.perfectrecovery.R\r\nimport com.pr.perfectrecovery.base.BaseConstant\r\nimport com.pr.perfectrecovery.bean.BaseDataDTO\r\nimport com.pr.perfectrecovery.bean.MessageEventData\r\nimport com.pr.perfectrecovery.bean.ConfigBean\r\nimport com.pr.perfectrecovery.databinding.ChartFragmentBinding\r\nimport com.pr.perfectrecovery.fragment.viewmodel.ChartViewModel\r\nimport com.pr.perfectrecovery.livedata.StatusLiveData\r\nimport com.pr.perfectrecovery.utils.DataVolatile\r\nimport com.tencent.mmkv.MMKV\r\nimport org.greenrobot.eventbus.EventBus\r\nimport org.greenrobot.eventbus.Subscribe\r\nimport org.greenrobot.eventbus.ThreadMode\r\nimport java.util.*\r\n\r\n/**\r\n * 曲线\r\n */\r\nclass ChartFragment : Fragment() {\r\n    private lateinit var viewBinding: ChartFragmentBinding\r\n    private lateinit var configBean: ConfigBean\r\n\r\n    companion object {\r\n        fun newInstance() = ChartFragment()\r\n    }\r\n\r\n    private lateinit var viewModel: ChartViewModel\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        viewBinding = ChartFragmentBinding.inflate(layoutInflater)\r\n        return viewBinding.root\r\n    }\r\n\r\n    override fun onActivityCreated(savedInstanceState: Bundle?) {\r\n        super.onActivityCreated(savedInstanceState)\r\n        EventBus.getDefault().register(this)\r\n        viewModel = ViewModelProvider(this).get(ChartViewModel::class.java)\r\n        val jsonString = MMKV.defaultMMKV().decodeString(BaseConstant.MMKV_WM_CONFIGURATION)\r\n        configBean = GsonUtils.fromJson(jsonString, ConfigBean::class.java)\r\n        initView()\r\n    }\r\n\r\n    //吹气量统计\r\n    private var qyValue = 0\r\n\r\n    private fun initView() {\r\n        //曲线图表\r\n        val data: LineData = getData(0f)\r\n        val data1: LineData = getData(DataVolatile.preDistance.toFloat())\r\n        val data2: LineData = getData(0f)\r\n        // add some transparency to the color with \"& 0x90FFFFFF\"\r\n        initLineChart(viewBinding.lineChart, data)\r\n        LineChartUtils.setLineChart(viewBinding.lineChart1, data1)\r\n        initLineChart(viewBinding.lineChart2, data2)\r\n        StatusLiveData.data.observe(requireActivity()) {\r\n            setData(it)\r\n            addEntry(data, viewBinding.lineChart, it.cf.toFloat())\r\n            addEntry(data1, viewBinding.lineChart1, it.L_D1.toFloat())\r\n            addEntry(data2, viewBinding.lineChart2, it.pf.toFloat())\r\n            if (qyValue != it.qySum) {\r\n                qyValue = it.qySum\r\n                val qyMax = DataVolatile.max(DataVolatile.QY_valueSet, true)\r\n                addBarEntry(DataVolatile.qyValue(DataVolatile.QY_valueSet2), qyMax)\r\n            } else {\r\n                addBarEntry(0, 0)\r\n            }\r\n            //吹气错误数统计\r\n            viewBinding.tvLungCount.text =\r\n                \"${(it.ERR_QY_CLOSE + it.ERR_QY_HIGH + it.ERR_QY_LOW + it.ERR_QY_DEAD)}\"\r\n            //按压错误数统计\r\n            viewBinding.tvHeartCount.text =\r\n                \"${(it.ERR_PR_POSI + it.ERR_PR_LOW + it.ERR_PR_HIGH)}\"\r\n            //按压总数\r\n            viewBinding.tvLungTotal.text = \"/${it.qySum}\"\r\n            viewBinding.tvHeartTotal.text = \"/${it.prSum}\"\r\n        }\r\n\r\n        initBarChart()\r\n        viewBinding.constraintlayout2.setOnClickListener {\r\n            //addBarEntry(Random().nextInt(800))\r\n        }\r\n\r\n        viewBinding.constraintlayout.setOnClickListener {\r\n            addEntry(data, viewBinding.lineChart, 0f)\r\n        }\r\n\r\n        viewBinding.constraintlayout3.setOnClickListener {\r\n            val random = (1..100).random()\r\n            addEntry(data, viewBinding.lineChart1, setValue(random).toFloat())\r\n        }\r\n        setViewData()\r\n    }\r\n\r\n    private fun setValue(value: Int): Int {\r\n        val depth = DataVolatile.preDistance - value\r\n        if (depth > 0 && depth > DataVolatile.preDistance - 5) {\r\n            return 0\r\n        } else if (depth > DataVolatile.PR_HIGH_VALUE) {\r\n            return 7\r\n        } else if (depth in DataVolatile.PR_LOW_VALUE..DataVolatile.PR_HIGH_VALUE) {\r\n            return 5\r\n        } else if (depth < DataVolatile.PR_LOW_VALUE - 5) {\r\n            return 4\r\n        } else if (depth < DataVolatile.PR_LOW_VALUE - 10) {\r\n            return 3\r\n        } else if (depth < DataVolatile.PR_LOW_VALUE - 15) {\r\n            return 2\r\n        } else if (depth < DataVolatile.PR_LOW_VALUE - 20) {\r\n            return 1\r\n        }\r\n        return 0\r\n    }\r\n\r\n    private fun setViewData() {\r\n        viewBinding.tvDepth.text = \"${configBean.depth}cm\"\r\n        viewBinding.tvDepthEnd.text = \"${configBean.depthEnd}cm\"\r\n        viewBinding.tvDepthFrequency.text = \"${configBean.depthFrequency}cpm\"\r\n        viewBinding.tvDepthFrequencyEnd.text = \"${configBean.depthFrequencyEnd}cpm\"\r\n        viewBinding.tvTidalFrequency.text = \"${configBean.tidalFrequency}vpm\"\r\n        viewBinding.tvTidalFrequencyEnd.text = \"${configBean.tidalFrequencyEnd}vpm\"\r\n        viewBinding.tvTidalVolume.text = \"${configBean.tidalVolume}ml\"\r\n        viewBinding.tvTidalVolumeEnd.text = \"${configBean.tidalVolumeEnd}ml\"\r\n    }\r\n\r\n    private fun initLineChart(lineChart: LineChart, lineData: LineData) {\r\n        // apply styling\r\n        // holder.chart.setValueTypeface(mTf);\r\n        lineChart.description.isEnabled = false\r\n        lineChart.setTouchEnabled(false)\r\n        lineChart.setPinchZoom(false)\r\n        lineChart.setDrawGridBackground(false)\r\n        lineChart.setNoDataText(\"\")\r\n        val xAxis: XAxis = lineChart.xAxis\r\n        xAxis.setDrawGridLines(false)\r\n        xAxis.setDrawAxisLine(false)\r\n        xAxis.granularity = 1f\r\n//        xAxis.setLabelCount(30, true)\r\n        xAxis.position = XAxisPosition.BOTTOM\r\n\r\n        val leftAxis: YAxis = lineChart.axisLeft\r\n        leftAxis.setLabelCount(5, false)\r\n        leftAxis.axisMinimum = 0f // this replaces setStartAtZero(true)\r\n\r\n        val rightAxis: YAxis = lineChart.axisRight\r\n        rightAxis.setLabelCount(5, false)\r\n        rightAxis.setDrawGridLines(false)\r\n        rightAxis.axisMinimum = 0f // this replaces setStartAtZero(true)\r\n\r\n        xAxis.isEnabled = false\r\n        leftAxis.isEnabled = false\r\n        rightAxis.isEnabled = false\r\n        xAxis.textColor = Color.WHITE\r\n\r\n        val l = lineChart.legend\r\n        l.isEnabled = false\r\n\r\n        // set data\r\n        lineChart.data = lineData\r\n\r\n        // do not forget to refresh the chart\r\n        // holder.chart.invalidate();\r\n        lineChart.animateX(750)\r\n    }\r\n\r\n    var mBarDataSet: BarDataSet? = null\r\n    private fun initBarChart() {\r\n        viewBinding.barChart.apply {\r\n            setDrawBorders(false) //显示边界\r\n            setDrawBarShadow(false) //设置每个直方图阴影为false\r\n            setDrawValueAboveBar(true) //这里设置为true每一个直方图的值就会显示在直方图的顶部\r\n            description.isEnabled = false //设置描述文字不显示，默认显示\r\n            setDrawGridBackground(false) //设置不显示网格\r\n            //setBackgroundColor(Color.parseColor(\"#F3F3F3\")) //设置图表的背景颜色\r\n            legend.isEnabled = false //设置不显示比例图\r\n            setScaleEnabled(true) //设置是否可以缩放\r\n            setTouchEnabled(false)\r\n            scaleX = 1.5f\r\n            //x轴设置\r\n            xAxis.apply {\r\n                position = XAxis.XAxisPosition.BOTTOM//X轴的位置 默认为上面\r\n                setDrawGridLines(false)  //是否绘制X轴上的网格线（背景里面的竖线）\r\n                //axisRight.isEnabled = false//隐藏右侧Y轴   默认是左右两侧都有Y轴\r\n                granularity = 1f // only intervals of 1 day\r\n                labelCount = 100\r\n                /*valueFormatter = object : ValueFormatter() {\r\n                    override fun getFormattedValue(value: Float): String {\r\n                      //TODO 自定义X轴label格式\r\n                    }\r\n                }*/\r\n            }\r\n            xAxis.isEnabled = false\r\n            axisLeft.isEnabled = false\r\n            axisRight.isEnabled = false\r\n\r\n            // if more than 60 entries are displayed in the chart, no values will be\r\n            //保证Y轴从0开始，不然会上移一点\r\n            axisLeft.axisMinimum = 0f\r\n            axisRight.axisMinimum = 0f\r\n            mBarDataSet = BarDataSet(values, \"Data Set\")\r\n            //set1.setColors(*ColorTemplate.VORDIPLOM_COLORS)\r\n            mBarDataSet!!.setDrawValues(false)\r\n            val dataSets = ArrayList<IBarDataSet>()\r\n            dataSets.add(mBarDataSet!!)\r\n            val barData = BarData(dataSets)\r\n            data = barData\r\n        }\r\n    }\r\n\r\n    private val values = ArrayList<BarEntry>()\r\n    private val colors = ArrayList<Int>()\r\n\r\n    //这里要进行图像绘制，所以要切回UI线程，否则会报错\r\n    private fun addBarEntry(value: Int, value2: Int) {\r\n        Log.e(\"addBarEntry\", \"$value\")\r\n        viewBinding.barChart.apply {\r\n            if (barData != null) {\r\n//                barData.addEntry(BarEntry(value.toFloat(), 0f), 0)\r\n                val entryCount = (data.getDataSetByIndex(0) as BarDataSet).entryCount\r\n                data.addEntry(BarEntry(entryCount.toFloat(), value.toFloat()), 0)\r\n                data.notifyDataChanged()\r\n                when {\r\n                    value2 in configBean.qyLow()..configBean.qyHigh() -> {\r\n                        colors.add(\r\n                            ContextCompat.getColor(requireContext(), R.color.color_37B48B)\r\n                        )\r\n                    }\r\n                    value2 < configBean.qyLow() -> {\r\n                        colors.add(\r\n                            ContextCompat.getColor(requireContext(), R.color.color_FDC457)\r\n                        )\r\n                    }\r\n                    value2 > configBean.qy_max -> {\r\n                        colors.add(\r\n                            ContextCompat.getColor(requireContext(), R.color.color_text_selected)\r\n                        )\r\n                    }\r\n                }\r\n                mBarDataSet!!.colors = colors\r\n                notifyDataSetChanged()\r\n                //设置在图表中显示的最大X轴数量\r\n                setVisibleXRangeMaximum(30f)\r\n                //这里用29是因为30的话，最后一条柱子只显示了一半\r\n                moveViewToX(barData.entryCount.toFloat() - 29)\r\n                //            moveViewToAnimated(entryCount - 4f, value.toFloat(), YAxis.AxisDependency.RIGHT, 1000)\r\n//                val mMatrix = Matrix()\r\n//                mMatrix.postScale(1.5f, 1f)\r\n//                viewPortHandler.refresh(mMatrix, this, false)\r\n//                animateY(1000)\r\n            }\r\n        }\r\n        viewBinding.barChart.invalidate()\r\n    }\r\n\r\n    private fun setData(data: BaseDataDTO) {\r\n        viewBinding.tvLungTotal.text = \"/${configBean.prCount * configBean.cycles}\"\r\n        viewBinding.tvLungCount.text = \"${data.qySum}\"\r\n        viewBinding.tvHeartTotal.text = \"/${configBean.qyCount * configBean.cycles}\"\r\n        viewBinding.tvHeartCount.text = \"${data.prSum}\"\r\n    }\r\n\r\n    private fun getData(value: Float): LineData {\r\n        val values = ArrayList<Entry>()\r\n//        values.add(Entry(0f, value.toFloat()))\r\n        // create a dataset and give it a type\r\n        val lineDataSet = LineDataSet(values, \"DataSet 1\")\r\n        lineDataSet.lineWidth = 1.3f\r\n        lineDataSet.circleRadius = 0f\r\n        lineDataSet.circleHoleRadius = 0f\r\n        lineDataSet.valueTextColor = Color.WHITE\r\n        lineDataSet.color = Color.parseColor(\"#3DB38E\")\r\n        lineDataSet.setCircleColor(Color.parseColor(\"#3DB38E\"))\r\n        lineDataSet.highLightColor = Color.parseColor(\"#3DB38E\")\r\n        lineDataSet.setDrawValues(true)\r\n        lineDataSet.setDrawCircles(false)\r\n        lineDataSet.axisDependency = YAxis.AxisDependency.LEFT\r\n        lineDataSet.mode = LineDataSet.Mode.CUBIC_BEZIER\r\n\r\n        val sets = ArrayList<ILineDataSet>()\r\n        val d = LineDataSet(values, \"\")\r\n        d.lineWidth = 0f\r\n        d.circleRadius = 0f\r\n        d.circleHoleRadius = 0f\r\n        d.valueTextColor = Color.TRANSPARENT\r\n        d.color = Color.TRANSPARENT\r\n        d.setCircleColor(Color.TRANSPARENT)\r\n        d.highLightColor = Color.TRANSPARENT\r\n        d.setDrawValues(false)\r\n        d.setDrawCircles(false)\r\n        d.axisDependency = YAxis.AxisDependency.LEFT\r\n        d.mode = LineDataSet.Mode.CUBIC_BEZIER\r\n        d.highLightColor = Color.argb(0, 0, 0, 0)\r\n        d.setCircleColor(Color.argb(0, 0, 0, 0))\r\n        d.color = Color.argb(0, 0, 0, 0)\r\n        d.addEntry(Entry(0f, value))\r\n\r\n        sets.add(d)\r\n        sets.add(lineDataSet)\r\n        // create a data object with the data sets\r\n        return LineData(sets)\r\n    }\r\n\r\n    /**\r\n     * 动态添加数据\r\n     * 在一个LineChart中存放的折线，其实是以索引从0开始编号的\r\n     *\r\n     * @param yValues y值\r\n     */\r\n    private var x = 20\r\n    private fun addEntry(lineData: LineData, lineChart: LineChart, yValues: Float) {\r\n        val entryCount = (lineData.getDataSetByIndex(1) as LineDataSet).entryCount\r\n        val entry = Entry(\r\n            entryCount.toFloat(), yValues\r\n        )\r\n        // 创建一个点\r\n        lineData.addEntry(entry, 1) // 将entry添加到指定索引处的折线中\r\n        lineChart.data = lineData\r\n        //通知数据已经改变\r\n        lineData.notifyDataChanged()\r\n        lineChart.notifyDataSetChanged()\r\n        //通知数据已经改变\r\n        lineData.notifyDataChanged()\r\n        lineChart.notifyDataSetChanged()\r\n        //把yValues移到指定索引的位置\r\n        lineChart.moveViewToAnimated(entryCount - 4f, yValues, YAxis.AxisDependency.LEFT, 1000)\r\n        lineChart.setVisibleXRangeMaximum(30f)\r\n//        lineChart.moveViewToX((lineData.entryCount - 4).toFloat())/**/\r\n        lineChart.moveViewToX((lineData.entryCount - 29).toFloat())\r\n        lineChart.invalidate()\r\n    }\r\n\r\n    @Subscribe(sticky = true, threadMode = ThreadMode.MAIN)\r\n    public fun onEvent(event: MessageEventData) {\r\n        if (event.code == BaseConstant.EVENT_SINGLE_CHART_START) {\r\n            //启动刷新界面数据\r\n            viewBinding.ivLung.setImageDrawable(resources.getDrawable(R.mipmap.icon_wm_chart_lung_red))\r\n            viewBinding.ivHeart.setImageDrawable(resources.getDrawable(R.mipmap.icon_wm_chart_heart_red))\r\n        }\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        EventBus.getDefault().unregister(this)\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/pr/perfectrecovery/fragment/ChartFragment.kt b/app/src/main/java/com/pr/perfectrecovery/fragment/ChartFragment.kt
--- a/app/src/main/java/com/pr/perfectrecovery/fragment/ChartFragment.kt	(revision 7eb44e7b4d350d21c77417b8d0326bfe727d67d4)
+++ b/app/src/main/java/com/pr/perfectrecovery/fragment/ChartFragment.kt	(date 1645925155523)
@@ -99,7 +99,7 @@
 
         initBarChart()
         viewBinding.constraintlayout2.setOnClickListener {
-            //addBarEntry(Random().nextInt(800))
+            addBarEntry(Random().nextInt(800), 60)
         }
 
         viewBinding.constraintlayout.setOnClickListener {
Index: app/src/main/java/com/pr/perfectrecovery/activity/ConfigActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pr.perfectrecovery.activity\r\n\r\nimport android.os.Bundle\r\nimport android.text.Editable\r\nimport android.text.TextUtils\r\nimport android.text.TextWatcher\r\nimport android.text.format.DateUtils\r\nimport android.view.View\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.viewpager2.adapter.FragmentStateAdapter\r\nimport androidx.viewpager2.widget.ViewPager2\r\nimport androidx.viewpager2.widget.ViewPager2.OnPageChangeCallback\r\nimport com.blankj.utilcode.util.GsonUtils\r\nimport com.pr.perfectrecovery.base.BaseActivity\r\nimport com.pr.perfectrecovery.base.BaseConstant\r\nimport com.pr.perfectrecovery.bean.ConfigBean\r\nimport com.pr.perfectrecovery.databinding.ActivityCprListBinding\r\nimport com.pr.perfectrecovery.fragment.CPRScoreFragment\r\nimport com.pr.perfectrecovery.fragment.CPRStandardFragment\r\nimport com.pr.perfectrecovery.utils.TimeUtils\r\nimport com.tencent.mmkv.MMKV\r\n\r\n/**\r\n * 基础参数配置界面\r\n */\r\nclass ConfigActivity : BaseActivity() {\r\n\r\n    private lateinit var viewBinding: ActivityCprListBinding\r\n    private var dataDTO: ConfigBean? = null\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        viewBinding = ActivityCprListBinding.inflate(layoutInflater)\r\n        setContentView(viewBinding.root)\r\n        initView()\r\n    }\r\n\r\n    private fun initView() {\r\n        setData()\r\n        viewBinding.bottom.tvContinue.visibility = View.INVISIBLE\r\n        viewBinding.bottom.ivBack.setOnClickListener { finish() }\r\n        //按压深度\r\n        viewBinding.etDepth.addTextChangedListener(editTextDepth)\r\n        viewBinding.etDepthEnd.addTextChangedListener(editTextDepth)\r\n        //按压频率\r\n        viewBinding.etDepthFrequency.addTextChangedListener(editTextDepthFrequency)\r\n        viewBinding.etDepthFrequencyEnd.addTextChangedListener(editTextDepthFrequency)\r\n\r\n        //按压中断\r\n        viewBinding.etInterruptTime.addTextChangedListener(editTextInterrupt)\r\n\r\n        //潮气量\r\n        viewBinding.etTidalVolume.addTextChangedListener(editTextTidalVolume)\r\n        viewBinding.etTidalVolumeEnd.addTextChangedListener(editTextTidalVolume)\r\n\r\n        //潮气频率\r\n        viewBinding.etTidalFrequency.addTextChangedListener(editTextTidalFrequency)\r\n        viewBinding.etTidalFrequencyEnd.addTextChangedListener(editTextTidalFrequency)\r\n\r\n        //按压次数\r\n        viewBinding.etPr.addTextChangedListener(editTextPr)\r\n        //吹气次数\r\n        viewBinding.etQy.addTextChangedListener(editTextQy)\r\n        viewBinding.etDeduction.addTextChangedListener(editTextDeduction)\r\n        viewBinding.etProcess.addTextChangedListener(editTextProcess)\r\n        viewBinding.etCompressions.addTextChangedListener(editTextProcess)\r\n        viewBinding.etVentilation.addTextChangedListener(editTextProcess)\r\n    }\r\n\r\n    private fun setData() {\r\n        val decodeString = MMKV.defaultMMKV().decodeString(BaseConstant.MMKV_WM_CONFIGURATION)\r\n        dataDTO = GsonUtils.fromJson(decodeString, ConfigBean::class.java)\r\n        dataDTO.let {\r\n            if (it != null) {\r\n                viewBinding.etDepth.setText(\"${it.depth}\")\r\n                viewBinding.etDepthEnd.setText(\"${it.depthEnd}\")\r\n                viewBinding.etDepthFrequency.setText(\"${it.depthFrequency}\")\r\n                viewBinding.etDepthFrequencyEnd.setText(\"${it.depthFrequencyEnd}\")\r\n                viewBinding.etInterruptTime.setText(\"${it.interruptTime}\")\r\n                viewBinding.etTidalVolume.setText(\"${it.tidalVolume}\")\r\n                viewBinding.etTidalVolumeEnd.setText(\"${it.tidalVolumeEnd}\")\r\n                viewBinding.etTidalFrequency.setText(\"${it.tidalFrequency}\")\r\n                viewBinding.etTidalFrequencyEnd.setText(\"${it.tidalFrequencyEnd}\")\r\n                viewBinding.etTime.setText(\"${it.operationTime}\")\r\n                viewBinding.etCycles.setText(\"${it.cycles}\")\r\n                viewBinding.etPr.setText(\"${it.prCount}\")\r\n                viewBinding.etQy.setText(\"${it.qyCount}\")\r\n                viewBinding.etDeduction.setText(\"${it.deductionTime}\")\r\n                viewBinding.etProcess.setText(\"${it.process}\")\r\n                viewBinding.etCompressions.setText(\"${it.compressions}\")\r\n                viewBinding.etVentilation.setText(\"${it.ventilation}\")\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    private val editTextDepth = object : TextWatcher {\r\n        override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n\r\n        }\r\n\r\n        override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n\r\n        }\r\n\r\n        override fun afterTextChanged(p0: Editable?) {\r\n            val value = p0.toString().trim()\r\n            if (TextUtils.isEmpty(value) || value.toInt() > 11 || value.toInt() < 0) {\r\n                viewBinding.tvMsg.text = \"按压深度输入范围：整数1～10\"\r\n            } else {\r\n                viewBinding.tvMsg.text = \"\"\r\n                if (!TextUtils.isEmpty(viewBinding.etDepth.text.toString().trim())) {\r\n                    dataDTO?.depth = viewBinding.etDepth.text.toString().trim().toInt()\r\n                }\r\n                if (!TextUtils.isEmpty(viewBinding.etDepthEnd.text.toString().trim())) {\r\n                    dataDTO?.depthEnd = viewBinding.etDepthEnd.text.toString().trim().toInt()\r\n                }\r\n                dataDTO.let {\r\n                    MMKV.defaultMMKV()\r\n                        .encode(BaseConstant.MMKV_WM_CONFIGURATION, GsonUtils.toJson(dataDTO))\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private val editTextDepthFrequency = object : TextWatcher {\r\n        override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n\r\n        }\r\n\r\n        override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n\r\n        }\r\n\r\n        override fun afterTextChanged(p0: Editable?) {\r\n            if (!TextUtils.isEmpty(viewBinding.etDepthFrequency.text.toString().trim())) {\r\n                dataDTO?.depthFrequency =\r\n                    viewBinding.etDepthFrequency.text.toString().trim().toInt()\r\n            }\r\n            if (!TextUtils.isEmpty(viewBinding.etDepthFrequencyEnd.text.toString().trim())) {\r\n                dataDTO?.depthFrequencyEnd =\r\n                    viewBinding.etDepthFrequencyEnd.text.toString().trim().toInt()\r\n            }\r\n            dataDTO.let {\r\n                MMKV.defaultMMKV()\r\n                    .encode(BaseConstant.MMKV_WM_CONFIGURATION, GsonUtils.toJson(dataDTO))\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private val editTextInterrupt = object : TextWatcher {\r\n        override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n\r\n        }\r\n\r\n        override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n\r\n        }\r\n\r\n        override fun afterTextChanged(p0: Editable?) {\r\n            val str = viewBinding.etInterruptTime.text.toString().trim()\r\n            if (TextUtils.isEmpty(str)) {\r\n                viewBinding.tvMsg.text = \"按压超时时间设置\"\r\n            } else {\r\n                if (str.toInt() > 0) {\r\n                    viewBinding.tvMsg.text = \"\"\r\n                    dataDTO?.interruptTime = str.toInt()\r\n                    dataDTO.let {\r\n                        MMKV.defaultMMKV()\r\n                            .encode(BaseConstant.MMKV_WM_CONFIGURATION, GsonUtils.toJson(dataDTO))\r\n                    }\r\n                } else {\r\n                    viewBinding.tvMsg.text = \"按压超时时间设置\"\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private val editTextTidalFrequency = object : TextWatcher {\r\n        override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n\r\n        }\r\n\r\n        override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n\r\n        }\r\n\r\n        override fun afterTextChanged(p0: Editable?) {\r\n            if (!TextUtils.isEmpty(viewBinding.etTidalFrequency.text.toString().trim())) {\r\n                dataDTO?.tidalFrequency =\r\n                    viewBinding.etTidalFrequency.text.toString().trim().toInt()\r\n            }\r\n            if (!TextUtils.isEmpty(viewBinding.etTidalFrequencyEnd.text.toString().trim())) {\r\n                dataDTO?.tidalFrequencyEnd =\r\n                    viewBinding.etTidalFrequencyEnd.text.toString().trim().toInt()\r\n            }\r\n            dataDTO.let {\r\n                MMKV.defaultMMKV()\r\n                    .encode(BaseConstant.MMKV_WM_CONFIGURATION, GsonUtils.toJson(dataDTO))\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private val editTextTidalVolume = object : TextWatcher {\r\n        override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n\r\n        }\r\n\r\n        override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n\r\n        }\r\n\r\n        override fun afterTextChanged(p0: Editable?) {\r\n            if (!TextUtils.isEmpty(viewBinding.etTidalVolume.text.toString().trim())) {\r\n                dataDTO?.tidalVolume = viewBinding.etTidalVolume.text.toString().trim().toInt()\r\n            }\r\n            if (!TextUtils.isEmpty(viewBinding.etTidalVolumeEnd.text.toString().trim())) {\r\n                dataDTO?.tidalVolumeEnd =\r\n                    viewBinding.etTidalVolumeEnd.text.toString().trim().toInt()\r\n            }\r\n            dataDTO.let {\r\n                MMKV.defaultMMKV()\r\n                    .encode(BaseConstant.MMKV_WM_CONFIGURATION, GsonUtils.toJson(dataDTO))\r\n            }\r\n        }\r\n    }\r\n\r\n    private val editTextPr = object : TextWatcher {\r\n        override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n\r\n        }\r\n\r\n        override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n\r\n        }\r\n\r\n        override fun afterTextChanged(p0: Editable?) {\r\n            val value = viewBinding.etPr.text.toString().trim()\r\n            if (TextUtils.isEmpty(value)) {\r\n                viewBinding.tvMsg.text = \"请填写按压次数\"\r\n            } else {\r\n                dataDTO?.prCount = value.toInt()\r\n                dataDTO.let {\r\n                    MMKV.defaultMMKV()\r\n                        .encode(BaseConstant.MMKV_WM_CONFIGURATION, GsonUtils.toJson(dataDTO))\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private val editTextQy = object : TextWatcher {\r\n        override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n\r\n        }\r\n\r\n        override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n\r\n        }\r\n\r\n        override fun afterTextChanged(p0: Editable?) {\r\n            val value = viewBinding.etQy.text.toString().trim()\r\n            if (TextUtils.isEmpty(value)) {\r\n                viewBinding.tvMsg.text = \"请填写吹气次数\"\r\n            } else {\r\n                dataDTO?.qyCount = value.toInt()\r\n                dataDTO.let {\r\n                    MMKV.defaultMMKV()\r\n                        .encode(BaseConstant.MMKV_WM_CONFIGURATION, GsonUtils.toJson(dataDTO))\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    private val editTextDeduction = object : TextWatcher {\r\n        override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n\r\n        }\r\n\r\n        override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n\r\n        }\r\n\r\n        override fun afterTextChanged(p0: Editable?) {\r\n            //中断扣分\r\n            val value = viewBinding.etDeduction.text.toString().trim()\r\n            if (!TextUtils.isEmpty(value)) {\r\n                dataDTO?.deductionTime =\r\n                    viewBinding.etDeduction.text.toString().trim().toInt()\r\n                dataDTO.let {\r\n                    MMKV.defaultMMKV()\r\n                        .encode(BaseConstant.MMKV_WM_CONFIGURATION, GsonUtils.toJson(dataDTO))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private val editTextProcess = object : TextWatcher {\r\n        override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n\r\n        }\r\n\r\n        override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {\r\n\r\n        }\r\n\r\n        override fun afterTextChanged(p0: Editable?) {\r\n            process()\r\n        }\r\n    }\r\n\r\n    private fun process() {\r\n        //流程分数\r\n        val process =\r\n            if (!TextUtils.isEmpty(viewBinding.etProcess.text.toString().trim())) {\r\n                viewBinding.etProcess.text.toString().trim().toInt()\r\n            } else {\r\n                0\r\n            }\r\n        //胸外按压\r\n        val compressions =\r\n            if (!TextUtils.isEmpty(viewBinding.etCompressions.text.toString().trim())) {\r\n                viewBinding.etCompressions.text.toString().trim().toInt()\r\n            } else {\r\n                0\r\n            }\r\n        //人工通气\r\n        val ventilation =\r\n            if (!TextUtils.isEmpty(viewBinding.etVentilation.text.toString().trim())) {\r\n                viewBinding.etVentilation.text.toString().trim().toInt()\r\n            } else {\r\n                0\r\n            }\r\n        val number = process + compressions + ventilation\r\n        if (number > 100) {\r\n            viewBinding.tvDesc.text = \"三项加起来总分 ＜ 100分\"\r\n        } else {\r\n            viewBinding.tvDesc.text = \"\"\r\n            dataDTO?.process = process\r\n            dataDTO?.compressions = compressions\r\n            dataDTO?.ventilation = ventilation\r\n            dataDTO.let {\r\n                MMKV.defaultMMKV()\r\n                    .encode(BaseConstant.MMKV_WM_CONFIGURATION, GsonUtils.toJson(dataDTO))\r\n            }\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/pr/perfectrecovery/activity/ConfigActivity.kt b/app/src/main/java/com/pr/perfectrecovery/activity/ConfigActivity.kt
--- a/app/src/main/java/com/pr/perfectrecovery/activity/ConfigActivity.kt	(revision 7eb44e7b4d350d21c77417b8d0326bfe727d67d4)
+++ b/app/src/main/java/com/pr/perfectrecovery/activity/ConfigActivity.kt	(date 1645925468662)
@@ -277,7 +277,6 @@
 
     }
 
-
     private val editTextDeduction = object : TextWatcher {
         override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {
 
