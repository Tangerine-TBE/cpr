Index: app/src/main/java/com/pr/perfectrecovery/fragment/ChartFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pr.perfectrecovery.fragment\r\n\r\nimport android.graphics.Color\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.blankj.utilcode.util.GsonUtils\r\nimport com.github.mikephil.charting.charts.LineChart\r\nimport com.github.mikephil.charting.components.XAxis\r\nimport com.github.mikephil.charting.components.XAxis.XAxisPosition\r\nimport com.github.mikephil.charting.components.YAxis\r\nimport com.github.mikephil.charting.data.*\r\nimport com.github.mikephil.charting.interfaces.datasets.IBarDataSet\r\nimport com.github.mikephil.charting.interfaces.datasets.ILineDataSet\r\nimport com.pr.perfectrecovery.R\r\nimport com.pr.perfectrecovery.base.BaseConstant\r\nimport com.pr.perfectrecovery.bean.BaseDataDTO\r\nimport com.pr.perfectrecovery.bean.ConfigBean\r\nimport com.pr.perfectrecovery.bean.MessageEventData\r\nimport com.pr.perfectrecovery.databinding.ChartFragmentBinding\r\nimport com.pr.perfectrecovery.fragment.viewmodel.ChartViewModel\r\nimport com.pr.perfectrecovery.livedata.StatusLiveData\r\nimport com.tencent.mmkv.MMKV\r\nimport org.greenrobot.eventbus.EventBus\r\nimport org.greenrobot.eventbus.Subscribe\r\nimport org.greenrobot.eventbus.ThreadMode\r\nimport java.util.*\r\nimport kotlin.math.roundToInt\r\n\r\n/**\r\n * 曲线\r\n */\r\nclass ChartFragment : Fragment() {\r\n    private lateinit var viewBinding: ChartFragmentBinding\r\n    private lateinit var configBean: ConfigBean\r\n    private val TAG = ChartFragment::class.java.simpleName\r\n\r\n    companion object {\r\n        fun newInstance() = ChartFragment()\r\n    }\r\n\r\n    private lateinit var viewModel: ChartViewModel\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        viewBinding = ChartFragmentBinding.inflate(layoutInflater)\r\n        return viewBinding.root\r\n    }\r\n\r\n    override fun onActivityCreated(savedInstanceState: Bundle?) {\r\n        super.onActivityCreated(savedInstanceState)\r\n        EventBus.getDefault().register(this)\r\n        viewModel = ViewModelProvider(this).get(ChartViewModel::class.java)\r\n        val jsonString = MMKV.defaultMMKV().decodeString(BaseConstant.MMKV_WM_CONFIGURATION)\r\n        configBean = GsonUtils.fromJson(jsonString, ConfigBean::class.java)\r\n        initView()\r\n    }\r\n\r\n    //吹气量统计\r\n    private var qyValue = 0\r\n\r\n    private fun initView() {\r\n        //曲线图表\r\n        val data: LineData = getData(0f, false)\r\n        val data1: LineData = getData(0f, true)\r\n        val data2: LineData = getData(0f, false)\r\n//        depth_threshold_low = configBean.depth * 2 - 28    //下限值放大8mm  需要定义变量  上下限阈值要放缩\r\n//        depth_threshold_high = configBean.depthEnd * 2 - 12  //上限值放大8mm\r\n        depth_threshold_low = (configBean.prLow() * 1.4).toInt()   //下限值放大8mm  需要定义变量  上下限阈值要放缩\r\n        depth_threshold_high = (configBean.prHigh() * 1.4).toInt()  //上限值放大8mm\r\n        depth_Frequency_high = (configBean.depthFrequencyEnd)\r\n        depth_Frequency_low = (configBean.depthFrequency)\r\n        // add some transparency to the color with \"& 0x90FFFFFF\"\r\n        initLineChart(viewBinding.lineChart, data)\r\n        LineChartUtils.setLineChart(\r\n            viewBinding.lineChart1,\r\n            data1,\r\n            6,\r\n            9\r\n        )\r\n//        initLineChart(viewBinding.lineChart1, data1)\r\n        initLineChart(viewBinding.lineChart2, data2)\r\n        StatusLiveData.data.observe(requireActivity()) {\r\n            if (it != null) {\r\n                setData(it)\r\n                addEntry(data, viewBinding.lineChart, getBlowFrequencyValue(it.cf))\r\n                addEntry(data1, viewBinding.lineChart1, setValue(it.distance, it))\r\n//                addEntry(data2, viewBinding.lineChart1, it)\r\n                addEntry(data2, viewBinding.lineChart2, getFrequencyValue(it.pf))\r\n                if (qyValue != it.qySum) {\r\n                    qyValue = it.qySum\r\n                    val qyMax = it.qyMaxValue\r\n                    addBarEntry(it.qyValueSum, qyMax)\r\n                } else {\r\n                    addBarEntry(0, 0)\r\n                }\r\n            }\r\n        }\r\n\r\n        initBarChart()\r\n        viewBinding.constraintlayout2.setOnClickListener {\r\n            addBarEntry(Random().nextInt(800), 20)\r\n        }\r\n\r\n        viewBinding.constraintlayout3.setOnClickListener {\r\n            addEntry(data2, viewBinding.lineChart1, Random().nextInt(10).toFloat())\r\n        }\r\n\r\n        viewBinding.constraintlayout.setOnClickListener {\r\n//            addEntry(data, viewBinding.lineChart, 0f)\r\n            val random = (1..20).random()\r\n            addEntry(data2, viewBinding.lineChart, getBlowFrequencyValue(random))\r\n        }\r\n\r\n        viewBinding.constraintlayout4.setOnClickListener {\r\n            val random = (1..200).random()\r\n            addEntry(data, viewBinding.lineChart2, getFrequencyValue(random))\r\n        }\r\n        setViewData()\r\n    }\r\n\r\n    private var depth_threshold_low = 0\r\n    private var depth_threshold_high = 0\r\n    private fun setValue(value: Int, data: BaseDataDTO): Float {\r\n        val depth = data.preDistance - value\r\n        Log.e(\"depth\", \"$depth\")\r\n//        depth_threshold_low = data.PR_LOW_VALUE * 2 - 28    //下限值放大8mm  需要定义变量  上下限阈值要放缩\r\n//        depth_threshold_high = data.PR_HIGH_VALUE * 2 - 12  //上限值放大8mm\r\n        if (depth == 0 || depth <= 8) {\r\n            return 0f                         //    小于8的按压曲线归零\r\n        } else if (depth <= depth_threshold_low) {\r\n            return (6 / depth_threshold_low.toFloat() * depth.toFloat())       //  按压不足 显示区域0-6\r\n        } else if (depth in depth_threshold_low..depth_threshold_high) {\r\n            return (3 / (depth_threshold_high - depth_threshold_low).toFloat() * (depth.toFloat() - depth_threshold_low.toFloat()) + 6.0f)    //按压正确 显示区域6-9\r\n        } else if (depth in depth_threshold_high..129) {\r\n            return (1 / (129 - depth_threshold_high.toFloat()) * (depth - depth_threshold_high.toFloat()) + 9)                  // 按压过大 显示区域9-10\r\n        } else if (depth >= 129) {\r\n            return 9.5f   // 按压显示到极限高度10\r\n        }\r\n        return 0f\r\n    }\r\n\r\n    /**\r\n     * 频率算法 0-200\r\n     */\r\n    private var depth_Frequency_low = 0\r\n    private var depth_Frequency_high = 0\r\n    private fun getFrequencyValue(depth: Int): Float {\r\n        Log.e(TAG, \"$depth\")\r\n        var value = depth\r\n        if (depth == 0 || depth <= 8) {\r\n            return 0f                         //    小于8的按压曲线归零\r\n        } else if (depth <= depth_Frequency_low) {\r\n            return (3.3f / depth.toFloat() * depth_Frequency_low.toFloat())//  按压不足 显示区域0-6\r\n        } else if (depth in depth_Frequency_low..depth_Frequency_high) {\r\n            return (3.3f / (depth.toFloat() - depth_threshold_low) * (depth_Frequency_high - depth_Frequency_low.toFloat()) + 3.3f)    //按压正确 显示区域6-9\r\n        } else if (depth in depth_Frequency_high..200) {\r\n            return (3.3f / (depth.toFloat() - depth_Frequency_high.toFloat()) * (200 - depth_Frequency_high.toFloat()) + 6.6f)                  // 按压过大 显示区域9-10\r\n        } else {\r\n            return 9.9f   // 按压显示到极限高度10\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 吹气频率算法 0-200\r\n     */\r\n    private var blow_Frequency_low = 0\r\n    private var blow_Frequency_high = 0\r\n    private fun getBlowFrequencyValue(depth: Int): Float {\r\n        var value = depth\r\n        if (value > 20) {\r\n            value = 20\r\n        }\r\n        Log.e(\"getFrequencyValue depth\", \"$value\")\r\n        val result = when {\r\n            value <= blow_Frequency_low -> {\r\n                (6 / blow_Frequency_low.toFloat() * value.toFloat())//显示区域0-2\r\n            }\r\n            value in blow_Frequency_low..blow_Frequency_high -> {\r\n                (3 / (blow_Frequency_high - blow_Frequency_low).toFloat() * (depth.toFloat() - blow_Frequency_high.toFloat()) + 6.0f)//显示区域2-8\r\n            }\r\n            value > blow_Frequency_high -> {\r\n                (1 / ((blow_Frequency_high + 9) - blow_Frequency_high.toFloat()) * (depth.toFloat() - blow_Frequency_high.toFloat()) + 6.5f)// 显示区域8-10\r\n            }\r\n            else -> 9.9f\r\n        }\r\n        return if (result > 10) 9.9f else result\r\n    }\r\n\r\n    private fun setViewData() {\r\n        viewBinding.textView22.text = \"${configBean.depth}\"\r\n        viewBinding.tvDepthEnd.text = \"${configBean.depthEnd}\"\r\n        viewBinding.tvDepthFrequency.text = \"${configBean.depthFrequency}\"\r\n        viewBinding.tvDepthFrequencyEnd.text = \"${configBean.depthFrequencyEnd}\"\r\n        viewBinding.tvTidalFrequency.text = \"${configBean.tidalFrequency}\"\r\n        viewBinding.tvTidalFrequencyEnd.text = \"${configBean.tidalFrequencyEnd}\"\r\n        viewBinding.tvTidalVolume.text = \"${configBean.tidalVolume}\"\r\n        viewBinding.tvTidalVolumeEnd.text = \"${configBean.tidalVolumeEnd}\"\r\n    }\r\n\r\n    private fun initLineChart(lineChart: LineChart, lineData: LineData) {\r\n        // apply styling\r\n        // holder.chart.setValueTypeface(mTf);\r\n        lineChart.description.isEnabled = false\r\n        lineChart.setTouchEnabled(false)\r\n        lineChart.setPinchZoom(false)\r\n        lineChart.setDrawGridBackground(false)\r\n        lineChart.setNoDataText(\"暂无数据\")\r\n        val xAxis: XAxis = lineChart.xAxis\r\n        xAxis.setDrawAxisLine(false)\r\n        xAxis.granularity = 1f\r\n//        xAxis.setLabelCount(30, true)\r\n        xAxis.position = XAxisPosition.BOTTOM\r\n\r\n        val leftAxis: YAxis = lineChart.axisLeft\r\n        leftAxis.setLabelCount(3, false)\r\n        leftAxis.axisMinimum = 0f // this replaces setStartAtZero(true)\r\n        leftAxis.mAxisMinimum = 0f\r\n        leftAxis.mAxisMaximum = 10f\r\n        leftAxis.textColor = Color.WHITE\r\n\r\n        val rightAxis: YAxis = lineChart.axisRight\r\n        rightAxis.setDrawGridLines(false)\r\n        rightAxis.axisMinimum = 0f // this replaces setStartAtZero(true)\r\n\r\n        lineData.setDrawValues(true)\r\n        xAxis.setDrawGridLines(false)\r\n        lineData.setValueTextColor(Color.WHITE)\r\n        xAxis.isEnabled = true\r\n        leftAxis.isEnabled = true\r\n        rightAxis.isEnabled = false\r\n        xAxis.textColor = Color.WHITE\r\n\r\n        val l = lineChart.legend\r\n        l.isEnabled = false\r\n\r\n        // set data\r\n        lineChart.data = lineData\r\n\r\n        // do not forget to refresh the chart\r\n        // holder.chart.invalidate();\r\n        lineChart.animateX(750)\r\n    }\r\n\r\n    var mBarDataSet: BarDataSet? = null\r\n    private fun initBarChart() {\r\n        viewBinding.barChart.apply {\r\n            setDrawBorders(false) //显示边界\r\n            setDrawBarShadow(false) //设置每个直方图阴影为false\r\n            setDrawValueAboveBar(true) //这里设置为true每一个直方图的值就会显示在直方图的顶部\r\n            description.isEnabled = false //设置描述文字不显示，默认显示\r\n            setDrawGridBackground(false) //设置不显示网格\r\n            //setBackgroundColor(Color.parseColor(\"#F3F3F3\")) //设置图表的背景颜色\r\n            legend.isEnabled = false //设置不显示比例图\r\n            setScaleEnabled(true) //设置是否可以缩放\r\n            setTouchEnabled(false)\r\n            isHighlightFullBarEnabled = false\r\n//            scaleX = 1.5f\r\n            //x轴设置\r\n            xAxis.apply {\r\n                position = XAxis.XAxisPosition.BOTTOM//X轴的位置 默认为上面\r\n                setDrawGridLines(false)  //是否绘制X轴上的网格线（背景里面的竖线）\r\n                //axisRight.isEnabled = false//隐藏右侧Y轴   默认是左右两侧都有Y轴\r\n                granularity = 1f // only intervals of 1 day\r\n                mAxisMinimum = 0f\r\n            }\r\n            xAxis.setLabelCount(12, false)\r\n            xAxis.isEnabled = false\r\n            axisLeft.isEnabled = false\r\n            axisLeft.textColor = Color.WHITE\r\n            axisLeft.labelCount = 4\r\n            axisLeft.axisMaxLabels = 4\r\n            axisLeft.mAxisMaximum = 1200f\r\n            axisRight.isEnabled = false\r\n            setScaleMinima(1.5f, 1.0f)           //x轴默认放大1.2倍 要不然x轴数据展示不全\r\n            isScaleXEnabled = true                             //支持x轴缩放\r\n            isScaleYEnabled = false\r\n\r\n            // if more than 60 entries are displayed in the chart, no values will be\r\n            //保证Y轴从0开始，不然会上移一点\r\n            axisLeft.axisMinimum = 0f\r\n            axisRight.axisMinimum = 0f\r\n            mBarDataSet = BarDataSet(values, \"Data Set\")\r\n            //set1.setColors(*ColorTemplate.VORDIPLOM_COLORS)\r\n            mBarDataSet!!.setDrawValues(false)\r\n            val dataSets = ArrayList<IBarDataSet>()\r\n            dataSets.add(mBarDataSet!!)\r\n            colors.add(\r\n                ContextCompat.getColor(requireContext(), R.color.tran)\r\n            )\r\n            mBarDataSet!!.colors = colors\r\n            val barData = BarData(dataSets)\r\n            barData.addEntry(BarEntry(0f, 3.8f), 0)\r\n            data = barData\r\n//            data.barWidth = 0.3f\r\n//            addBarEntry(0, 100)\r\n        }\r\n    }\r\n\r\n    private val values = ArrayList<BarEntry>()\r\n    private val colors = ArrayList<Int>()\r\n    private var filterValue = 0\r\n\r\n    //这里要进行图像绘制，所以要切回UI线程，否则会报错\r\n    private fun addBarEntry(value: Int, value2: Int) {\r\n        if (value2 > 0) {\r\n            Log.e(\"addBarEntry\", \"$value2\")\r\n        }\r\n        viewBinding.barChart.apply {\r\n            if (barData != null) {\r\n                val entryCount = (data.getDataSetByIndex(0) as BarDataSet).entryCount\r\n                if (value2 > 0) {\r\n                    when {\r\n                        value2 <= configBean.tidalVolume -> {\r\n                            data.addEntry(BarEntry(entryCount.toFloat(), 1.0f), 0)\r\n                        }\r\n                        value2 <= configBean.tidalVolumeEnd -> {\r\n                            data.addEntry(BarEntry(entryCount.toFloat(), 2.2f), 0)\r\n                        }\r\n                        value2 > configBean.tidalVolumeEnd -> {\r\n                            data.addEntry(BarEntry(entryCount.toFloat(), 3.4f), 0)\r\n                        }\r\n                        else -> {\r\n                            data.addEntry(BarEntry(entryCount.toFloat(), 3.6f), 0)\r\n                        }\r\n                    }\r\n                    when {\r\n                        value2 < configBean.tidalVolume -> {\r\n                            colors.add(\r\n                                ContextCompat.getColor(requireContext(), R.color.color_FDC457)\r\n                            )\r\n                        }\r\n                        value2 <= configBean.tidalVolumeEnd -> {\r\n                            colors.add(\r\n                                ContextCompat.getColor(requireContext(), R.color.color_37B48B)\r\n                            )\r\n                        }\r\n                        value2 > configBean.tidalVolumeEnd -> {\r\n                            colors.add(\r\n                                ContextCompat.getColor(\r\n                                    requireContext(),\r\n                                    R.color.color_text_selected\r\n                                )\r\n                            )\r\n                        }\r\n                    }\r\n                } else {\r\n                    //延迟移动度\r\n                    if (filterValue == 0) {\r\n                        filterValue = 1\r\n                        colors.add(\r\n                            ContextCompat.getColor(requireContext(), R.color.color_FDC457)\r\n                        )\r\n                        data.addEntry(BarEntry(entryCount.toFloat(), 0f), 0)\r\n                    } else {\r\n                        filterValue = 0\r\n                    }\r\n                }\r\n                mBarDataSet!!.colors = colors\r\n                data.notifyDataChanged()\r\n                notifyDataSetChanged()\r\n                //设置在图表中显示的最大X轴数量\r\n                setVisibleXRangeMaximum(12f)\r\n                //这里用29是因为30的话，最后一条柱子只显示了一半\r\n                moveViewToX(barData.entryCount.toFloat() - 12)\r\n                //            moveViewToAnimated(entryCount - 4f, value.toFloat(), YAxis.AxisDependency.RIGHT, 1000)\r\n//                val mMatrix = Matrix()\r\n//                mMatrix.postScale(1.5f, 1f)\r\n//                viewPortHandler.refresh(mMatrix, this, false)\r\n//                animateY(1000)\r\n            }\r\n        }\r\n        viewBinding.barChart.invalidate()\r\n    }\r\n\r\n    private fun setData(data: BaseDataDTO) {\r\n        //吹气总数\r\n        viewBinding.tvLungCount.text = \"${(data.getQy_err_total())}\"\r\n        viewBinding.tvLungTotal.text = \"/${data.qySum}\"\r\n\r\n        //按压总数\r\n        viewBinding.tvHeartCount.text = \"${(data.getPr_err_total())}\"\r\n        viewBinding.tvHeartTotal.text = \"/${data.prSum}\"\r\n    }\r\n\r\n    private fun getData(value: Float, isBezier: Boolean): LineData {\r\n        val values = ArrayList<Entry>()\r\n//        values.add(Entry(0f, value.toFloat()))\r\n        // create a dataset and give it a type\r\n        val VORDIPLOM_COLORS = intArrayOf(\r\n            Color.rgb(61, 179, 142)\r\n        )\r\n        val lineDataSet = LineDataSet(values, \"DataSet 1\")\r\n        lineDataSet.lineWidth = 1.0f\r\n        lineDataSet.circleRadius = 0f\r\n        lineDataSet.circleHoleRadius = 0f\r\n        lineDataSet.valueTextColor = Color.WHITE\r\n        lineDataSet.color = Color.parseColor(\"#3DB38E\")\r\n//        lineDataSet.setCircleColor(Color.parseColor(\"#3DB38E\"))\r\n        lineDataSet.circleColors = VORDIPLOM_COLORS.asList()\r\n        lineDataSet.highLightColor = Color.parseColor(\"#3DB38E\")\r\n        lineDataSet.setDrawValues(false)\r\n        lineDataSet.setDrawCircles(false)\r\n        lineDataSet.axisDependency = YAxis.AxisDependency.LEFT\r\n//        lineDataSet.mode = LineDataSet.Mode.HORIZONTAL_BEZIER\r\n        if (isBezier) {\r\n            lineDataSet.mode = LineDataSet.Mode.CUBIC_BEZIER\r\n        }\r\n        val sets = ArrayList<ILineDataSet>()\r\n//        val d = LineDataSet(values, \"\")\r\n//        d.lineWidth = 0f\r\n//        d.circleRadius = 0f\r\n//        d.circleHoleRadius = 0f\r\n//        d.valueTextColor = Color.TRANSPARENT\r\n//        d.color = Color.TRANSPARENT\r\n//        d.setCircleColor(Color.TRANSPARENT)\r\n//        d.highLightColor = Color.TRANSPARENT\r\n//        d.setDrawValues(false)\r\n//        d.setDrawCircles(false)\r\n//\r\n//        d.axisDependency = YAxis.AxisDependency.LEFT\r\n//        d.mode = LineDataSet.Mode.CUBIC_BEZIER\r\n//        d.highLightColor = Color.argb(0, 0, 0, 0)\r\n//        //d.setCircleColor(Color.argb(0, 0, 0, 0))\r\n//        d.color = Color.argb(0, 0, 0, 0)\r\n//        d.addEntry(Entry(0f, 99f))\r\n//        sets.add(d)\r\n        lineDataSet.addEntry(Entry(0f, 9.8f))\r\n        lineDataSet.addEntry(Entry(0f, 0f))\r\n        sets.add(lineDataSet)\r\n        // create a data object with the data sets\r\n        return LineData(sets)\r\n    }\r\n\r\n    /**\r\n     * 动态添加数据\r\n     * 在一个LineChart中存放的折线，其实是以索引从0开始编号的\r\n     *\r\n     * @param yValues y值\r\n     */\r\n    private fun addEntry(lineData: LineData, lineChart: LineChart, yValues: Float) {\r\n        Log.e(TAG, \"addEntry: $yValues\")\r\n        val entryCount = (lineData.getDataSetByIndex(0) as LineDataSet).entryCount\r\n        val entry = Entry(\r\n            entryCount.toFloat(), yValues\r\n        )\r\n        // 创建一个点\r\n        lineData.addEntry(entry, 0) // 将entry添加到指定索引处的折线中\r\n        lineChart.data = lineData\r\n        //通知数据已经改变\r\n        lineData.notifyDataChanged()\r\n        lineChart.notifyDataSetChanged()\r\n        //通知数据已经改变\r\n        lineData.notifyDataChanged()\r\n        lineChart.notifyDataSetChanged()\r\n        //把yValues移到指定索引的位置\r\n        lineChart.moveViewToAnimated(entryCount - 1f, yValues, YAxis.AxisDependency.LEFT, 100)\r\n        lineChart.setVisibleXRangeMaximum(30f)\r\n        //        lineChart.moveViewToX((lineData.entryCount - 4).toFloat())/**/\r\n        lineChart.moveViewToX((lineData.entryCount - 29).toFloat())\r\n        lineChart.invalidate()\r\n    }\r\n\r\n    @Subscribe(sticky = true, threadMode = ThreadMode.MAIN)\r\n    public fun onEvent(event: MessageEventData) {\r\n        if (event.code == BaseConstant.EVENT_SINGLE_CHART_START) {\r\n            //启动刷新界面数据\r\n            viewBinding.ivLung.setImageDrawable(resources.getDrawable(R.mipmap.icon_wm_chart_lung_red))\r\n            viewBinding.ivHeart.setImageDrawable(resources.getDrawable(R.mipmap.icon_wm_chart_heart_red))\r\n        }\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        EventBus.getDefault().unregister(this)\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/pr/perfectrecovery/fragment/ChartFragment.kt b/app/src/main/java/com/pr/perfectrecovery/fragment/ChartFragment.kt
--- a/app/src/main/java/com/pr/perfectrecovery/fragment/ChartFragment.kt	(revision 73c37f7c7fafab7f5db8d06f691e1c7686ae95e2)
+++ b/app/src/main/java/com/pr/perfectrecovery/fragment/ChartFragment.kt	(date 1651075026638)
@@ -30,7 +30,6 @@
 import org.greenrobot.eventbus.Subscribe
 import org.greenrobot.eventbus.ThreadMode
 import java.util.*
-import kotlin.math.roundToInt
 
 /**
  * 曲线
@@ -77,6 +76,11 @@
         depth_threshold_high = (configBean.prHigh() * 1.4).toInt()  //上限值放大8mm
         depth_Frequency_high = (configBean.depthFrequencyEnd)
         depth_Frequency_low = (configBean.depthFrequency)
+        blow_Frequency_low = configBean.tidalFrequency
+        blow_Frequency_high = configBean.tidalFrequencyEnd
+        //气量值
+        bar_low = configBean.tidalVolume
+        bar_high = configBean.tidalVolumeEnd
         // add some transparency to the color with "& 0x90FFFFFF"
         initLineChart(viewBinding.lineChart, data)
         LineChartUtils.setLineChart(
@@ -97,7 +101,9 @@
                 if (qyValue != it.qySum) {
                     qyValue = it.qySum
                     val qyMax = it.qyMaxValue
-                    addBarEntry(it.qyValueSum, qyMax)
+                    Log.e(TAG, "getBarValue qyMax = $qyMax")
+                    Log.e(TAG, "getBarValue ${getBarValue(qyMax).toInt()}")
+                    addBarEntry(it.qyValueSum, getBarValue(qyMax).toInt())
                 } else {
                     addBarEntry(0, 0)
                 }
@@ -106,11 +112,11 @@
 
         initBarChart()
         viewBinding.constraintlayout2.setOnClickListener {
-            addBarEntry(Random().nextInt(800), 20)
+            //addBarEntry(Random().nextInt(800), 20)
         }
 
         viewBinding.constraintlayout3.setOnClickListener {
-            addEntry(data2, viewBinding.lineChart1, Random().nextInt(10).toFloat())
+            // addEntry(data2, viewBinding.lineChart1, Random().nextInt(10).toFloat())
         }
 
         viewBinding.constraintlayout.setOnClickListener {
@@ -121,11 +127,28 @@
 
         viewBinding.constraintlayout4.setOnClickListener {
             val random = (1..200).random()
-            addEntry(data, viewBinding.lineChart2, getFrequencyValue(random))
+            //addEntry(data, viewBinding.lineChart2, getFrequencyValue(random))
         }
         setViewData()
     }
 
+    private var bar_low = 0
+    private var bar_high = 0
+    private fun getBarValue(mValue: Int): Float {
+        return when {
+            mValue < bar_low -> {
+                3f * mValue.toFloat() / bar_low.toFloat()
+            }
+            mValue in bar_low..bar_high -> {
+                3f * (mValue.toFloat() - bar_low.toFloat()) / (bar_high.toFloat() - bar_low.toFloat()) + 3
+            }
+            mValue > 1200 -> {
+                3f * (mValue.toFloat() - bar_high.toFloat()) / (1200f - bar_low.toFloat()) + 6
+            }
+            else -> 9.9f
+        }
+    }
+
     private var depth_threshold_low = 0
     private var depth_threshold_high = 0
     private fun setValue(value: Int, data: BaseDataDTO): Float {
@@ -155,16 +178,22 @@
     private fun getFrequencyValue(depth: Int): Float {
         Log.e(TAG, "$depth")
         var value = depth
-        if (depth == 0 || depth <= 8) {
-            return 0f                         //    小于8的按压曲线归零
-        } else if (depth <= depth_Frequency_low) {
-            return (3.3f / depth.toFloat() * depth_Frequency_low.toFloat())//  按压不足 显示区域0-6
-        } else if (depth in depth_Frequency_low..depth_Frequency_high) {
-            return (3.3f / (depth.toFloat() - depth_threshold_low) * (depth_Frequency_high - depth_Frequency_low.toFloat()) + 3.3f)    //按压正确 显示区域6-9
-        } else if (depth in depth_Frequency_high..200) {
-            return (3.3f / (depth.toFloat() - depth_Frequency_high.toFloat()) * (200 - depth_Frequency_high.toFloat()) + 6.6f)                  // 按压过大 显示区域9-10
-        } else {
-            return 9.9f   // 按压显示到极限高度10
+        if (depth > 200) {
+            value = 200
+        }
+        return when {
+            value <= depth_Frequency_low -> {
+                (3.3f * value.toFloat() / depth_Frequency_low.toFloat())//  按压不足 显示区域0-6
+            }
+            value in depth_Frequency_low..depth_Frequency_high -> {
+                (3.3f * (value.toFloat() - depth_threshold_low) / (depth_Frequency_high - depth_Frequency_low.toFloat()) + 3.3f)    //按压正确 显示区域6-9
+            }
+            value in depth_Frequency_high..200 -> {
+                (3.3f * (value.toFloat() - depth_Frequency_high.toFloat()) / (200 - depth_Frequency_high.toFloat()) + 6.6f)                  // 按压过大 显示区域9-10
+            }
+            else -> {
+                9.9f   // 按压显示到极限高度10
+            }
         }
     }
 
@@ -175,23 +204,23 @@
     private var blow_Frequency_high = 0
     private fun getBlowFrequencyValue(depth: Int): Float {
         var value = depth
-        if (value > 20) {
+        if (depth > 20) {
             value = 20
         }
-        Log.e("getFrequencyValue depth", "$value")
-        val result = when {
+        return when {
             value <= blow_Frequency_low -> {
-                (6 / blow_Frequency_low.toFloat() * value.toFloat())//显示区域0-2
+                (3.3f * value.toFloat() / blow_Frequency_low.toFloat())//  按压不足 显示区域0-6
             }
             value in blow_Frequency_low..blow_Frequency_high -> {
-                (3 / (blow_Frequency_high - blow_Frequency_low).toFloat() * (depth.toFloat() - blow_Frequency_high.toFloat()) + 6.0f)//显示区域2-8
+                (3.3f * (value.toFloat() - blow_Frequency_low) / (blow_Frequency_high - blow_Frequency_low.toFloat()) + 3.3f)    //按压正确 显示区域6-9
             }
-            value > blow_Frequency_high -> {
-                (1 / ((blow_Frequency_high + 9) - blow_Frequency_high.toFloat()) * (depth.toFloat() - blow_Frequency_high.toFloat()) + 6.5f)// 显示区域8-10
+            value in blow_Frequency_high..20 -> {
+                (3.3f * (value.toFloat() - blow_Frequency_high.toFloat()) / (20 - blow_Frequency_high.toFloat()) + 6.6f)                  // 按压过大 显示区域9-10
             }
-            else -> 9.9f
+            else -> {
+                9.9f   // 按压显示到极限高度10
+            }
         }
-        return if (result > 10) 9.9f else result
     }
 
     private fun setViewData() {
@@ -261,6 +290,10 @@
             legend.isEnabled = false //设置不显示比例图
             setScaleEnabled(true) //设置是否可以缩放
             setTouchEnabled(false)
+
+            // if more than 60 entries are displayed in the chart, no values will be
+            // drawn
+
             isHighlightFullBarEnabled = false
 //            scaleX = 1.5f
             //x轴设置
@@ -271,16 +304,16 @@
                 granularity = 1f // only intervals of 1 day
                 mAxisMinimum = 0f
             }
-            xAxis.setLabelCount(12, false)
+            xAxis.setLabelCount(3, false)
             xAxis.isEnabled = false
-            axisLeft.isEnabled = false
+            axisLeft.isEnabled = true
             axisLeft.textColor = Color.WHITE
-            axisLeft.labelCount = 4
-            axisLeft.axisMaxLabels = 4
-            axisLeft.mAxisMaximum = 1200f
+            axisLeft.labelCount = 3
+            axisLeft.axisMaxLabels = 3
+            axisLeft.mAxisMaximum = 10f
             axisRight.isEnabled = false
             setScaleMinima(1.5f, 1.0f)           //x轴默认放大1.2倍 要不然x轴数据展示不全
-            isScaleXEnabled = true                             //支持x轴缩放
+            isScaleXEnabled = false                             //支持x轴缩放
             isScaleYEnabled = false
 
             // if more than 60 entries are displayed in the chart, no values will be
@@ -297,7 +330,7 @@
             )
             mBarDataSet!!.colors = colors
             val barData = BarData(dataSets)
-            barData.addEntry(BarEntry(0f, 3.8f), 0)
+            barData.addEntry(BarEntry(0f, 9.9f), 0)
             data = barData
 //            data.barWidth = 0.3f
 //            addBarEntry(0, 100)
@@ -317,32 +350,19 @@
             if (barData != null) {
                 val entryCount = (data.getDataSetByIndex(0) as BarDataSet).entryCount
                 if (value2 > 0) {
+                    data.addEntry(BarEntry(entryCount.toFloat(), value2.toFloat()), 0)
                     when {
-                        value2 <= configBean.tidalVolume -> {
-                            data.addEntry(BarEntry(entryCount.toFloat(), 1.0f), 0)
-                        }
-                        value2 <= configBean.tidalVolumeEnd -> {
-                            data.addEntry(BarEntry(entryCount.toFloat(), 2.2f), 0)
-                        }
-                        value2 > configBean.tidalVolumeEnd -> {
-                            data.addEntry(BarEntry(entryCount.toFloat(), 3.4f), 0)
-                        }
-                        else -> {
-                            data.addEntry(BarEntry(entryCount.toFloat(), 3.6f), 0)
-                        }
-                    }
-                    when {
-                        value2 < configBean.tidalVolume -> {
+                        value2 < 3 -> {
                             colors.add(
                                 ContextCompat.getColor(requireContext(), R.color.color_FDC457)
                             )
                         }
-                        value2 <= configBean.tidalVolumeEnd -> {
+                        value2 in 3..6 -> {
                             colors.add(
                                 ContextCompat.getColor(requireContext(), R.color.color_37B48B)
                             )
                         }
-                        value2 > configBean.tidalVolumeEnd -> {
+                        value2 > 6 -> {
                             colors.add(
                                 ContextCompat.getColor(
                                     requireContext(),
@@ -370,7 +390,7 @@
                 setVisibleXRangeMaximum(12f)
                 //这里用29是因为30的话，最后一条柱子只显示了一半
                 moveViewToX(barData.entryCount.toFloat() - 12)
-                //            moveViewToAnimated(entryCount - 4f, value.toFloat(), YAxis.AxisDependency.RIGHT, 1000)
+                //moveViewToAnimated(entryCount - 4f, value.toFloat(), YAxis.AxisDependency.RIGHT, 1000)
 //                val mMatrix = Matrix()
 //                mMatrix.postScale(1.5f, 1f)
 //                viewPortHandler.refresh(mMatrix, this, false)
Index: app/src/main/res/layout/chart_fragment.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n        xmlns:tools=\"http://schemas.android.com/tools\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:background=\"@color/theme_color\">\r\n\r\n    <androidx.core.widget.NestedScrollView\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            app:layout_constraintTop_toTopOf=\"parent\">\r\n\r\n        <androidx.constraintlayout.widget.ConstraintLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:paddingBottom=\"@dimen/dp_40\">\r\n\r\n            <androidx.cardview.widget.CardView\r\n                    android:id=\"@+id/cardView1\"\r\n                    android:layout_width=\"0dp\"\r\n                    android:layout_height=\"@dimen/dp_44\"\r\n                    android:layout_marginStart=\"@dimen/dp_32\"\r\n                    android:layout_marginTop=\"@dimen/dp_10\"\r\n                    android:layout_marginEnd=\"@dimen/dp_10\"\r\n                    app:cardBackgroundColor=\"#B322231D\"\r\n                    app:cardCornerRadius=\"8dp\"\r\n                    app:cardElevation=\"0dp\"\r\n                    app:layout_constraintEnd_toStartOf=\"@+id/cardView2\"\r\n                    app:layout_constraintStart_toStartOf=\"parent\"\r\n                    app:layout_constraintTop_toTopOf=\"parent\"\r\n                    app:layout_constraintVertical_chainStyle=\"spread_inside\">\r\n\r\n                <androidx.constraintlayout.widget.ConstraintLayout\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"match_parent\">\r\n\r\n                    <ImageView\r\n                            android:id=\"@+id/ivLung\"\r\n                            android:layout_width=\"40dp\"\r\n                            android:layout_height=\"40dp\"\r\n                            android:layout_marginStart=\"@dimen/dp_10\"\r\n                            android:src=\"@mipmap/icon_wm_chart_lung\"\r\n                            app:layout_constraintStart_toStartOf=\"parent\"\r\n                            app:layout_constraintBottom_toBottomOf=\"parent\"\r\n                            app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n                    <TextView\r\n                            android:id=\"@+id/tvLungCount\"\r\n                            android:layout_width=\"wrap_content\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:text=\"0\"\r\n                            android:textColor=\"@color/color_text_selected\"\r\n                            android:textSize=\"20sp\"\r\n                            app:layout_constraintEnd_toStartOf=\"@+id/tvLungTotal\"\r\n                            app:layout_constraintTop_toTopOf=\"@+id/tvLungTotal\" />\r\n\r\n                    <TextView\r\n                            android:id=\"@+id/tvLungTotal\"\r\n                            android:layout_width=\"wrap_content\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_marginEnd=\"@dimen/dp_10\"\r\n                            android:text=\"/0\"\r\n                            android:textColor=\"#ffffffff\"\r\n                            android:textSize=\"20sp\"\r\n                            app:layout_constraintBottom_toBottomOf=\"parent\"\r\n                            app:layout_constraintEnd_toEndOf=\"parent\"\r\n                            app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n\r\n                </androidx.constraintlayout.widget.ConstraintLayout>\r\n            </androidx.cardview.widget.CardView>\r\n\r\n            <androidx.cardview.widget.CardView\r\n                    android:id=\"@+id/cardView2\"\r\n                    android:layout_width=\"0dp\"\r\n                    android:layout_height=\"@dimen/dp_44\"\r\n                    android:layout_marginStart=\"@dimen/dp_10\"\r\n                    android:layout_marginEnd=\"@dimen/dp_32\"\r\n                    app:cardBackgroundColor=\"#B322231D\"\r\n                    app:cardCornerRadius=\"8dp\"\r\n                    app:cardElevation=\"0dp\"\r\n                    app:layout_constraintEnd_toEndOf=\"parent\"\r\n                    app:layout_constraintStart_toEndOf=\"@+id/cardView1\"\r\n                    app:layout_constraintTop_toTopOf=\"@+id/cardView1\">\r\n\r\n                <androidx.constraintlayout.widget.ConstraintLayout\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"match_parent\">\r\n\r\n                    <ImageView\r\n                            android:id=\"@+id/ivHeart\"\r\n                            android:layout_width=\"40dp\"\r\n                            android:layout_height=\"40dp\"\r\n                            android:src=\"@mipmap/icon_wm_chart_heart\"\r\n                            android:layout_marginStart=\"@dimen/dp_10\"\r\n                            app:layout_constraintStart_toStartOf=\"parent\"\r\n                            app:layout_constraintTop_toTopOf=\"parent\"\r\n                            app:layout_constraintBottom_toBottomOf=\"parent\" />\r\n\r\n                    <TextView\r\n                            android:id=\"@+id/tvHeartCount\"\r\n                            android:layout_width=\"wrap_content\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:text=\"0\"\r\n                            android:textColor=\"@color/color_text_selected\"\r\n                            android:textSize=\"20sp\"\r\n                            app:layout_constraintEnd_toStartOf=\"@+id/tvHeartTotal\"\r\n                            app:layout_constraintTop_toTopOf=\"@+id/tvHeartTotal\" />\r\n\r\n                    <TextView\r\n                            android:id=\"@+id/tvHeartTotal\"\r\n                            android:layout_width=\"wrap_content\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_marginEnd=\"@dimen/dp_10\"\r\n                            android:text=\"/0\"\r\n                            android:textColor=\"#ffffffff\"\r\n                            android:textSize=\"20sp\"\r\n                            app:layout_constraintBottom_toBottomOf=\"parent\"\r\n                            app:layout_constraintEnd_toEndOf=\"parent\"\r\n                            app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n                </androidx.constraintlayout.widget.ConstraintLayout>\r\n            </androidx.cardview.widget.CardView>\r\n\r\n            <androidx.constraintlayout.widget.ConstraintLayout\r\n                    android:id=\"@+id/constraintlayout\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"@dimen/dp_20\"\r\n                    app:layout_constraintTop_toBottomOf=\"@+id/cardView1\">\r\n\r\n                <TextView\r\n                        android:id=\"@+id/tvTop\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginStart=\"5dp\"\r\n                        android:text=\"次/分\"\r\n                        android:textColor=\"#ffffffff\"\r\n                        android:textSize=\"10sp\"\r\n                        app:layout_constraintStart_toStartOf=\"parent\"\r\n                        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n                <TextView\r\n                        android:id=\"@+id/tvTidalFrequencyEnd\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginStart=\"@dimen/dp_10\"\r\n                        android:text=\"8\"\r\n                        android:textColor=\"#ffffffff\"\r\n                        android:textSize=\"13sp\"\r\n                        app:layout_constraintStart_toStartOf=\"parent\"\r\n                        app:layout_constraintTop_toBottomOf=\"@+id/tvTop\" />\r\n\r\n                <View\r\n                        android:id=\"@+id/view2\"\r\n                        android:layout_width=\"0dp\"\r\n                        android:layout_height=\"1dp\"\r\n                        android:layout_marginStart=\"@dimen/dp_10\"\r\n                        android:layout_marginEnd=\"@dimen/dp_10\"\r\n                        android:background=\"#1EFFFFFF\"\r\n                        app:layout_constraintBottom_toBottomOf=\"@+id/tvTidalFrequencyEnd\"\r\n                        app:layout_constraintEnd_toEndOf=\"parent\"\r\n                        app:layout_constraintStart_toEndOf=\"@+id/tvTidalFrequencyEnd\"\r\n                        app:layout_constraintTop_toTopOf=\"@+id/tvTidalFrequencyEnd\" />\r\n\r\n                <TextView\r\n                        android:id=\"@+id/tvTidalFrequency\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginStart=\"@dimen/dp_10\"\r\n                        android:layout_marginTop=\"@dimen/dp_28\"\r\n                        android:text=\"6\"\r\n                        android:textColor=\"#ffffffff\"\r\n                        android:textSize=\"13sp\"\r\n                        app:layout_constraintStart_toStartOf=\"parent\"\r\n                        app:layout_constraintTop_toBottomOf=\"@+id/tvTidalFrequencyEnd\" />\r\n\r\n                <View\r\n                        android:layout_width=\"0dp\"\r\n                        android:layout_height=\"0dp\"\r\n                        android:background=\"#1A3DB38E\"\r\n                        app:layout_constraintEnd_toEndOf=\"@+id/view2\"\r\n                        app:layout_constraintTop_toBottomOf=\"@+id/view2\"\r\n                        app:layout_constraintStart_toStartOf=\"@+id/view2\"\r\n                        app:layout_constraintBottom_toTopOf=\"@+id/view8\" />\r\n\r\n                <View\r\n                        android:id=\"@+id/view8\"\r\n                        android:layout_width=\"0dp\"\r\n                        android:layout_height=\"1dp\"\r\n                        android:layout_marginStart=\"@dimen/dp_10\"\r\n                        android:layout_marginEnd=\"@dimen/dp_10\"\r\n                        android:background=\"#1EFFFFFF\"\r\n                        app:layout_constraintBottom_toBottomOf=\"@+id/tvTidalFrequency\"\r\n                        app:layout_constraintEnd_toEndOf=\"parent\"\r\n                        app:layout_constraintStart_toEndOf=\"@+id/tvTidalFrequency\"\r\n                        app:layout_constraintTop_toTopOf=\"@+id/tvTidalFrequency\" />\r\n\r\n            </androidx.constraintlayout.widget.ConstraintLayout>\r\n\r\n            <com.github.mikephil.charting.charts.LineChart\r\n                    android:id=\"@+id/lineChart\"\r\n                    android:layout_width=\"0dp\"\r\n                    android:layout_height=\"110dp\"\r\n                    android:layout_marginStart=\"@dimen/dp_18\"\r\n                    android:layout_marginTop=\"@dimen/dp_10\"\r\n                    app:layout_constraintEnd_toEndOf=\"parent\"\r\n                    app:layout_constraintStart_toStartOf=\"@+id/constraintlayout\"\r\n                    app:layout_constraintTop_toBottomOf=\"@+id/cardView1\" />\r\n\r\n            <androidx.constraintlayout.widget.ConstraintLayout\r\n                    android:id=\"@+id/constraintlayout2\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"@dimen/dp_40\"\r\n                    app:layout_constraintStart_toStartOf=\"@+id/barChart\"\r\n                    app:layout_constraintTop_toBottomOf=\"@+id/constraintlayout\">\r\n\r\n                <TextView\r\n                        android:id=\"@+id/tvTop2\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginStart=\"@dimen/dp_5\"\r\n                        android:text=\"毫升\"\r\n                        android:textColor=\"#ffffffff\"\r\n                        android:textSize=\"10sp\"\r\n                        app:layout_constraintStart_toStartOf=\"parent\"\r\n                        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n                <TextView\r\n                        android:id=\"@+id/tvTidalVolumeEnd\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginStart=\"@dimen/dp_5\"\r\n                        android:text=\"600\"\r\n                        android:textColor=\"#ffffffff\"\r\n                        android:textSize=\"13sp\"\r\n                        app:layout_constraintStart_toStartOf=\"parent\"\r\n                        app:layout_constraintTop_toBottomOf=\"@+id/tvTop2\" />\r\n\r\n                <View\r\n                        android:id=\"@+id/viewml\"\r\n                        android:layout_width=\"0dp\"\r\n                        android:layout_height=\"1dp\"\r\n                        android:layout_marginStart=\"@dimen/dp_10\"\r\n                        android:layout_marginEnd=\"@dimen/dp_10\"\r\n                        android:background=\"#1EFFFFFF\"\r\n                        app:layout_constraintBottom_toBottomOf=\"@+id/tvTidalVolumeEnd\"\r\n                        app:layout_constraintEnd_toEndOf=\"parent\"\r\n                        app:layout_constraintStart_toEndOf=\"@+id/tvTidalVolumeEnd\"\r\n                        app:layout_constraintTop_toTopOf=\"@+id/tvTidalVolumeEnd\" />\r\n\r\n                <TextView\r\n                        android:id=\"@+id/tvTidalVolume\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginStart=\"@dimen/dp_5\"\r\n                        android:layout_marginTop=\"@dimen/dp_28\"\r\n                        android:text=\"400\"\r\n                        android:textColor=\"#ffffffff\"\r\n                        android:textSize=\"13sp\"\r\n                        app:layout_constraintStart_toStartOf=\"parent\"\r\n                        app:layout_constraintTop_toBottomOf=\"@+id/tvTidalVolumeEnd\" />\r\n\r\n                <View\r\n                        android:layout_width=\"0dp\"\r\n                        android:layout_height=\"0dp\"\r\n                        android:background=\"#1A3DB38E\"\r\n                        app:layout_constraintEnd_toEndOf=\"@+id/viewml\"\r\n                        app:layout_constraintTop_toBottomOf=\"@+id/viewml\"\r\n                        app:layout_constraintStart_toStartOf=\"@+id/viewml\"\r\n                        app:layout_constraintBottom_toTopOf=\"@+id/viewBar\" />\r\n\r\n                <View\r\n                        android:id=\"@+id/viewBar\"\r\n                        android:layout_width=\"0dp\"\r\n                        android:layout_height=\"1dp\"\r\n                        android:layout_marginStart=\"@dimen/dp_10\"\r\n                        android:layout_marginEnd=\"@dimen/dp_10\"\r\n                        android:background=\"#1EFFFFFF\"\r\n                        app:layout_constraintBottom_toBottomOf=\"@+id/tvTidalVolume\"\r\n                        app:layout_constraintEnd_toEndOf=\"parent\"\r\n                        app:layout_constraintStart_toEndOf=\"@+id/tvTidalVolume\"\r\n                        app:layout_constraintTop_toTopOf=\"@+id/tvTidalVolume\" />\r\n\r\n            </androidx.constraintlayout.widget.ConstraintLayout>\r\n\r\n            <com.github.mikephil.charting.charts.BarChart\r\n                    android:id=\"@+id/barChart\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"0dp\"\r\n                    android:layout_marginStart=\"20dp\"\r\n                    android:layout_marginTop=\"@dimen/dp_10\"\r\n                    app:layout_constraintBottom_toTopOf=\"@+id/constraintlayout3\"\r\n                    app:layout_constraintEnd_toEndOf=\"parent\"\r\n                    app:layout_constraintStart_toStartOf=\"parent\"\r\n                    app:layout_constraintTop_toBottomOf=\"@+id/constraintlayout\" />\r\n\r\n            <TextView\r\n                    android:id=\"@+id/tvTop3\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginStart=\"@dimen/dp_5\"\r\n                    android:text=\"厘米\"\r\n                    android:textColor=\"#ffffffff\"\r\n                    android:textSize=\"10sp\"\r\n                    app:layout_constraintStart_toStartOf=\"parent\"\r\n                    app:layout_constraintBottom_toTopOf=\"@+id/constraintlayout3\" />\r\n\r\n            <androidx.constraintlayout.widget.ConstraintLayout\r\n                    android:id=\"@+id/constraintlayout3\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"@dimen/dp_30\"\r\n                    android:visibility=\"visible\"\r\n                    app:layout_constraintStart_toStartOf=\"parent\"\r\n                    app:layout_constraintTop_toBottomOf=\"@+id/constraintlayout2\">\r\n\r\n                <View\r\n                        android:layout_width=\"0dp\"\r\n                        android:layout_height=\"1dp\"\r\n                        android:background=\"@color/purple_200\"\r\n                        android:layout_marginStart=\"@dimen/dp_20\"\r\n                        android:layout_marginEnd=\"@dimen/dp_10\"\r\n                        app:layout_constraintEnd_toEndOf=\"parent\"\r\n                        app:layout_constraintStart_toEndOf=\"@+id/tvDepth\"\r\n                        app:layout_constraintTop_toTopOf=\"@+id/tvDepth\"\r\n                        app:layout_constraintBottom_toBottomOf=\"@+id/tvDepth\" />\r\n\r\n                <TextView\r\n                        android:id=\"@+id/tvDepth\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"0\"\r\n                        android:textColor=\"#ffffffff\"\r\n                        android:textSize=\"13sp\"\r\n                        android:gravity=\"center\"\r\n                        android:layout_marginStart=\"4dp\"\r\n                        app:layout_constraintTop_toTopOf=\"parent\"\r\n                        app:layout_constraintStart_toStartOf=\"parent\" />\r\n\r\n                <View\r\n                        android:id=\"@+id/view5\"\r\n                        android:layout_width=\"0dp\"\r\n                        android:layout_height=\"1dp\"\r\n                        android:layout_marginStart=\"@dimen/dp_4\"\r\n                        android:layout_marginEnd=\"@dimen/dp_10\"\r\n                        android:background=\"#1EFFFFFF\"\r\n                        android:visibility=\"gone\"\r\n                        app:layout_constraintBottom_toBottomOf=\"@+id/tvDepth\"\r\n                        app:layout_constraintEnd_toEndOf=\"parent\"\r\n                        app:layout_constraintStart_toEndOf=\"@+id/tvDepth\"\r\n                        app:layout_constraintTop_toTopOf=\"@+id/tvDepth\" />\r\n\r\n                <TextView\r\n                        android:id=\"@+id/textView22\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginStart=\"5dp\"\r\n                        android:layout_marginTop=\"50dp\"\r\n                        android:text=\"5\"\r\n                        android:textColor=\"#ffffffff\"\r\n                        android:textSize=\"13sp\"\r\n                        app:layout_constraintStart_toStartOf=\"parent\"\r\n                        app:layout_constraintTop_toBottomOf=\"@+id/tvDepth\" />\r\n\r\n                <View\r\n                        android:layout_width=\"0dp\"\r\n                        android:layout_height=\"0dp\"\r\n                        android:background=\"#1A3DB38E\"\r\n                        app:layout_constraintEnd_toEndOf=\"@+id/viewline\"\r\n                        app:layout_constraintTop_toBottomOf=\"@+id/viewline\"\r\n                        app:layout_constraintStart_toStartOf=\"@+id/viewline\"\r\n                        app:layout_constraintBottom_toTopOf=\"@+id/viewcm\" />\r\n\r\n                <View\r\n                        android:id=\"@+id/viewline\"\r\n                        android:layout_width=\"0dp\"\r\n                        android:layout_height=\"1dp\"\r\n                        android:layout_marginStart=\"@dimen/dp_20\"\r\n                        android:layout_marginEnd=\"@dimen/dp_10\"\r\n                        android:background=\"#1EFFFFFF\"\r\n                        app:layout_constraintBottom_toBottomOf=\"@+id/textView22\"\r\n                        app:layout_constraintEnd_toEndOf=\"parent\"\r\n                        app:layout_constraintStart_toEndOf=\"@+id/textView22\"\r\n                        app:layout_constraintTop_toTopOf=\"@+id/textView22\" />\r\n\r\n                <TextView\r\n                        android:id=\"@+id/tvDepthEnd\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginStart=\"@dimen/dp_5\"\r\n                        android:layout_marginTop=\"@dimen/dp_20\"\r\n                        android:text=\"6\"\r\n                        android:textColor=\"#ffffffff\"\r\n                        android:textSize=\"13sp\"\r\n                        app:layout_constraintStart_toStartOf=\"parent\"\r\n                        app:layout_constraintTop_toBottomOf=\"@+id/textView22\" />\r\n\r\n                <View\r\n                        android:id=\"@+id/viewcm\"\r\n                        android:layout_width=\"0dp\"\r\n                        android:layout_height=\"1dp\"\r\n                        android:layout_marginStart=\"@dimen/dp_20\"\r\n                        android:layout_marginEnd=\"@dimen/dp_10\"\r\n                        android:background=\"#1EFFFFFF\"\r\n                        app:layout_constraintBottom_toBottomOf=\"@+id/tvDepthEnd\"\r\n                        app:layout_constraintEnd_toEndOf=\"parent\"\r\n                        app:layout_constraintStart_toEndOf=\"@+id/tvDepthEnd\"\r\n                        app:layout_constraintTop_toTopOf=\"@+id/tvDepthEnd\" />\r\n\r\n            </androidx.constraintlayout.widget.ConstraintLayout>\r\n\r\n            <com.github.mikephil.charting.charts.LineChart\r\n                    android:id=\"@+id/lineChart1\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"150dp\"\r\n                    android:layout_marginTop=\"@dimen/dp_24\"\r\n                    app:layout_constraintStart_toStartOf=\"parent\"\r\n                    app:layout_constraintTop_toBottomOf=\"@+id/constraintlayout2\" />\r\n\r\n            <androidx.constraintlayout.widget.ConstraintLayout\r\n                    android:id=\"@+id/constraintlayout4\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"@dimen/dp_50\"\r\n                    app:layout_constraintTop_toBottomOf=\"@+id/constraintlayout3\">\r\n\r\n                <TextView\r\n                        android:id=\"@+id/tvTop4\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginStart=\"@dimen/dp_5\"\r\n                        android:text=\"次/分\"\r\n                        android:textColor=\"#ffffffff\"\r\n                        android:textSize=\"10sp\"\r\n                        app:layout_constraintStart_toStartOf=\"parent\"\r\n                        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n                <TextView\r\n                        android:id=\"@+id/tvDepthFrequencyEnd\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginStart=\"@dimen/dp_5\"\r\n                        android:text=\"120\"\r\n                        android:textColor=\"#ffffffff\"\r\n                        android:textSize=\"13sp\"\r\n                        app:layout_constraintStart_toStartOf=\"parent\"\r\n                        app:layout_constraintTop_toBottomOf=\"@+id/tvTop4\" />\r\n\r\n                <View\r\n                        android:id=\"@+id/view3\"\r\n                        android:layout_width=\"0dp\"\r\n                        android:layout_height=\"1dp\"\r\n                        android:layout_marginStart=\"@dimen/dp_10\"\r\n                        android:layout_marginEnd=\"@dimen/dp_10\"\r\n                        android:background=\"#1EFFFFFF\"\r\n                        app:layout_constraintBottom_toBottomOf=\"@+id/tvDepthFrequencyEnd\"\r\n                        app:layout_constraintEnd_toEndOf=\"parent\"\r\n                        app:layout_constraintStart_toEndOf=\"@+id/tvDepthFrequencyEnd\"\r\n                        app:layout_constraintTop_toTopOf=\"@+id/tvDepthFrequencyEnd\" />\r\n\r\n                <TextView\r\n                        android:id=\"@+id/tvDepthFrequency\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginStart=\"@dimen/dp_5\"\r\n                        android:layout_marginTop=\"@dimen/dp_30\"\r\n                        android:text=\"100\"\r\n                        android:textColor=\"#ffffffff\"\r\n                        android:textSize=\"13sp\"\r\n                        app:layout_constraintStart_toStartOf=\"parent\"\r\n                        app:layout_constraintTop_toBottomOf=\"@+id/tvDepthFrequencyEnd\" />\r\n\r\n                <View\r\n                        android:layout_width=\"0dp\"\r\n                        android:layout_height=\"0dp\"\r\n                        android:background=\"#1A3DB38E\"\r\n                        app:layout_constraintEnd_toEndOf=\"@+id/view3\"\r\n                        app:layout_constraintTop_toBottomOf=\"@+id/view3\"\r\n                        app:layout_constraintStart_toStartOf=\"@+id/view3\"\r\n                        app:layout_constraintBottom_toTopOf=\"@+id/viewcpm\" />\r\n\r\n                <View\r\n                        android:id=\"@+id/viewcpm\"\r\n                        android:layout_width=\"0dp\"\r\n                        android:layout_height=\"1dp\"\r\n                        android:layout_marginStart=\"@dimen/dp_10\"\r\n                        android:layout_marginEnd=\"@dimen/dp_10\"\r\n                        android:background=\"#1EFFFFFF\"\r\n                        app:layout_constraintBottom_toBottomOf=\"@+id/tvDepthFrequency\"\r\n                        app:layout_constraintEnd_toEndOf=\"parent\"\r\n                        app:layout_constraintStart_toEndOf=\"@+id/tvDepthFrequency\"\r\n                        app:layout_constraintTop_toTopOf=\"@+id/tvDepthFrequency\" />\r\n\r\n            </androidx.constraintlayout.widget.ConstraintLayout>\r\n\r\n            <com.github.mikephil.charting.charts.LineChart\r\n                    android:id=\"@+id/lineChart2\"\r\n                    android:layout_width=\"0dp\"\r\n                    android:layout_height=\"120dp\"\r\n                    android:layout_marginStart=\"@dimen/dp_24\"\r\n                    android:layout_marginTop=\"@dimen/dp_30\"\r\n                    app:layout_constraintEnd_toEndOf=\"parent\"\r\n                    app:layout_constraintStart_toStartOf=\"@+id/constraintlayout4\"\r\n                    app:layout_constraintTop_toBottomOf=\"@+id/constraintlayout3\" />\r\n        </androidx.constraintlayout.widget.ConstraintLayout>\r\n    </androidx.core.widget.NestedScrollView>\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/chart_fragment.xml b/app/src/main/res/layout/chart_fragment.xml
--- a/app/src/main/res/layout/chart_fragment.xml	(revision 73c37f7c7fafab7f5db8d06f691e1c7686ae95e2)
+++ b/app/src/main/res/layout/chart_fragment.xml	(date 1651073247117)
@@ -291,7 +291,7 @@
                     android:layout_width="match_parent"
                     android:layout_height="0dp"
                     android:layout_marginStart="20dp"
-                    android:layout_marginTop="@dimen/dp_10"
+                    android:layout_marginTop="@dimen/dp_20"
                     app:layout_constraintBottom_toTopOf="@+id/constraintlayout3"
                     app:layout_constraintEnd_toEndOf="parent"
                     app:layout_constraintStart_toStartOf="parent"
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2022_3_25_23_34_[Default_Changelist]/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2022_3_25_23_34_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2022_3_25_23_34_[Default_Changelist]/shelved.patch
new file mode 100644
--- /dev/null	(date 1648222533232)
+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_2022_3_25_23_34_[Default_Changelist]/shelved.patch	(date 1648222533232)
@@ -0,0 +1,142 @@
+Index: app/src/main/java/com/pr/perfectrecovery/utils/DataVolatile.kt
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package com.pr.perfectrecovery.utils\r\n\r\nimport android.util.Log\r\nimport com.pr.perfectrecovery.bean.BaseDataDTO\r\nimport com.pr.perfectrecovery.livedata.StatusLiveData\r\nimport kotlin.math.abs\r\n\r\nclass DataVolatile {\r\n\r\n    companion object {\r\n        /**\r\n         * 初始化按压区间值\r\n         */\r\n        var PR_LOW_VALUE = 45\r\n        var PR_HIGH_VALUE = 60\r\n\r\n        var QY_LOW_VALUE = 35\r\n        var QY_HIGH_VALUE = 50\r\n    }\r\n\r\n    //电量值：  0-100%\r\n    private var VI_Value = 0\r\n\r\n    //距离值：  30-150\r\n    private var L_Value = 0\r\n\r\n    //气压值：  0-2000ml\r\n    private var QY_Value = 0\r\n\r\n    //蓝牙连接状态：   0-断开 1-连接\r\n    private var BLS_Value = 0\r\n\r\n    //USB连接状态: 0-断开 1-连接\r\n    private var ULS_Value = 0\r\n\r\n    //通道打开状态 0-关闭 1-打开\r\n    private var TOS_Value = 0\r\n\r\n    //连接方式  0-蓝牙 1-连接USB\r\n    private var LKS_Value = 0\r\n\r\n    //按压位置正确  0-错误  1-正确\r\n    private var PSR_Value = 0\r\n\r\n    //工作方式：00——休眠   01——工作    02——待机\r\n    private var WS_Value = 0\r\n\r\n    //按压频率：0-200\r\n    private var PF_Value = 0\r\n\r\n    //吹气频率：0-200\r\n    private var CF_Value = 0\r\n\r\n    //按压次数\r\n    private var PR_SUM = 0\r\n\r\n    //吹气次数\r\n    private var QY_SUM = 0\r\n\r\n    //吹气上升或下降标志位\r\n    private var top_flag = 0\r\n\r\n    //按压上升或下降标志位\r\n    private var low_flag = 0\r\n\r\n    private var Qliang = 0\r\n\r\n    private val dataDTO = BaseDataDTO()\r\n\r\n    //是否开始数据传输\r\n    private var isStart = false\r\n\r\n    private var L_valueSet = mutableListOf<Int>()\r\n    private var QY_valueSet = mutableListOf<Int>()\r\n    private var QY_valueSet2 = mutableListOf<Int>()\r\n    private var QY_valueSet3 = mutableListOf<Int>()\r\n    private var pt_valueSet = mutableListOf<Int>()\r\n    private var py_valueSet = mutableListOf<Int>()\r\n\r\n    private var deviceMAC: String? = null\r\n    private var QY_RUN_FLAG = 0\r\n\r\n    /**\r\n     * array 数据列表\r\n     * isClear 清除数据集合\r\n     */\r\n    fun qyMax(): Int {\r\n        var maximum = 0\r\n        for (i in QY_valueSet3.indices) {\r\n            if (maximum < QY_valueSet3[i]) {\r\n                maximum = QY_valueSet3[i]\r\n            }\r\n        }\r\n        QY_valueSet3.clear()\r\n        return maximum\r\n    }\r\n\r\n    /**\r\n     * array 数据列表\r\n     * isClear 清除数据集合\r\n     */\r\n    fun max(isClear: Boolean): Int {\r\n        var maximum = 0\r\n        for (i in QY_valueSet.indices) {\r\n            if (maximum < QY_valueSet[i]) {\r\n                maximum = QY_valueSet[i]\r\n            }\r\n        }\r\n        if (isClear) {\r\n            QY_valueSet.clear()\r\n        }\r\n\r\n        return maximum\r\n    }\r\n\r\n    fun selectMax(L1: Int, L2: Int, L3: Int): Int {\r\n        val value1 = kotlin.math.max(L1, L2)\r\n        val value2 = kotlin.math.max(L2, L3)\r\n        return kotlin.math.max(value1, value2)\r\n    }\r\n\r\n    fun selectMin(L1: Int, L2: Int, L3: Int): Int {\r\n        val value1 = kotlin.math.min(L1, L2)\r\n        val value2 = kotlin.math.min(L2, L3)\r\n        return kotlin.math.min(value1, value2)\r\n    }\r\n\r\n    /**\r\n     * 获取吹气值和\r\n     */\r\n    fun qyValue(): Int {\r\n        var sum = 0\r\n        for (i in QY_valueSet2.indices) {\r\n            sum += i\r\n        }\r\n        QY_valueSet2.clear()\r\n        return sum\r\n    }\r\n\r\n    /**\r\n     * 解析蓝发送的数据\r\n     *\r\n     * @param data\r\n     */\r\n    @Synchronized\r\n    fun parseString(data: String?): BaseDataDTO {\r\n        //System.out.print(DataFormatUtils.getCrc16(DataFormatUtils.hexStr2Bytes(data)));\r\n        if (data != null && data.length == 40) {\r\n            deviceMAC = \"001b${data.substring(24, 28) + data.substring(32, 36)}\"\r\n            //模型状态需先判断\r\n            val state = DataFormatUtils.byteArrayToInt(\r\n                DataFormatUtils.hexStr2Bytes(\r\n                    \"00\" + data.substring(\r\n                        28,\r\n                        30\r\n                    )\r\n                )\r\n            )\r\n            if (state and 1 == 1) {\r\n                BLS_Value = 1\r\n            } else {\r\n                BLS_Value = 0\r\n            }\r\n            if (state and 2 == 2) {\r\n                ULS_Value = 1\r\n            } else {\r\n                ULS_Value = 0\r\n            }\r\n            if (state and 4 == 4) {\r\n                TOS_Value = 1\r\n            } else {\r\n                TOS_Value = 0\r\n            }\r\n            if (state and 8 == 8) {\r\n                LKS_Value = 1\r\n            } else {\r\n                LKS_Value = 0\r\n            }\r\n//            if (state and 16 == 16) {\r\n//                PSR_Value = 1\r\n//            } else {\r\n//                PSR_Value = 0\r\n//            }\r\n            if (state and 8 == 8) {\r\n                PSR_Value = 1\r\n            } else {\r\n                PSR_Value = 0\r\n            }\r\n            //按压距离\r\n            val L_d1 = DataFormatUtils.byteArrayToInt(\r\n                DataFormatUtils.hexStr2Bytes(\r\n                    \"00\" + data.substring(\r\n                        12,\r\n                        14\r\n                    )\r\n                )\r\n            )\r\n            val L_d2 = DataFormatUtils.byteArrayToInt(\r\n                DataFormatUtils.hexStr2Bytes(\r\n                    \"00\" + data.substring(\r\n                        14,\r\n                        16\r\n                    )\r\n                )\r\n            )\r\n            val L_d3 = DataFormatUtils.byteArrayToInt(\r\n                DataFormatUtils.hexStr2Bytes(\r\n                    \"00\" + data.substring(\r\n                        16,\r\n                        18\r\n                    )\r\n                )\r\n            )\r\n\r\n            val QY_d1 = DataFormatUtils.byteArrayToInt(\r\n                DataFormatUtils.hexStr2Bytes(\r\n                    \"00\" + data.substring(\r\n                        18,\r\n                        20\r\n                    )\r\n                )\r\n            )\r\n            val QY_d2 = DataFormatUtils.byteArrayToInt(\r\n                DataFormatUtils.hexStr2Bytes(\r\n                    \"00\" + data.substring(\r\n                        20,\r\n                        22\r\n                    )\r\n                )\r\n            )\r\n            val QY_d3 = DataFormatUtils.byteArrayToInt(\r\n                DataFormatUtils.hexStr2Bytes(\r\n                    \"00\" + data.substring(\r\n                        22,\r\n                        24\r\n                    )\r\n                ),\r\n            )\r\n            Log.e(\"TAG11\", \"当前的按压值$L_d1  $L_d2  $L_d3\")\r\n            Log.e(\"TAG11\", \"当前的吹气值$QY_d1  $QY_d2  $QY_d3\")\r\n            //判断是按压还是吹气，执行相应的动作\r\n            /*\r\n            * 吹气状态的判断：\r\n            * 1：当三个值均为0，代表完成一次按压；\r\n            * 2：当有一个值小于5也默认完成一次按压\r\n            * */\r\n            if (selectMax(QY_d1, QY_d2, QY_d3) > 10) {\r\n                QY_RUN_FLAG = 1\r\n            } else {\r\n                QY_Value = 0\r\n            }\r\n            if (QY_RUN_FLAG == 1) {\r\n                Log.e(\"TAG11\", \"判断为吹气状态\")\r\n                QY_Value = selectValue_QY(QY_d1, QY_d2, QY_d3)\r\n            } else {\r\n                //吹气数据\r\n                Log.e(\"TAG11\", \"判断为按压状态\")\r\n                L_Value = selectValue_P(L_d1, L_d2, L_d3)\r\n                //清空频率\r\n                pt(L_Value)\r\n            }\r\n            py(QY_Value)\r\n            //频率\r\n            // var pfvalue=DataFormatUtils.byteArrayToInt( DataFormatUtils.hexStr2Bytes(\"00\" + data.substring(24, 26)));\r\n            // Log.e(\"TAG9\", \"按压频率：$pfvalue\")\r\n            // CF_Value=DataFormatUtils.byteArrayToInt( DataFormatUtils.hexStr2Bytes(\"00\" + data.substring(26, 28)));\r\n            var v = DataFormatUtils.byteArrayToInt(\r\n                DataFormatUtils.hexStr2Bytes(\r\n                    \"00\" + data.substring(\r\n                        30,\r\n                        32\r\n                    )\r\n                )\r\n            )\r\n            if (abs(v - VI_Value) > 5) {\r\n                if (v < 5) {\r\n                    VI_Value = 5\r\n                } else if (v > 95) {\r\n                    VI_Value = 100\r\n                } else {\r\n                    VI_Value = (v / 5).toInt() * 5\r\n                }\r\n            }\r\n\r\n        }\r\n        val stringBuffer = StringBuffer()\r\n        stringBuffer.append(\"电量值：\").append(VI_Value)\r\n        stringBuffer.append(\"距离值：\").append(L_Value)\r\n        stringBuffer.append(\"气压值：\").append(QY_Value)\r\n        stringBuffer.append(\"蓝牙连接值：\").append(BLS_Value)\r\n        stringBuffer.append(\"USB连接值：\").append(ULS_Value)\r\n        stringBuffer.append(\"通道打开状态值：\").append(TOS_Value)\r\n        stringBuffer.append(\"连接方式值：\").append(LKS_Value)\r\n        stringBuffer.append(\"按压位置正确值：\").append(PSR_Value)\r\n        stringBuffer.append(\"工作方式值：\").append(WS_Value)\r\n        stringBuffer.append(\"按压频率值：\").append(PF_Value)\r\n        stringBuffer.append(\"吹气频率值：\").append(CF_Value)\r\n\r\n        val dataDTO = BaseDataDTO()\r\n        dataDTO.mac = deviceMAC.toString()\r\n        dataDTO.prSum = PR_SUM\r\n        dataDTO.qySum = QY_SUM\r\n        dataDTO.electricity = VI_Value\r\n        dataDTO.distance = L_Value\r\n        dataDTO.bpValue = QY_Value\r\n        dataDTO.blsType = BLS_Value\r\n        dataDTO.usbConnectType = ULS_Value\r\n        dataDTO.aisleType = TOS_Value\r\n        dataDTO.connectType = LKS_Value\r\n        dataDTO.psrType = PSR_Value\r\n        dataDTO.workType = WS_Value\r\n        dataDTO.cf = CF_Value\r\n        dataDTO.pf = PF_Value\r\n        dataDTO.isStart = isStart\r\n        dataDTO.err_pr_high = ERR_PR_HIGH\r\n        dataDTO.err_pr_low = ERR_PR_LOW\r\n        dataDTO.err_qy_close = ERR_QY_CLOSE\r\n        dataDTO.err_pr_posi = ERR_PR_POSI\r\n        dataDTO.err_qy_dead = ERR_QY_DEAD\r\n        dataDTO.err_qy_high = ERR_QY_HIGH\r\n        dataDTO.err_qy_low = ERR_QY_LOW\r\n        dataDTO.err_pr_unback = ERR_PR_UNBACK\r\n        dataDTO.pr_depth_sum = PR_DEPTH_SUM  //按压深度总和(mm)\r\n        dataDTO.pr_time_sum = PR_TIME_SUM    // 按压时间总和（ms）\r\n        dataDTO.qy_volume_sum = QY_VOLUME_SUM  //吹气量总和\r\n        dataDTO.qy_time_sum = QY_TIME_SUM     //吹气时间总和\r\n        dataDTO.pr_seqright_total = PR_SEQRIGHT_TOTAL //按压频率正常的次数\r\n        dataDTO.qy_serright_total = QY_SERRIGHT_TOTAL //吹气频率正确的次数\r\n//        deviceMAC?.let { mapObject.put(it, dataDTO) }\r\n        dataDTO.preDistance = preDistance.toInt()\r\n        if (QY_SUM != qy) {\r\n            qy = QY_SUM\r\n            val max = qyMax()\r\n            dataDTO.qyValueSum = qyValue()\r\n            dataDTO.qyMaxValue = getQyMax(max)\r\n            QY_MAX_VOLUME_SUM += getQyMax(max)\r\n        }\r\n        dataDTO.qy_max_volume_sum = QY_MAX_VOLUME_SUM\r\n        dataDTO.PR_HIGH_VALUE = PR_HIGH_VALUE\r\n        dataDTO.PR_LOW_VALUE = PR_LOW_VALUE\r\n        return dataDTO\r\n    }\r\n\r\n    /**\r\n     * 吹气体积\r\n     */\r\n    private fun getQyMax(value: Int): Int {\r\n        var qy = 0\r\n        when {\r\n            value < 30 -> {\r\n                qy = abs(20 * value - 100)\r\n            }\r\n            value in 30..60 -> {\r\n                qy = abs((10.0f / 3.0f) * value + 400).toInt()\r\n            }\r\n            value in 60..105 -> {\r\n                qy = abs((40.0f / 3.0f) * value - 200).toInt()\r\n            }\r\n            value > 105 -> {\r\n                qy = 1200\r\n            }\r\n        }\r\n        return qy\r\n    }\r\n\r\n    private var qy = 0\r\n    fun dataClear() {\r\n        isStart = false\r\n        //电量值：  0-100%\r\n        VI_Value = 0\r\n        //距离值：  30-150\r\n        L_Value = 0\r\n        //气压值：  0-2000ml\r\n        QY_Value = 0\r\n        //蓝牙连接状态：   0-断开 1-连接\r\n        BLS_Value = 0\r\n        //按压频率：0-200\r\n        PF_Value = 0\r\n        //吹气频率：0-200\r\n        CF_Value = 0\r\n        //按压次数\r\n        PR_SUM = 0\r\n        //吹气次数\r\n        QY_SUM = 0\r\n        ERR_PR_UNBACK = 0\r\n        ERR_PR_HIGH = 0\r\n        ERR_PR_LOW = 0\r\n        ERR_PR_POSI = 0\r\n        ERR_QY_CLOSE = 0\r\n        ERR_QY_DEAD = 0\r\n        ERR_QY_HIGH = 0\r\n        ERR_QY_LOW = 0\r\n        PR_DEPTH_SUM = 0  //按压深度总和(mm)\r\n        PR_TIME_SUM = 0    // 按压时间总和（ms）\r\n        QY_VOLUME_SUM = 0  //吹气量总和\r\n        QY_TIME_SUM = 0     //吹气时间总和\r\n        QY_MAX_VOLUME_SUM = 0//吹气每次最大值总和\r\n        PR_SEQRIGHT_TOTAL = 0; //按压频率正常的次数\r\n        QY_SERRIGHT_TOTAL = 0; //吹气频率正确的次数\r\n        L_valueSet.clear()\r\n        QY_valueSet.clear()\r\n        QY_valueSet2.clear()\r\n        py_valueSet.clear()\r\n        pt_valueSet.clear()\r\n    }\r\n    /*\r\n* 获取初始位置，每次连接成功后调用一次初始化方法\r\n* */\r\n\r\n    var preDistance: Long = 180\r\n\r\n    var preDistanceMap = mutableMapOf<String, Long>()\r\n\r\n    @Synchronized\r\n    fun initPreDistance(data: String?, macAddress: String) {\r\n        // long value=180;\r\n        if (data != null && data.length == 40) {\r\n            //按压距离\r\n            val L_d1 = DataFormatUtils.byteArrayToInt(\r\n                DataFormatUtils.hexStr2Bytes(\r\n                    \"00\" + data.substring(\r\n                        12,\r\n                        14\r\n                    )\r\n                )\r\n            )\r\n            val L_d2 = DataFormatUtils.byteArrayToInt(\r\n                DataFormatUtils.hexStr2Bytes(\r\n                    \"00\" + data.substring(\r\n                        14,\r\n                        16\r\n                    )\r\n                )\r\n            )\r\n            val L_d3 = DataFormatUtils.byteArrayToInt(\r\n                DataFormatUtils.hexStr2Bytes(\r\n                    \"00\" + data.substring(\r\n                        16,\r\n                        18\r\n                    )\r\n                )\r\n            )\r\n            preDistance = ((L_d1 + L_d2 + L_d3) / 3).toLong();\r\n            //preDistance=150\r\n            // preDistance=L_d1.toLong();\r\n            macAddress.let {\r\n                preDistanceMap[macAddress] = preDistance\r\n            }\r\n        }\r\n    }\r\n\r\n    private var UNBACK_FLAG = 0\r\n    private var ERR_FLAG = 0\r\n    private var PR_DOTTIMSE_NUMBER = 0\r\n    private var PR_RUN_FLAG = 0\r\n    private var MIN_FLAG = 0;\r\n\r\n    private var PR_DEPTH_SUM = 0  //按压深度总和(mm)\r\n    private var PR_TIME_SUM = 0    // 按压时间总和（ms）\r\n    private var QY_VOLUME_SUM = 0  //吹气量总和\r\n    private var QY_MAX_VOLUME_SUM = 0 //每次吹气峰值总和\r\n    private var QY_TIME_SUM = 0     //吹气时间总和\r\n    private var PR_SEQRIGHT_TOTAL = 0; //按压频率正常的次数\r\n    private var QY_SERRIGHT_TOTAL = 0; //吹气频率正确的次数\r\n    private  var L_compare=0;//距离参考值，记录上次的有效值\r\n\r\n    /*\r\n    * 根据按压三次相邻的距离值找到有效值。\r\n    * */\r\n    private fun selectValue_P(L_d1: Int, L_d2: Int, L_d3: Int): Int {\r\n        var value = 0\r\n        var index = 0\r\n        Log.e(\"TAG8\", \"$L_d1  $L_d2  $L_d3\")\r\n        if (PR_RUN_FLAG == 1) {\r\n            L_valueSet.add(index, L_d1)\r\n            L_valueSet.add(index + 1, L_d2)\r\n            L_valueSet.add(index + 2, L_d3)\r\n            index += 3\r\n        }\r\n        //消除传感器自身的波动误差\r\n        if (abs(preDistance - L_d1) < 10 && abs(preDistance - L_d2) < 10 && abs(preDistance - L_d3) < 10\r\n        ) {\r\n            low_flag = 0\r\n            UNBACK_FLAG = 0\r\n            return preDistance.toInt()\r\n        }\r\n        if(QY_CYCLE_TIMES<QY_DEFAULT_TIMES&&QY_CYCLE_TIMES>0){\r\n            QY_TIMES_TOOLITTLE=QY_DEFAULT_TIMES-QY_CYCLE_TIMES\r\n            QY_CYCLE_TIMES=0\r\n        }else{\r\n            QY_CYCLE_TIMES=0\r\n        }\r\n\r\n        // int low_flag=0;\r\n        if (L_d1 >= L_d2) {\r\n            //  PR_DOTTIMSE_NUMBER+=3\r\n            if (L_d2 >= L_d3) {\r\n                if (selectMax(abs(L_d1 - L_d2), abs(L_d1 - L_d3), abs(L_d2 - L_d3)) > 5) {\r\n                    low_flag = 0\r\n                    if (UNBACK_FLAG == 1) {\r\n                        ERR_PR_UNBACK++\r\n                        UNBACK_FLAG = 0\r\n                        Log.e(\"TAG12\", \"按压未回弹\")\r\n                        ERR_FLAG = 1;\r\n\r\n                    }\r\n                }\r\n                value = L_d3\r\n            } else {\r\n                if (selectMax(abs(L_d1 - L_d2), abs(L_d1 - L_d3), abs(L_d2 - L_d3)) > 5) {\r\n                    //当最低点距离小于30时不作为按压一次处理\r\n                    if (preDistance - L_d2 < 30) {\r\n                        return L_d2\r\n                    }\r\n                    if (low_flag == 0) {//防止在上升到最高点出现抖动导致次数误增加\r\n                        low_flag = 1\r\n                        PR_SUM++\r\n                        PR_CYCLE_TIMES++\r\n                        //  Log.e(\"TAG5\", \"$PR_SUM\")\r\n                        if (ERR_FLAG == 0) {\r\n                            Err_PrTotal(L_d2)\r\n                        } else {\r\n                            ERR_FLAG = 0;\r\n                        }\r\n                        PR_RUN_FLAG = 1;\r\n                        //  Log.e(\"TAG8\", \"距离点数$PR_DOTTIMSE_NUMBER\")\r\n                        if (PR_SUM > 1) {\r\n                            if (L_valueSet.size > 30) {\r\n                                PF_Value = 0;\r\n                                L_valueSet.clear()\r\n                            } else {\r\n                                if (MIN_FLAG == 1) {\r\n                                    PR_DOTTIMSE_NUMBER = L_valueSet.size\r\n                                } else if (MIN_FLAG == 2) {\r\n                                    PR_DOTTIMSE_NUMBER = L_valueSet.size + 2\r\n                                }\r\n                                PR_TIME_SUM += (PR_DOTTIMSE_NUMBER * 40).toInt()\r\n                                PF_Value =\r\n                                    (PF_Value + (60000 / (PR_DOTTIMSE_NUMBER * 40)).toInt()) / 2\r\n                                if (PF_Value in 100..120) {\r\n                                    PR_SEQRIGHT_TOTAL++\r\n                                }\r\n                                PR_DOTTIMSE_NUMBER = 0;\r\n                                index = 0\r\n                                L_valueSet.clear()\r\n                            }\r\n                            PR_DEPTH_SUM += (preDistance - L_d2 + 5).toInt()\r\n\r\n                        }\r\n\r\n                    }\r\n                    MIN_FLAG = 1\r\n                }\r\n                value = L_d2\r\n            }\r\n        } else if (L_d2 < L_d3) {\r\n            if (selectMax(abs(L_d1 - L_d2), abs(L_d1 - L_d3), abs(L_d2 - L_d3)) > 5) {\r\n                // PR_DOTTIMSE_NUMBER+=3\r\n                if (preDistance - L_d1 < 30) {\r\n                    return L_d1\r\n                }\r\n                /* if(abs(L_d2-L_d1)<15&&abs(L_d3-L_d2)<15&&abs(L_d3-L_d1)<15){\r\n                return L_d1\r\n            }*/\r\n                if (low_flag == 0) {\r\n                    low_flag = 1\r\n\r\n                    PR_SUM++\r\n                    PR_CYCLE_TIMES++\r\n                    // Log.e(\"TAG5\", \"$PR_SUM\")\r\n                    if (ERR_FLAG == 0) {\r\n                        if(L_compare<L_d1){\r\n                            Err_PrTotal(L_compare)\r\n                        }else{\r\n                            Err_PrTotal(L_d1)\r\n                        }\r\n                    } else {\r\n                        ERR_FLAG = 0;\r\n                    }\r\n                    PR_RUN_FLAG = 1;\r\n                    //Log.e(\"TAG8\", \"距离点数$PR_DOTTIMSE_NUMBER\")\r\n                    if (PR_SUM > 1) {\r\n                        if (L_valueSet.size > 30) {\r\n                            PF_Value = 0;\r\n                            L_valueSet.clear()\r\n                        } else {\r\n                            if (MIN_FLAG == 1) {\r\n                                PR_DOTTIMSE_NUMBER = L_valueSet.size - 2\r\n                            } else if (MIN_FLAG == 2) {\r\n                                PR_DOTTIMSE_NUMBER = L_valueSet.size\r\n                            }\r\n                            PR_TIME_SUM += (PR_DOTTIMSE_NUMBER * 40).toInt()\r\n                            PF_Value = (PF_Value + (60000 / (PR_DOTTIMSE_NUMBER * 40)).toInt()) / 2\r\n                            if (PF_Value in 100..120) {\r\n                                PR_SEQRIGHT_TOTAL++\r\n                            }\r\n                            PR_DOTTIMSE_NUMBER = 0;\r\n                            index = 0\r\n                            L_valueSet.clear()\r\n                        }\r\n                        PR_DEPTH_SUM += (preDistance - L_d1 + 5).toInt()\r\n                    }\r\n                    MIN_FLAG = 2\r\n                    value = L_d1\r\n                } else {\r\n                    // PR_DOTTIMSE_NUMBER+=3\r\n                    Log.e(\"TAG7\", \"初始位置$preDistance\")\r\n                    if (abs(preDistance - L_d3) < 12) {\r\n                        UNBACK_FLAG = 0\r\n                        low_flag = 0\r\n                        //Log.e(\"TAG7\", \"初始位置$preDistance\")\r\n                        // Log.e(\"TAG7\", \"回到初始位置，复位$L_d3\")\r\n                    } else {\r\n                        UNBACK_FLAG = 1\r\n                        //  Log.e(\"TAG7\", \"未回弹$L_d3\")\r\n                    }\r\n                    value = L_d3\r\n                }\r\n            }\r\n            value = L_d2\r\n        } else {\r\n            if (selectMax(abs(L_d1 - L_d2), abs(L_d1 - L_d3), abs(L_d2 - L_d3)) > 5) {\r\n                // PR_DOTTIMSE_NUMBER+=3\r\n                Log.e(\"TAG7\", \"初始位置$preDistance\")\r\n                if (abs(preDistance - L_d2) < 12) {\r\n                    UNBACK_FLAG = 0\r\n                    Log.e(\"TAG7\", \"回到初始位置，复位未回弹$L_d2\")\r\n                    low_flag = 0\r\n                } else {\r\n                    UNBACK_FLAG = 1\r\n                    Log.e(\"TAG7\", \"未回弹$L_d2\")\r\n                }\r\n            }\r\n            value = L_d2\r\n        }\r\n        L_compare=value\r\n        return value\r\n    }\r\n\r\n    //按压错误-按压未回弹\r\n    private var ERR_PR_UNBACK = 0\r\n\r\n    //按压错误-按压不足\r\n    private var ERR_PR_LOW = 0\r\n\r\n    //按压错误-按压过大\r\n    private var ERR_PR_HIGH = 0\r\n\r\n    //按压错误-按压位置错误\r\n    private var ERR_PR_POSI = 0\r\n\r\n    //按压超次\r\n    private var ERR_PR_TOOMORE=0\r\n    //按压少次\r\n    private var ERR_PR_TOOLITTLE=0\r\n    //默认单次按压循环的次数是30\r\n    private var PR_DEFAULT_TIMES=30;\r\n    //单次按压循环的次数\r\n    private var PR_CYCLE_TIMES=0;\r\n\r\n    private fun Err_PrTotal(l: Int) {\r\n        if(PR_CYCLE_TIMES>PR_DEFAULT_TIMES) {\r\n            ERR_PR_TOOMORE++\r\n        }else {\r\n            if (PSR_Value == 0) {\r\n                ERR_PR_POSI++\r\n                Log.e(\"TAG11\", \"按压位置错误\")\r\n            } else {\r\n                var value = abs(preDistance - l)\r\n                if (value < PR_LOW_VALUE) {\r\n                    ERR_PR_LOW++\r\n                    Log.e(\"TAG11\", \"$PR_LOW_VALUE\")\r\n                    Log.e(\"TAG11\", \"按压不足\")\r\n                    Log.e(\"TAG11\", \"$value\")\r\n                } else if (value > PR_HIGH_VALUE) {\r\n                    ERR_PR_HIGH++\r\n                    Log.e(\"TAG11\", \"$PR_HIGH_VALUE\")\r\n                    Log.e(\"TAG11\", \"按压过深\")\r\n                    Log.e(\"TAG11\", \"$value\")\r\n                }\r\n                // Log.e(\"TAG3\", \"$value\")\r\n            }\r\n        }\r\n    }\r\n\r\n    //吹气错误-气压不足\r\n    private var ERR_QY_LOW = 0\r\n\r\n    //吹气错误-气压过大\r\n    private var ERR_QY_HIGH = 0\r\n\r\n    //吹气错误-气压进胃\r\n    private var ERR_QY_DEAD = 0\r\n\r\n    //吹气错误-气道未打开错误\r\n    private var ERR_QY_CLOSE = 0\r\n\r\n    //默认单次循环吹气次数\r\n    private var QY_DEFAULT_TIMES=2\r\n    //单次循环吹气次数\r\n    private var QY_CYCLE_TIMES=0;\r\n    //吹气超次\r\n    private var QY_TIMES_TOOMORE=0\r\n    //吹气少次\r\n    private var QY_TIMES_TOOLITTLE=0;\r\n\r\n    private fun ERR_QyTotal(value: Int) {\r\n        if(QY_CYCLE_TIMES>QY_DEFAULT_TIMES){\r\n            QY_TIMES_TOOMORE++\r\n        }else {\r\n            if (TOS_Value == 0) {\r\n                ERR_QY_CLOSE++\r\n            } else {\r\n                when {\r\n                    value < QY_LOW_VALUE -> {\r\n                        ERR_QY_LOW++\r\n                    }\r\n                    value in QY_HIGH_VALUE..1199 -> {\r\n                        ERR_QY_HIGH++\r\n                    }\r\n                    value >= 1200 -> {\r\n                        ERR_QY_DEAD++\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private var preTimeQY: Long = 0\r\n\r\n    /*\r\n * 根据吹气三次相邻的气压值找到有效值。\r\n * */\r\n    private fun selectValue_QY(QY_d1: Int, QY_d2: Int, QY_d3: Int): Int {\r\n        var value = 0\r\n        if (QY_d1 > 5 || QY_d2 > 5 || QY_d3 > 5) {\r\n            top_flag = 1\r\n            Qliang = (QY_d1 + QY_d2 + QY_d3) * 30\r\n            QY_VOLUME_SUM += Qliang\r\n            if(PR_CYCLE_TIMES<30&&PR_CYCLE_TIMES>0){\r\n                ERR_PR_TOOLITTLE+=(30-PR_CYCLE_TIMES)\r\n            }\r\n            PR_CYCLE_TIMES=0\r\n        }\r\n        if (QY_d1 <= 5 && QY_d2 <= 5 && QY_d3 <= 5) {\r\n            QY_RUN_FLAG = 0\r\n            if (top_flag == 1) {\r\n\r\n                val changTimePress = System.currentTimeMillis()\r\n                ++QY_SUM\r\n                QY_CYCLE_TIMES++\r\n                ERR_QyTotal(getQyMax(max(true)))//每次筛选最大吹气值，去做错误次数的判断\r\n                top_flag = 0\r\n                Qliang = 0\r\n                if (QY_SUM > 1) {\r\n                    val time = changTimePress - preTimeQY\r\n                    QY_TIME_SUM += time.toInt()\r\n                    CF_Value = (60000 / time).toInt()\r\n                    if (CF_Value in 6..8) {\r\n                        QY_SERRIGHT_TOTAL++\r\n                    }\r\n                }\r\n                preTimeQY = changTimePress\r\n                // Log.e(\"TAG10\", \"吹气的时间累加和$QY_TIME_SUM\")\r\n            } else {\r\n                return 0\r\n            }\r\n        }\r\n        value = if (QY_d1 <= QY_d2) {\r\n            if (QY_d2 <= QY_d3) {\r\n                QY_d3\r\n            } else {\r\n                //  top_flag=1;\r\n                QY_d2\r\n            }\r\n        } else {\r\n            if (QY_d2 >= QY_d3) {\r\n                QY_d3\r\n            } else {\r\n                QY_d2\r\n            }\r\n        }\r\n        if (value > 0) {\r\n            QY_valueSet2.add(value)\r\n            QY_valueSet.add(value)\r\n            QY_valueSet3.add(value)\r\n        }\r\n        return value\r\n    }\r\n\r\n    //判断按压是否停止\r\n    private val count = 20\r\n    private fun pt(p: Int): Boolean {\r\n        if (p > (preDistance - 5)) {\r\n            if (pt_valueSet.size == count) pt_valueSet.removeFirst()\r\n            pt_valueSet.add(p)\r\n            if (pt_valueSet.size == count) {\r\n                pt_valueSet.clear()\r\n                PF_Value = 0\r\n                return true\r\n            }\r\n        } else {\r\n            pt_valueSet.clear()\r\n        }\r\n        return false\r\n    }\r\n\r\n    //判断按压是否停止\r\n    private fun py(p: Int): Boolean {\r\n        if (p == 0) {\r\n            if (py_valueSet.size == count) py_valueSet.removeFirst()\r\n            py_valueSet.add(p)\r\n            if (py_valueSet.size == count) {\r\n                py_valueSet.clear()\r\n                CF_Value = 0\r\n                return true\r\n            }\r\n        } else {\r\n            py_valueSet.clear()\r\n        }\r\n        return false\r\n    }\r\n}
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/src/main/java/com/pr/perfectrecovery/utils/DataVolatile.kt b/app/src/main/java/com/pr/perfectrecovery/utils/DataVolatile.kt
+--- a/app/src/main/java/com/pr/perfectrecovery/utils/DataVolatile.kt	
++++ b/app/src/main/java/com/pr/perfectrecovery/utils/DataVolatile.kt	
+@@ -16,6 +16,11 @@
+ 
+         var QY_LOW_VALUE = 35
+         var QY_HIGH_VALUE = 50
++
++        //默认单次按压循环的次数是30
++        var PR_DEFAULT_TIMES = 30
++        //默认单次循环吹气次数
++        var QY_DEFAULT_TIMES = 2
+     }
+ 
+     //电量值：  0-100%
+@@ -462,7 +467,7 @@
+     private var QY_TIME_SUM = 0     //吹气时间总和
+     private var PR_SEQRIGHT_TOTAL = 0; //按压频率正常的次数
+     private var QY_SERRIGHT_TOTAL = 0; //吹气频率正确的次数
+-    private  var L_compare=0;//距离参考值，记录上次的有效值
++    private var L_compare = 0;//距离参考值，记录上次的有效值
+ 
+     /*
+     * 根据按压三次相邻的距离值找到有效值。
+@@ -484,11 +489,11 @@
+             UNBACK_FLAG = 0
+             return preDistance.toInt()
+         }
+-        if(QY_CYCLE_TIMES<QY_DEFAULT_TIMES&&QY_CYCLE_TIMES>0){
+-            QY_TIMES_TOOLITTLE=QY_DEFAULT_TIMES-QY_CYCLE_TIMES
+-            QY_CYCLE_TIMES=0
+-        }else{
+-            QY_CYCLE_TIMES=0
++        if (QY_CYCLE_TIMES < QY_DEFAULT_TIMES && QY_CYCLE_TIMES > 0) {
++            QY_TIMES_TOOLITTLE = QY_DEFAULT_TIMES - QY_CYCLE_TIMES
++            QY_CYCLE_TIMES = 0
++        } else {
++            QY_CYCLE_TIMES = 0
+         }
+ 
+         // int low_flag=0;
+@@ -569,9 +574,9 @@
+                     PR_CYCLE_TIMES++
+                     // Log.e("TAG5", "$PR_SUM")
+                     if (ERR_FLAG == 0) {
+-                        if(L_compare<L_d1){
++                        if (L_compare < L_d1) {
+                             Err_PrTotal(L_compare)
+-                        }else{
++                        } else {
+                             Err_PrTotal(L_d1)
+                         }
+                     } else {
+@@ -633,7 +638,7 @@
+             }
+             value = L_d2
+         }
+-        L_compare=value
++        L_compare = value
+         return value
+     }
+ 
+@@ -650,23 +655,23 @@
+     private var ERR_PR_POSI = 0
+ 
+     //按压超次
+-    private var ERR_PR_TOOMORE=0
++    private var ERR_PR_TOOMORE = 0
++
+     //按压少次
+-    private var ERR_PR_TOOLITTLE=0
+-    //默认单次按压循环的次数是30
+-    private var PR_DEFAULT_TIMES=30;
++    private var ERR_PR_TOOLITTLE = 0
++
+     //单次按压循环的次数
+-    private var PR_CYCLE_TIMES=0;
++    private var PR_CYCLE_TIMES = 0
+ 
+     private fun Err_PrTotal(l: Int) {
+-        if(PR_CYCLE_TIMES>PR_DEFAULT_TIMES) {
++        if (PR_CYCLE_TIMES > PR_DEFAULT_TIMES) {
+             ERR_PR_TOOMORE++
+-        }else {
++        } else {
+             if (PSR_Value == 0) {
+                 ERR_PR_POSI++
+                 Log.e("TAG11", "按压位置错误")
+             } else {
+-                var value = abs(preDistance - l)
++                val value = abs(preDistance - l)
+                 if (value < PR_LOW_VALUE) {
+                     ERR_PR_LOW++
+                     Log.e("TAG11", "$PR_LOW_VALUE")
+@@ -695,19 +700,19 @@
+     //吹气错误-气道未打开错误
+     private var ERR_QY_CLOSE = 0
+ 
+-    //默认单次循环吹气次数
+-    private var QY_DEFAULT_TIMES=2
+     //单次循环吹气次数
+-    private var QY_CYCLE_TIMES=0;
++    private var QY_CYCLE_TIMES = 0;
++
+     //吹气超次
+-    private var QY_TIMES_TOOMORE=0
++    private var QY_TIMES_TOOMORE = 0
++
+     //吹气少次
+-    private var QY_TIMES_TOOLITTLE=0;
++    private var QY_TIMES_TOOLITTLE = 0;
+ 
+     private fun ERR_QyTotal(value: Int) {
+-        if(QY_CYCLE_TIMES>QY_DEFAULT_TIMES){
++        if (QY_CYCLE_TIMES > QY_DEFAULT_TIMES) {
+             QY_TIMES_TOOMORE++
+-        }else {
++        } else {
+             if (TOS_Value == 0) {
+                 ERR_QY_CLOSE++
+             } else {
+@@ -737,10 +742,10 @@
+             top_flag = 1
+             Qliang = (QY_d1 + QY_d2 + QY_d3) * 30
+             QY_VOLUME_SUM += Qliang
+-            if(PR_CYCLE_TIMES<30&&PR_CYCLE_TIMES>0){
+-                ERR_PR_TOOLITTLE+=(30-PR_CYCLE_TIMES)
++            if (PR_CYCLE_TIMES < 30 && PR_CYCLE_TIMES > 0) {
++                ERR_PR_TOOLITTLE += (30 - PR_CYCLE_TIMES)
+             }
+-            PR_CYCLE_TIMES=0
++            PR_CYCLE_TIMES = 0
+         }
+         if (QY_d1 <= 5 && QY_d2 <= 5 && QY_d3 <= 5) {
+             QY_RUN_FLAG = 0
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2022_3_25_23_34__Default_Changelist_.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2022_3_25_23_34__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_2022_3_25_23_34__Default_Changelist_.xml
new file mode 100644
--- /dev/null	(date 1651073113567)
+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_2022_3_25_23_34__Default_Changelist_.xml	(date 1651073113567)
@@ -0,0 +1,4 @@
+<changelist name="Uncommitted_changes_before_Update_at_2022_3_25_23_34_[Default_Changelist]" date="1648222457996" recycled="false" toDelete="true">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2022_3_25_23_34_[Default_Changelist]/shelved.patch" />
+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2022/3/25 23:34 [Default Changelist]" />
+</changelist>
\ No newline at end of file
Index: FastBleLib/build/.transforms/c65fd4b9d2f4bad0a7e48d1049dc46f0/results.bin
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FastBleLib/build/.transforms/c65fd4b9d2f4bad0a7e48d1049dc46f0/results.bin b/FastBleLib/build/.transforms/c65fd4b9d2f4bad0a7e48d1049dc46f0/results.bin
new file mode 100644
--- /dev/null	(date 1651073401234)
+++ b/FastBleLib/build/.transforms/c65fd4b9d2f4bad0a7e48d1049dc46f0/results.bin	(date 1651073401234)
@@ -0,0 +1,1 @@
+o/debug
Index: FastBleLib/build/.transforms/32610847b748a3e155f5c6b795330e36/results.bin
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FastBleLib/build/.transforms/32610847b748a3e155f5c6b795330e36/results.bin b/FastBleLib/build/.transforms/32610847b748a3e155f5c6b795330e36/results.bin
new file mode 100644
--- /dev/null	(date 1651073400833)
+++ b/FastBleLib/build/.transforms/32610847b748a3e155f5c6b795330e36/results.bin	(date 1651073400833)
@@ -0,0 +1,1 @@
+i/
Index: FastBleLib/build/intermediates/incremental/packageDebugResources/compile-file-map.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#Tue Apr 26 00:09:53 CST 2022\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FastBleLib/build/intermediates/incremental/packageDebugResources/compile-file-map.properties b/FastBleLib/build/intermediates/incremental/packageDebugResources/compile-file-map.properties
--- a/FastBleLib/build/intermediates/incremental/packageDebugResources/compile-file-map.properties	(revision 73c37f7c7fafab7f5db8d06f691e1c7686ae95e2)
+++ b/FastBleLib/build/intermediates/incremental/packageDebugResources/compile-file-map.properties	(date 1651073385205)
@@ -1,1 +1,1 @@
-#Tue Apr 26 00:09:53 CST 2022
+#Wed Apr 27 23:29:45 CST 2022
Index: usbSerialForAndroid/build/.transforms/f67d664ff7fed6b22b66ecaced9bf05e/results.bin
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/usbSerialForAndroid/build/.transforms/f67d664ff7fed6b22b66ecaced9bf05e/results.bin b/usbSerialForAndroid/build/.transforms/f67d664ff7fed6b22b66ecaced9bf05e/results.bin
new file mode 100644
--- /dev/null	(date 1651073400129)
+++ b/usbSerialForAndroid/build/.transforms/f67d664ff7fed6b22b66ecaced9bf05e/results.bin	(date 1651073400129)
@@ -0,0 +1,1 @@
+i/
Index: usbSerialForAndroid/build/intermediates/incremental/packageDebugResources/compile-file-map.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#Tue Apr 26 00:09:53 CST 2022\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/usbSerialForAndroid/build/intermediates/incremental/packageDebugResources/compile-file-map.properties b/usbSerialForAndroid/build/intermediates/incremental/packageDebugResources/compile-file-map.properties
--- a/usbSerialForAndroid/build/intermediates/incremental/packageDebugResources/compile-file-map.properties	(revision 73c37f7c7fafab7f5db8d06f691e1c7686ae95e2)
+++ b/usbSerialForAndroid/build/intermediates/incremental/packageDebugResources/compile-file-map.properties	(date 1651073385262)
@@ -1,1 +1,1 @@
-#Tue Apr 26 00:09:53 CST 2022
+#Wed Apr 27 23:29:45 CST 2022
Index: app/src/main/java/com/pr/perfectrecovery/activity/CPRActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pr.perfectrecovery.activity\r\n\r\nimport android.Manifest\r\nimport android.app.AlertDialog\r\nimport android.bluetooth.BluetoothAdapter\r\nimport android.bluetooth.BluetoothGatt\r\nimport android.content.BroadcastReceiver\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.IntentFilter\r\nimport android.content.pm.PackageManager\r\nimport android.hardware.usb.UsbManager\r\nimport android.location.LocationManager\r\nimport android.os.*\r\nimport android.provider.Settings\r\nimport android.text.TextUtils\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.widget.Toast\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.blankj.utilcode.util.GsonUtils\r\nimport com.blankj.utilcode.util.ToastUtils\r\nimport com.chad.library.adapter.base.BaseQuickAdapter\r\nimport com.chad.library.adapter.base.listener.OnItemClickListener\r\nimport com.chad.library.adapter.base.viewholder.BaseViewHolder\r\nimport com.clj.fastble.BleManager\r\nimport com.clj.fastble.callback.BleGattCallback\r\nimport com.clj.fastble.callback.BleNotifyCallback\r\nimport com.clj.fastble.callback.BleScanCallback\r\nimport com.clj.fastble.data.BleDevice\r\nimport com.clj.fastble.exception.BleException\r\nimport com.clj.fastble.scan.BleScanRuleConfig\r\nimport com.clj.fastble.utils.HexUtil\r\nimport com.hoho.android.usbserial.driver.CdcAcmSerialDriver\r\nimport com.hoho.android.usbserial.driver.ProbeTable\r\nimport com.hoho.android.usbserial.driver.UsbSerialDriver\r\nimport com.hoho.android.usbserial.driver.UsbSerialProber\r\nimport com.pr.perfectrecovery.BaseApplication\r\nimport com.pr.perfectrecovery.R\r\nimport com.pr.perfectrecovery.adapter.DeviceBluetoothAdapter\r\nimport com.pr.perfectrecovery.base.BaseActivity\r\nimport com.pr.perfectrecovery.base.BaseConstant\r\nimport com.pr.perfectrecovery.bean.BaseDataDTO\r\nimport com.pr.perfectrecovery.bean.ConfigBean\r\nimport com.pr.perfectrecovery.bean.MessageEventData\r\nimport com.pr.perfectrecovery.comm.ObserverManager\r\nimport com.pr.perfectrecovery.databinding.ActivityCpractivityBinding\r\nimport com.pr.perfectrecovery.databinding.ItemBluetoothBinding\r\nimport com.pr.perfectrecovery.livedata.StatusLiveData\r\nimport com.pr.perfectrecovery.utils.ConvertUtil\r\nimport com.pr.perfectrecovery.utils.DataVolatile01\r\nimport com.tencent.mmkv.MMKV\r\nimport org.greenrobot.eventbus.EventBus\r\nimport org.greenrobot.eventbus.Subscribe\r\nimport org.greenrobot.eventbus.ThreadMode\r\nimport java.util.*\r\n\r\n/**\r\n * CPR页面  蓝夜列表扫描链接\r\n */\r\nclass CPRActivity : BaseActivity() {\r\n    private lateinit var viewBinding: ActivityCpractivityBinding\r\n    private var isRefresh = false\r\n    private val mDeviceAdapter = DeviceBluetoothAdapter()\r\n    private var bleList = mutableListOf<BleDevice>()\r\n    private var connectList = arrayListOf<BleDevice>()\r\n    private var isInitValueMap = mutableMapOf<String, Boolean>()\r\n\r\n    companion object {\r\n        fun getCustomProber(): UsbSerialProber {\r\n            val customTable = ProbeTable()\r\n            customTable.addProduct(\r\n                0x16d0,\r\n                0x087e,\r\n                CdcAcmSerialDriver::class.java\r\n            ) // e.g. Digispark CDC\r\n            return UsbSerialProber(customTable)\r\n        }\r\n    }\r\n\r\n    //监听USB连接状态\r\n    var broadcastReceiver: BroadcastReceiver = object : BroadcastReceiver() {\r\n        override fun onReceive(context: Context?, intent: Intent) {\r\n            val action = intent.action\r\n            if (action == \"android.hardware.usb.action.USB_STATE\") {\r\n                val connected = intent.extras!!.getBoolean(\"connected\")\r\n                if (connected) {\r\n//                    Toast.makeText(this@CPRActivity, \"USB已连接\", Toast.LENGTH_SHORT).show()\r\n//                    viewBinding.tvMsg.text = \"USB已连接\"\r\n                } else {\r\n//                    viewBinding.tvMsg.text = \"USB已断开\"\r\n//                    Toast.makeText(this@CPRActivity, \"USB已断开\", Toast.LENGTH_SHORT).show()\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        viewBinding = ActivityCpractivityBinding.inflate(layoutInflater)\r\n        setContentView(viewBinding.root)\r\n        EventBus.getDefault().register(this)\r\n        registerBroadcast()\r\n        initView()\r\n        //初始化蓝牙管理器\r\n        initBluetooth()\r\n        initBle()\r\n        ttl()\r\n        viewBinding.cbBle.isChecked = true\r\n    }\r\n\r\n    private fun refresh() {\r\n        if (viewBinding.cbUsb.isChecked) {\r\n            val usbManager = getSystemService(USB_SERVICE) as UsbManager\r\n            val usbDefaultProber: UsbSerialProber = UsbSerialProber.getDefaultProber()\r\n            val usbCustomProber: UsbSerialProber = getCustomProber()\r\n            //        if (usbManager.deviceList.values == null || usbManager.deviceList.values.isEmpty()) {\r\n            //            viewBinding.ctUsb.isChecked = false\r\n            //        }\r\n            var bleDevice: BleDevice? = null\r\n            for (device in usbManager.deviceList.values) {\r\n                val driver: UsbSerialDriver = usbDefaultProber.probeDevice(device)\r\n                //ToastUtils.showShort(driver::class.java.simpleName.replace(\"SerialDriver\", \"\"))\r\n                mDeviceAdapter.setList(null)\r\n                for (port in driver.ports.indices) {\r\n                    bleDevice = BleDevice(driver)\r\n                    mDeviceAdapter.addData(bleDevice)\r\n                }\r\n            }\r\n            if (bleDevice != null) {\r\n                openTTL(bleDevice, 0)\r\n            }\r\n            stopRefresh()\r\n            //listAdapter.notifyDataSetChanged()\r\n            //        handler.removeCallbacks(runnable)\r\n            //        handler.postDelayed(runnable, 2000)\r\n        }\r\n    }\r\n\r\n    private fun registerBroadcast() {\r\n        val filter = IntentFilter()\r\n        filter.addAction(\"android.hardware.usb.action.USB_STATE\")\r\n        registerReceiver(broadcastReceiver, filter)\r\n    }\r\n\r\n    private fun initView() {\r\n        val jsonString = MMKV.defaultMMKV().decodeString(BaseConstant.MMKV_WM_CONFIGURATION)\r\n        val configBean = GsonUtils.fromJson(jsonString, ConfigBean::class.java)\r\n        DataVolatile01.PR_HIGH_VALUE = configBean.prHigh()\r\n        DataVolatile01.PR_LOW_VALUE = configBean.prLow()\r\n        DataVolatile01.QY_HIGH_VALUE = configBean.tidalVolumeEnd\r\n        DataVolatile01.QY_LOW_VALUE = configBean.tidalVolume\r\n        DataVolatile01.PR_DEFAULT_TIMES = configBean.prCount\r\n        DataVolatile01.QY_DEFAULT_TIMES = configBean.qyCount\r\n\r\n        //查看是否有蓝牙权限\r\n        checkPermissions()\r\n        viewBinding.bottom.ivBack.setOnClickListener { finish() }\r\n        viewBinding.bottom.tvContinue.setOnClickListener {\r\n            startActivity(Intent(this, ConfigActivity::class.java))\r\n        }\r\n\r\n        viewBinding.recyclerview.layoutManager = LinearLayoutManager(this)\r\n        // 是否抵用滚动事件监听\r\n        //layoutManager.setChangeSelectInScrolling(false)\r\n        viewBinding.recyclerview.adapter = bluetoothAdapter\r\n\r\n        viewBinding.bottom.ivStart.setOnClickListener {\r\n            val intent = Intent(this, TrainingSingleActivity::class.java)\r\n            connectList.clear()\r\n            connectList.addAll(bleList)\r\n            intent.putParcelableArrayListExtra(BaseConstant.CONNECT_BLE_DEVICES, connectList)\r\n            startActivity(intent)\r\n        }\r\n\r\n        viewBinding.progressCircular.setOnClickListener {\r\n            searchBle()\r\n        }\r\n        viewBinding.recyclerview.adapter = mDeviceAdapter\r\n        mDeviceAdapter.setOnItemClickListener(itemClick)\r\n\r\n        viewBinding.cbUsb.setOnCheckedChangeListener { buttonView, isChecked ->\r\n            if (isChecked) {\r\n                mDeviceAdapter.setList(null)\r\n                unBindBluetooth()\r\n                viewBinding.cbBle.isChecked = !isChecked\r\n                viewBinding.cbUsb.isChecked = isChecked\r\n                refresh()\r\n            }\r\n        }\r\n\r\n        viewBinding.cbBle.setOnCheckedChangeListener { buttonView, isChecked ->\r\n            if (isChecked) {\r\n                mDeviceAdapter.setList(null)\r\n                BaseApplication.driver?.CloseDevice()\r\n                searchBle()\r\n                viewBinding.cbUsb.isChecked = !isChecked\r\n                viewBinding.cbBle.isChecked = isChecked\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun searchBle() {\r\n        val bluetoothAdapter = BluetoothAdapter.getDefaultAdapter()\r\n        if (!bluetoothAdapter.isEnabled) {\r\n            Toast.makeText(this, getString(R.string.please_open_blue), Toast.LENGTH_LONG)\r\n                .show()\r\n        } else {\r\n            mDeviceAdapter.setList(null)\r\n            if (!isRefresh) {\r\n                viewBinding.tvMsg.visibility = View.INVISIBLE\r\n                startRefresh()\r\n                checkPermissions()\r\n                isRefresh = true\r\n            } else {\r\n                isRefresh = false\r\n                stopRefresh()\r\n                //取消扫描蓝牙设备\r\n                BleManager.getInstance().cancelScan()\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    @Subscribe(sticky = true, threadMode = ThreadMode.MAIN)\r\n    public fun onEvent(event: MessageEventData) {\r\n        when (event.code) {\r\n            BaseConstant.EVENT_CPR_START -> {\r\n                isInitValueMap.clear()\r\n                bindBluetooth()\r\n                isStart = true\r\n            }\r\n            BaseConstant.EVENT_CPR_STOP -> {\r\n                isStart = false\r\n                unBindBluetooth()\r\n                //清空当前map数据\r\n                dataMap.values.forEach { item ->\r\n                    item.dataClear()\r\n                }\r\n            }\r\n            BaseConstant.EVENT_CPR_CLEAR -> {\r\n                //清空当前map数据\r\n                dataMap.values.forEach { item ->\r\n                    item.dataClear()\r\n                }\r\n            }\r\n            BaseConstant.EVENT_CPR_CHECK -> {\r\n                Log.e(\"CPRActivity\", \"${event.isCheck}\")\r\n                DataVolatile01.setModel(event.isCheck)\r\n            }\r\n            BaseConstant.CLEAR_DEVICE_HISTORY_DATA -> {\r\n                deviceCount = 0\r\n                unBindBluetooth()\r\n                Log.e(\"hunger_test_clear\", \" recieve message\" )\r\n                //清空当前map数据\r\n                dataMap.values.forEach { item ->\r\n                    item.dataClear()\r\n                }\r\n                dataMap.clear()\r\n                isInitValueMap.clear()\r\n                Log.e(\"hunger_test_clear\", \" clear done\" )\r\n\r\n            }\r\n            BaseConstant.EVENT_DO_BIND -> {\r\n                isInitValueMap.clear()\r\n                bindBluetooth()\r\n            }\r\n            BaseConstant.EVENT_DO_START -> {\r\n                isStart = true\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun bindBluetooth() {\r\n        bleList.forEach {\r\n            bind(it)\r\n        }\r\n    }\r\n\r\n    private fun unBindBluetooth() {\r\n        bleList.forEach {\r\n            unBind(it)\r\n        }\r\n    }\r\n\r\n    private val itemClick =\r\n        OnItemClickListener { adapter, view, position ->\r\n            if (isItemClickable) {\r\n                viewBinding.tvMsg.visibility = View.INVISIBLE\r\n                val bleDevice = mDeviceAdapter.getItem(position)\r\n                if (bleDevice.getmUsbSerialDriver() != null) {\r\n                    openTTL(bleDevice, position)\r\n                } else {\r\n                    if (!BleManager.getInstance().isConnected(bleDevice)) {\r\n                        if (count >= 6) {//处理提示语设备连接过多提示\r\n                            viewBinding.tvMsg.text = \"当前版本最多同时支持6台模型\"\r\n                            hintHandler.postDelayed(this::setTextNull, 2000)\r\n                        }\r\n                        BleManager.getInstance().cancelScan()\r\n                        connect(bleDevice, position)\r\n                    } else {\r\n                        BleManager.getInstance().disconnect(bleDevice)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    private val hintHandler = object : Handler(Looper.getMainLooper()) {\r\n        override fun handleMessage(msg: Message) {\r\n            super.handleMessage(msg)\r\n        }\r\n    }\r\n\r\n    private fun setTextNull() {\r\n        viewBinding.tvMsg.text = \"\"\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        refresh()\r\n//        showConnectedDevice()\r\n//        startRefresh()\r\n//        checkPermissions()\r\n    }\r\n\r\n    private fun initBluetooth() {\r\n        BleManager.getInstance().init(application)\r\n        BleManager.getInstance()\r\n            .enableLog(true)\r\n            .setReConnectCount(1, 5000)\r\n            .setConnectOverTime(5000)\r\n            .operateTimeout = 5000\r\n    }\r\n\r\n    private val REQUEST_CODE_OPEN_GPS = 1\r\n    private val REQUEST_CODE_PERMISSION_LOCATION = 2\r\n    private fun checkPermissions() {\r\n        val bluetoothAdapter = BluetoothAdapter.getDefaultAdapter()\r\n        if (bluetoothAdapter != null && !bluetoothAdapter.isEnabled) {\r\n            Toast.makeText(this, getString(R.string.please_open_blue), Toast.LENGTH_LONG).show()\r\n            return\r\n        }\r\n        val permissions = arrayOf(Manifest.permission.ACCESS_FINE_LOCATION)\r\n        val permissionDeniedList: MutableList<String> = ArrayList()\r\n        for (permission in permissions) {\r\n            val permissionCheck = ContextCompat.checkSelfPermission(this, permission)\r\n            if (permissionCheck == PackageManager.PERMISSION_GRANTED) {\r\n                onPermissionGranted(permission)\r\n            } else {\r\n                permissionDeniedList.add(permission)\r\n            }\r\n        }\r\n        if (permissionDeniedList.isNotEmpty()) {\r\n            val deniedPermissions = permissionDeniedList.toTypedArray()\r\n            ActivityCompat.requestPermissions(\r\n                this,\r\n                deniedPermissions,\r\n                REQUEST_CODE_PERMISSION_LOCATION\r\n            )\r\n        }\r\n    }\r\n\r\n    private val bluetoothAdapter = object :\r\n        BaseQuickAdapter<BleDevice, BaseViewHolder>(R.layout.item_bluetooth) {\r\n        override fun convert(holder: BaseViewHolder, item: BleDevice) {\r\n            val bind = ItemBluetoothBinding.bind(holder.itemView)\r\n            bind.tvBluetoothName.text = item.name\r\n            bind.tvBluetoothStatus.text = \"未连接\"\r\n        }\r\n    }\r\n\r\n    private fun onPermissionGranted(permission: String) {\r\n        when (permission) {\r\n            Manifest.permission.ACCESS_FINE_LOCATION -> if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && !checkGPSIsOpen()) {\r\n                AlertDialog.Builder(this)\r\n                    .setTitle(R.string.notifyTitle)\r\n                    .setMessage(R.string.gpsNotifyMsg)\r\n                    .setNegativeButton(\r\n                        R.string.cancel\r\n                    ) { dialog, which -> finish() }\r\n                    .setPositiveButton(\r\n                        R.string.setting\r\n                    ) { dialog, which ->\r\n                        val intent = Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS)\r\n                        startActivityForResult(intent, REQUEST_CODE_OPEN_GPS)\r\n                    }\r\n                    .setCancelable(false)\r\n                    .show()\r\n            } else {\r\n                initBle()\r\n                startScan()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun showConnectedDevice() {\r\n        val deviceList = BleManager.getInstance().allConnectedDevice\r\n        bleList = deviceList\r\n        if (bleList.size > 0) {\r\n            viewBinding.tvMsg.text = \"\"\r\n        }\r\n        mDeviceAdapter.setList(deviceList)\r\n    }\r\n\r\n    private var isItemClickable = true\r\n    private var count = 0\r\n    private fun connect(bleDevice: BleDevice, position: Int) {\r\n        BleManager.getInstance()\r\n            .setConnectOverTime(5000)\r\n            .setOperateTimeout(5000)\r\n            .connect(bleDevice, object : BleGattCallback() {\r\n                override fun onStartConnect() {\r\n                    isItemClickable = false\r\n                    bleDevice.isLoading = true\r\n                    mDeviceAdapter.remove(bleDevice)\r\n                    mDeviceAdapter.addData(position, bleDevice)\r\n                }\r\n\r\n                override fun onConnectFail(bleDevice: BleDevice, exception: BleException) {\r\n                    bleDevice.isLoading = false\r\n                    bleDevice.isConnected = false\r\n                    mDeviceAdapter.remove(bleDevice)\r\n                    mDeviceAdapter.addData(position, bleDevice)\r\n                    isItemClickable = true\r\n                    if (exception.code == BleException.ERROR_CODE_TIMEOUT) {\r\n                        viewBinding.tvMsg.text = \"连接超时，请重新连接\"\r\n                    } else {\r\n                        viewBinding.tvMsg.text = \"连接失败，请重新连接\"\r\n                    }\r\n                }\r\n\r\n                override fun onConnectSuccess(\r\n                    bleDevice: BleDevice,\r\n                    gatt: BluetoothGatt,\r\n                    status: Int\r\n                ) {\r\n                    count++\r\n                    //处理已连接的设备靠前\r\n                    mDeviceAdapter.remove(bleDevice)\r\n                    bleDevice.isConnected = true\r\n                    bleDevice.isLoading = false\r\n                    bleDevice.count = count\r\n                    if (mDeviceAdapter.data.size == 0) {\r\n                        mDeviceAdapter.addData(bleDevice)\r\n                    } else {\r\n                        mDeviceAdapter.addData(count - 1, bleDevice)\r\n                    }\r\n//                viewBinding.textView.text = \"$count\"\r\n                    bleList.add(bleDevice)\r\n                    viewBinding.tvConnections.text = \"设备连接数：${count}\"\r\n                    //bind(bleDevice)\r\n                    isItemClickable = true\r\n                    isRefreshPower = true\r\n                }\r\n\r\n                override fun onDisConnected(\r\n                    isActiveDisConnected: Boolean,\r\n                    bleDevice: BleDevice,\r\n                    gatt: BluetoothGatt,\r\n                    status: Int\r\n                ) {\r\n                    count--\r\n                    bleList.remove(bleDevice)\r\n                    if (isActiveDisConnected) {\r\n                        ToastUtils.showLong(bleDevice.name + getString(R.string.active_disconnected))\r\n                    } else {\r\n                        ToastUtils.showLong(bleDevice.name + getString(R.string.disconnected))\r\n                        ObserverManager.getInstance().notifyObserver(bleDevice)\r\n                    }\r\n                    EventBus.getDefault()\r\n                        .post(\r\n                            MessageEventData(\r\n                                BaseConstant.DEVICE_DISCONNECTED,\r\n                                bleDevice.mac,\r\n                                null\r\n                            )\r\n                        )\r\n                    viewBinding.tvConnections.text = \"设备连接数：${count}\"\r\n\r\n                    //断开蓝牙连接\r\n                    if (BleManager.getInstance().isConnected(bleDevice)) {\r\n                        BleManager.getInstance().disconnect(bleDevice)\r\n                    }\r\n                    if (count == 0) {\r\n                        EventBus.getDefault()\r\n                            .post(\r\n                                MessageEventData(\r\n                                    BaseConstant.EVENT_CPR_DISCONNENT,\r\n                                    \"\",\r\n                                    null\r\n                                )\r\n                            )\r\n                    }\r\n\r\n//                unBind(bleDevice)\r\n                    val newList = mutableListOf<BleDevice>()\r\n                    for (item in mDeviceAdapter.data) {\r\n                        if (item.count > bleDevice.count) {\r\n                            item.count--\r\n                        }\r\n                        newList.add(item)\r\n                    }\r\n                    mDeviceAdapter.remove(bleDevice)\r\n                    newList.remove(bleDevice)\r\n                    bleDevice.isConnected = false\r\n                    bleDevice.isLoading = false\r\n                    bleDevice.count = 0\r\n                    newList.add(bleDevice)\r\n                    mDeviceAdapter.setList(newList)\r\n                    isItemClickable = true\r\n                }\r\n            })\r\n    }\r\n\r\n    private fun initBle() {\r\n        val uuids: Array<String>?\r\n//        val str_uuid: String = et_uuid.getText().toString()\r\n        val str_uuid: String = \"\"\r\n        uuids = if (TextUtils.isEmpty(str_uuid)) {\r\n            null\r\n        } else {\r\n            str_uuid.split(\",\").toTypedArray()\r\n        }\r\n        var serviceUuids: Array<UUID?>? = null\r\n        if (uuids != null && uuids.isNotEmpty()) {\r\n            serviceUuids = arrayOfNulls(uuids.size)\r\n            for (i in uuids.indices) {\r\n                val name = uuids[i]\r\n                val components = name.split(\"-\").toTypedArray()\r\n                if (components.size != 5) {\r\n                    serviceUuids[i] = null\r\n                } else {\r\n                    serviceUuids[i] = UUID.fromString(uuids[i])\r\n                }\r\n            }\r\n        }\r\n\r\n        val names = arrayOf(\"WMFS\", \"D87A\")\r\n        val mac: String = \"\"\r\n        val isAutoConnect: Boolean = false\r\n        val scanRuleConfig = BleScanRuleConfig.Builder()\r\n            .setServiceUuids(serviceUuids) // 只扫描指定的服务的设备，可选\r\n            .setDeviceName(true, *names) // 只扫描指定广播名的设备，可选\r\n            .setDeviceMac(mac) // 只扫描指定mac的设备，可选\r\n            .setAutoConnect(isAutoConnect) // 连接时的autoConnect参数，可选，默认false\r\n            .setScanTimeOut(5000) // 扫描超时时间，可选，默认10秒\r\n            .build()\r\n        BleManager.getInstance().initScanRule(scanRuleConfig)\r\n    }\r\n\r\n    private fun startScan() {\r\n//        viewBinding.tvModelNum.visibility = View.INVISIBLE\r\n        BleManager.getInstance().scan(object : BleScanCallback() {\r\n            override fun onScanStarted(success: Boolean) {\r\n                //已连接的蓝牙添加进来\r\n                val deviceList = BleManager.getInstance().allConnectedDevice\r\n                mDeviceAdapter.data.clear()\r\n                mDeviceAdapter.setList(deviceList)\r\n            }\r\n\r\n            override fun onLeScan(bleDevice: BleDevice) {\r\n                super.onLeScan(bleDevice)\r\n            }\r\n\r\n            override fun onScanning(bleDevice: BleDevice) {\r\n                //处理重复蓝牙问题\r\n                if (mDeviceAdapter.data.isNotEmpty()) {\r\n                    mDeviceAdapter.data.forEach { item ->\r\n                        if (bleDevice.mac == item.mac) {\r\n                            mDeviceAdapter.remove(item)\r\n                        }\r\n                    }\r\n                }\r\n                mDeviceAdapter.addData(bleDevice)\r\n                mDeviceAdapter.notifyDataSetChanged()\r\n            }\r\n\r\n            override fun onScanFinished(scanResultList: List<BleDevice>) {\r\n                mDeviceAdapter.data.let {\r\n                    if (it.size == 0) {\r\n                        viewBinding.tvMsg.visibility = View.VISIBLE\r\n                    }\r\n                }\r\n                stopRefresh()\r\n                isRefresh = false\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<String?>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n        when (requestCode) {\r\n            REQUEST_CODE_PERMISSION_LOCATION -> if (grantResults.size > 0) {\r\n                var i = 0\r\n                while (i < grantResults.size) {\r\n                    if (grantResults[i] == PackageManager.PERMISSION_GRANTED) {\r\n                        permissions[i]?.let { onPermissionGranted(it) }\r\n                    }\r\n                    i++\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun checkGPSIsOpen(): Boolean {\r\n        val locationManager = this.getSystemService(LOCATION_SERVICE) as LocationManager\r\n            ?: return false\r\n        return locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)\r\n    }\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        if (requestCode == REQUEST_CODE_OPEN_GPS) {\r\n            if (checkGPSIsOpen()) {\r\n//                initBle()\r\n                startScan()\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 开始刷新动画\r\n     */\r\n    private fun startRefresh() {\r\n        viewBinding.tvDesc.setText(R.string.searching_for_available_models)\r\n        viewBinding.progressCircular.indeterminateDrawable =\r\n            resources.getDrawable(R.drawable.progressbar_circle)\r\n        viewBinding.progressCircular.progressDrawable =\r\n            resources.getDrawable(R.drawable.progressbar_circle)\r\n    }\r\n\r\n    /**\r\n     * 停止刷新动画\r\n     */\r\n    private fun stopRefresh() {\r\n        viewBinding.tvDesc.setText(R.string.available_models)\r\n        viewBinding.progressCircular.indeterminateDrawable =\r\n            resources.getDrawable(R.drawable.icon_wm_refresh)\r\n        viewBinding.progressCircular.progressDrawable =\r\n            resources.getDrawable(R.drawable.icon_wm_refresh)\r\n    }\r\n\r\n    private fun unBind(bleDevice: BleDevice) {\r\n        val gatt = BleManager.getInstance().getBluetoothGatt(bleDevice)\r\n        //蓝牙服务列表\r\n        val services = gatt.services\r\n        val bluetoothGattService = services[2]\r\n        val characteristic = bluetoothGattService.characteristics[1]\r\n        BleManager.getInstance().stopNotify(\r\n            bleDevice,\r\n            characteristic.service.uuid.toString(),\r\n            characteristic.uuid.toString()\r\n        )\r\n    }\r\n\r\n    private val dataMap = mutableMapOf<String, DataVolatile01>()\r\n    private var dataDTO = BaseDataDTO()\r\n    var deviceCount = 0\r\n    private fun bind(bleDevice: BleDevice?) {\r\n        val gatt = BleManager.getInstance().getBluetoothGatt(bleDevice)\r\n        //蓝牙服务列表\r\n        val services = gatt.services\r\n        val bluetoothGattService = services[2]\r\n        val characteristic = bluetoothGattService.characteristics[1]\r\n        BleManager.getInstance().notify(\r\n            bleDevice,\r\n            characteristic.service.uuid.toString(),\r\n            characteristic.uuid.toString(),\r\n            object : BleNotifyCallback() {\r\n                override fun onNotifySuccess() {\r\n                    deviceCount ++\r\n                    if (deviceCount == bleList.size) {\r\n                        EventBus.getDefault().post(MessageEventData(BaseConstant.EVENT_CANCEL_DIALOG, \"\", null))\r\n                    }\r\n                    runOnUiThread(Runnable {\r\n                        Log.i(\"CPRActivity\", \"notify success\")\r\n                    })\r\n                }\r\n\r\n                override fun onNotifyFailure(exception: BleException) {\r\n                    runOnUiThread(Runnable {\r\n                        Log.i(\"CPRActivity\", exception.toString())\r\n                    })\r\n                }\r\n\r\n                override fun onCharacteristicChanged(data: ByteArray) {\r\n                    if (!BaseApplication.driver?.isConnected!! && characteristic != null) {\r\n                        val formatHexString = HexUtil.formatHexString(\r\n                            characteristic.value,\r\n                            false\r\n                        )\r\n                        runOnUiThread { Log.e(\"CPRActivity\", formatHexString) }\r\n                        Log.e(\"TAG9\", \"原始数据${formatHexString}\")\r\n                        sendMessage(formatHexString)\r\n                    }\r\n                }\r\n            })\r\n    }\r\n\r\n    private var isRefreshPower: Boolean = false\r\n    private var isStart = false\r\n    private fun sendMessage(formatHexString: String) {\r\n        if (!isStart || TextUtils.isEmpty(formatHexString) || formatHexString.length < 36) {\r\n            return\r\n        }\r\n        Log.e(\"TAG\", \"原始数据${formatHexString}\")\r\n        val deviceMAC =\r\n            \"001b${formatHexString.substring(24, 28) + formatHexString.substring(32, 36)}\"\r\n        val dataVolatile = dataMap[deviceMAC]\r\n        if (dataVolatile != null) {\r\n            dataDTO = dataVolatile.parseString(formatHexString)\r\n        } else {\r\n            val mDataVolatile = DataVolatile01()\r\n            mDataVolatile.initPreDistance(formatHexString, deviceMAC)\r\n            dataDTO = mDataVolatile.parseString(formatHexString)\r\n            dataMap[dataDTO.mac] = mDataVolatile\r\n        }\r\n        if (isRefreshPower) {\r\n            isRefreshPower = false\r\n            mDeviceAdapter.data.forEach { item ->\r\n                if (item.mac == dataDTO.mac) {\r\n                    item.power = dataDTO.electricity\r\n                    mDeviceAdapter.notifyItemChanged(mDeviceAdapter.getItemPosition(item), item)\r\n                }\r\n            }\r\n            powerHandler.removeCallbacks(powerRunning)\r\n            powerHandler.postDelayed(powerRunning, 10000)\r\n        }\r\n        StatusLiveData.data.postValue(dataDTO)\r\n    }\r\n\r\n    private val powerHandler = Handler(Looper.getMainLooper())\r\n    private val powerRunning = Runnable {\r\n        mDeviceAdapter.data.forEach { item ->\r\n            if (item.mac == dataDTO.mac) {\r\n                item.power = dataDTO.electricity\r\n                mDeviceAdapter.notifyItemChanged(mDeviceAdapter.getItemPosition(item), item)\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        EventBus.getDefault().unregister(this)\r\n        BleManager.getInstance().disconnectAllDevice()\r\n        BleManager.getInstance().destroy()\r\n    }\r\n\r\n    private fun initTTL() {\r\n        if (BaseApplication.driver!!.isConnected) {\r\n            val retval: Int? = BaseApplication.driver?.ResumeUsbPermission()\r\n            if (retval == 0) {\r\n                if (BaseApplication.driver!!.SetConfig(\r\n                        115200, 8, 1, 0, 0\r\n                    )//配置串口波特率，函数说明可参照编程手册\r\n                ) {\r\n                    ToastUtils.showShort(\"串口设置成功!\")\r\n                } else {\r\n                    ToastUtils.showShort(\"串口设置失败!\")\r\n                }\r\n            } else if (retval == -2) {\r\n                ToastUtils.showShort(\"获取权限失败!\")\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun ttl() {\r\n        if (!BaseApplication.driver?.UsbFeatureSupported()!!) // 判断系统是否支持USB HOST\r\n        {\r\n            val dialog: androidx.appcompat.app.AlertDialog =\r\n                androidx.appcompat.app.AlertDialog.Builder(this)\r\n                    .setTitle(\"提示\")\r\n                    .setMessage(\"您的手机不支持USB HOST，请更换其他手机再试！\")\r\n                    .setPositiveButton(\r\n                        \"确认\"\r\n                    ) { arg0, arg1 ->\r\n                        {\r\n                            //exitProcess(0)\r\n                        }\r\n                    }.create()\r\n            dialog.setCanceledOnTouchOutside(false)\r\n            dialog.show()\r\n        }\r\n    }\r\n\r\n    private fun openTTL(bleDevice: BleDevice, position: Int) {\r\n        if (!BaseApplication.driver?.isConnected!!) {\r\n            when (BaseApplication.driver?.ResumeUsbList()) {\r\n                -1 -> { // ResumeUsbList方法用于枚举CH34X设备以及打开相关设备\r\n                    ToastUtils.showShort(\"打开设备失败!\")\r\n                    BaseApplication.driver?.CloseDevice()\r\n                }\r\n                0 -> {\r\n                    if (!BaseApplication.driver?.UartInit()!!) { //对串口设备进行初始化操作\r\n                        ToastUtils.showShort(\"设备初始化失败!\")\r\n                        return\r\n                    }\r\n                    ToastUtils.showShort(\"打开设备成功!\")\r\n                    bleDevice.isConnected = true\r\n                    bleDevice.isLoading = false\r\n                    mDeviceAdapter.notifyItemChanged(position, bleDevice)\r\n                    mDeviceAdapter.notifyDataSetChanged()\r\n                    initTTL()\r\n                    ReadThread().start() //开启读线程读取串口接收的数据\r\n                }\r\n                else -> {\r\n                    Toast.makeText(this, \"USB未授权限!\", Toast.LENGTH_SHORT).show()\r\n//                    val builder = androidx.appcompat.app.AlertDialog.Builder(this)\r\n//                    builder.setIcon(R.mipmap.icon_wm_logo)\r\n//                    builder.setTitle(\"未授权限\")\r\n//                    builder.setMessage(\"确认退出吗？\")\r\n//                    builder.setPositiveButton(\r\n//                        \"确定\"\r\n//                    ) { dialog, which ->\r\n//                        //System.exit(0)\r\n//                        dialog.dismiss()\r\n//                    }\r\n//                    builder.setNegativeButton(\r\n//                        \"返回\"\r\n//                    ) { dialog, which ->\r\n//                        dialog.dismiss()\r\n//                    }\r\n//                    builder.show()\r\n                }\r\n            }\r\n        } else {\r\n            //关闭USB TTL\r\n            Toast.makeText(this, \"关闭USB串口!\", Toast.LENGTH_SHORT).show()\r\n            try {\r\n                ToastUtils.showShort(\"打开设备成功!\")\r\n                bleDevice.isConnected = false\r\n                bleDevice.isLoading = false\r\n                mDeviceAdapter.notifyItemChanged(position, bleDevice)\r\n                mDeviceAdapter.notifyDataSetChanged()\r\n                Thread.sleep(200)\r\n            } catch (e: InterruptedException) {\r\n                e.printStackTrace()\r\n            }\r\n            BaseApplication.driver?.CloseDevice()\r\n//            totalrecv = 0\r\n        }\r\n    }\r\n\r\n    inner class ReadThread : Thread() {\r\n        override fun run() {\r\n            val buffer = ByteArray(64)\r\n            while (true) {\r\n                val msg = Message.obtain()\r\n                if (!BaseApplication.driver?.isConnected!!) {\r\n                    break\r\n                }\r\n                val length: Int = BaseApplication.driver!!.ReadData(buffer, 64)\r\n                if (length > 0) {\r\n                    runOnUiThread {\r\n                        val formatHexString = ConvertUtil.toHexString(buffer, length)\r\n                        Log.i(\"CPRActivity\", \"data -- ${formatHexString.trim()}\")\r\n                        sendMessage(formatHexString.trim())\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun finish() {\r\n        super.finish()\r\n        BleManager.getInstance().disconnectAllDevice()\r\n        BleManager.getInstance().destroy()\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/pr/perfectrecovery/activity/CPRActivity.kt b/app/src/main/java/com/pr/perfectrecovery/activity/CPRActivity.kt
--- a/app/src/main/java/com/pr/perfectrecovery/activity/CPRActivity.kt	(revision 73c37f7c7fafab7f5db8d06f691e1c7686ae95e2)
+++ b/app/src/main/java/com/pr/perfectrecovery/activity/CPRActivity.kt	(date 1650980848303)
@@ -50,7 +50,7 @@
 import com.pr.perfectrecovery.databinding.ItemBluetoothBinding
 import com.pr.perfectrecovery.livedata.StatusLiveData
 import com.pr.perfectrecovery.utils.ConvertUtil
-import com.pr.perfectrecovery.utils.DataVolatile01
+import com.pr.perfectrecovery.utils.DataVolatile
 import com.tencent.mmkv.MMKV
 import org.greenrobot.eventbus.EventBus
 import org.greenrobot.eventbus.Subscribe
@@ -148,12 +148,12 @@
     private fun initView() {
         val jsonString = MMKV.defaultMMKV().decodeString(BaseConstant.MMKV_WM_CONFIGURATION)
         val configBean = GsonUtils.fromJson(jsonString, ConfigBean::class.java)
-        DataVolatile01.PR_HIGH_VALUE = configBean.prHigh()
-        DataVolatile01.PR_LOW_VALUE = configBean.prLow()
-        DataVolatile01.QY_HIGH_VALUE = configBean.tidalVolumeEnd
-        DataVolatile01.QY_LOW_VALUE = configBean.tidalVolume
-        DataVolatile01.PR_DEFAULT_TIMES = configBean.prCount
-        DataVolatile01.QY_DEFAULT_TIMES = configBean.qyCount
+        DataVolatile.PR_HIGH_VALUE = configBean.prHigh()
+        DataVolatile.PR_LOW_VALUE = configBean.prLow()
+        DataVolatile.QY_HIGH_VALUE = configBean.tidalVolumeEnd
+        DataVolatile.QY_LOW_VALUE = configBean.tidalVolume
+        DataVolatile.PR_DEFAULT_TIMES = configBean.prCount
+        DataVolatile.QY_DEFAULT_TIMES = configBean.qyCount
 
         //查看是否有蓝牙权限
         checkPermissions()
@@ -248,7 +248,7 @@
             }
             BaseConstant.EVENT_CPR_CHECK -> {
                 Log.e("CPRActivity", "${event.isCheck}")
-                DataVolatile01.setModel(event.isCheck)
+                DataVolatile.setModel(event.isCheck)
             }
             BaseConstant.CLEAR_DEVICE_HISTORY_DATA -> {
                 deviceCount = 0
@@ -659,7 +659,7 @@
         )
     }
 
-    private val dataMap = mutableMapOf<String, DataVolatile01>()
+    private val dataMap = mutableMapOf<String, DataVolatile>()
     private var dataDTO = BaseDataDTO()
     var deviceCount = 0
     private fun bind(bleDevice: BleDevice?) {
@@ -716,7 +716,7 @@
         if (dataVolatile != null) {
             dataDTO = dataVolatile.parseString(formatHexString)
         } else {
-            val mDataVolatile = DataVolatile01()
+            val mDataVolatile = DataVolatile()
             mDataVolatile.initPreDistance(formatHexString, deviceMAC)
             dataDTO = mDataVolatile.parseString(formatHexString)
             dataMap[dataDTO.mac] = mDataVolatile
Index: FastBleLib/build/.transforms/6463f6ab5363c37b2dfa23e13d53b7e3/results.bin
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FastBleLib/build/.transforms/6463f6ab5363c37b2dfa23e13d53b7e3/results.bin b/FastBleLib/build/.transforms/6463f6ab5363c37b2dfa23e13d53b7e3/results.bin
new file mode 100644
--- /dev/null	(date 1651075092314)
+++ b/FastBleLib/build/.transforms/6463f6ab5363c37b2dfa23e13d53b7e3/results.bin	(date 1651075092314)
@@ -0,0 +1,1 @@
+o/classes
Index: usbSerialForAndroid/build/.transforms/8a0ba8f1f4ae5dc7aac4a5b96c0e25c2/results.bin
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/usbSerialForAndroid/build/.transforms/8a0ba8f1f4ae5dc7aac4a5b96c0e25c2/results.bin b/usbSerialForAndroid/build/.transforms/8a0ba8f1f4ae5dc7aac4a5b96c0e25c2/results.bin
new file mode 100644
--- /dev/null	(date 1651075092344)
+++ b/usbSerialForAndroid/build/.transforms/8a0ba8f1f4ae5dc7aac4a5b96c0e25c2/results.bin	(date 1651075092344)
@@ -0,0 +1,1 @@
+o/classes
Index: usbSerialForAndroid/build/.transforms/7765e782022301095568fa2f67a89b53/results.bin
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/usbSerialForAndroid/build/.transforms/7765e782022301095568fa2f67a89b53/results.bin b/usbSerialForAndroid/build/.transforms/7765e782022301095568fa2f67a89b53/results.bin
new file mode 100644
--- /dev/null	(date 1651073400584)
+++ b/usbSerialForAndroid/build/.transforms/7765e782022301095568fa2f67a89b53/results.bin	(date 1651073400584)
@@ -0,0 +1,1 @@
+o/debug
diff --git a/FastBleLib/build/intermediates/annotations_typedef_file/debug/typedefs.txt b/FastBleLib/build/intermediates/annotations_typedef_file/debug/typedefs.txt
deleted file mode 100644
