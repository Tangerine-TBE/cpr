Index: app/src/main/java/com/pr/perfectrecovery/utils/DataVolatile.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pr.perfectrecovery.utils\r\n\r\nimport android.util.Log\r\nimport com.pr.perfectrecovery.bean.BaseDataDTO\r\nimport com.pr.perfectrecovery.utils.TestVolatile.Err_PrTotal\r\nimport com.pr.perfectrecovery.utils.TestVolatile.top_flag\r\nimport kotlin.math.abs\r\n\r\nobject DataVolatile {\r\n    //电量值：  0-100%\r\n    var VI_Value = 0\r\n\r\n    //距离值：  30-150\r\n    var L_Value = 0\r\n\r\n    //气压值：  0-2000ml\r\n    var QY_Value = 0\r\n\r\n    //蓝牙连接状态：   0-断开 1-连接\r\n    var BLS_Value = 0\r\n\r\n    //USB连接状态: 0-断开 1-连接\r\n    var ULS_Value = 0\r\n\r\n    //通道打开状态 0-关闭 1-打开\r\n    var TOS_Value = 0\r\n\r\n    //连接方式  0-蓝牙 1-连接USB\r\n    var LKS_Value = 0\r\n\r\n    //按压位置正确  0-错误  1-正确\r\n    var PSR_Value = 0\r\n\r\n    //工作方式：00——休眠   01——工作    02——待机\r\n    var WS_Value = 0\r\n\r\n    //按压频率：0-200\r\n    var PF_Value = 0\r\n\r\n    //吹气频率：0-200\r\n    var CF_Value = 0\r\n\r\n    //按压次数\r\n    var PR_SUM = 0\r\n\r\n    //吹气次数\r\n    var QY_SUM = 0\r\n\r\n    //按压上升或下降标志位\r\n    var low_flag = 0\r\n\r\n    val dataDTO = BaseDataDTO()\r\n\r\n    var Qliang = 0\r\n\r\n    var L_valueSet = intArrayOf(1)\r\n    var QY_valueSet = mutableListOf<Int>()\r\n    var QY_valueSet2 = mutableListOf<Int>()\r\n    var pt_valueSet = mutableListOf<Int>()\r\n\r\n    /**\r\n     * array 数据列表\r\n     * isClear 清除数据集合\r\n     */\r\n    fun max(array: List<Int>, isClear: Boolean): Int {\r\n        var maximum = 0\r\n        for (i in array.indices) {\r\n            if (maximum < array[i]) {\r\n                maximum = array[i]\r\n            }\r\n        }\r\n        if (isClear) {\r\n            QY_valueSet.clear()\r\n        }\r\n        return maximum\r\n    }\r\n\r\n    /**\r\n     * 获取吹气值和\r\n     */\r\n    fun qyValue(array: List<Int>): Int {\r\n        var sum = 0\r\n        for (i in array.indices) {\r\n            sum += i\r\n        }\r\n        QY_valueSet2.clear()\r\n        return sum\r\n    }\r\n\r\n    @JvmStatic\r\n    fun main(args: Array<String>) {\r\n        val data = \"fe06040a0b01052d5303030405010723090ab261\" //1、先将接收到的数据转调用工具类的方法换成字符串\r\n        //System.out.print(DataFormatUtils.getCrc16(DataFormatUtils.hexStr2Bytes(data)));\r\n        parseString(data)\r\n    }\r\n\r\n    /**\r\n     * 解析蓝发送的数据\r\n     *\r\n     * @param data\r\n     */\r\n    fun parseString(data: String?): BaseDataDTO {\r\n        //System.out.print(DataFormatUtils.getCrc16(DataFormatUtils.hexStr2Bytes(data)));\r\n        if (data != null && data.length == 40) {\r\n            //模型状态需先判断\r\n            val state = DataFormatUtils.byteArrayToInt(\r\n                DataFormatUtils.hexStr2Bytes(\r\n                    \"00\" + data.substring(\r\n                        28,\r\n                        30\r\n                    )\r\n                )\r\n            )\r\n            if (state and 1 == 1) {\r\n                BLS_Value = 1\r\n            } else {\r\n                BLS_Value = 0\r\n            }\r\n            if (state and 2 == 2) {\r\n                ULS_Value = 1\r\n            } else {\r\n                ULS_Value = 0\r\n            }\r\n            if (state and 4 == 4) {\r\n                TOS_Value = 1\r\n            } else {\r\n                TOS_Value = 0\r\n            }\r\n            if (state and 8 == 8) {\r\n                LKS_Value = 1\r\n            } else {\r\n                LKS_Value = 0\r\n            }\r\n//            if (state and 16 == 16) {\r\n//                PSR_Value = 1\r\n//            } else {\r\n//                PSR_Value = 0\r\n//            }\r\n            if (state and 8 == 8) {\r\n                PSR_Value = 1\r\n            } else {\r\n                PSR_Value = 0\r\n            }\r\n            //按压距离\r\n            val L_d1 = DataFormatUtils.byteArrayToInt(\r\n                DataFormatUtils.hexStr2Bytes(\r\n                    \"00\" + data.substring(\r\n                        12,\r\n                        14\r\n                    )\r\n                )\r\n            )\r\n            val L_d2 = DataFormatUtils.byteArrayToInt(\r\n                DataFormatUtils.hexStr2Bytes(\r\n                    \"00\" + data.substring(\r\n                        14,\r\n                        16\r\n                    )\r\n                )\r\n            )\r\n            val L_d3 = DataFormatUtils.byteArrayToInt(\r\n                DataFormatUtils.hexStr2Bytes(\r\n                    \"00\" + data.substring(\r\n                        16,\r\n                        18\r\n                    )\r\n                )\r\n            )\r\n            //三次按压深度\r\n            dataDTO.L_D1 = L_d1\r\n            dataDTO.L_D2 = L_d2\r\n            dataDTO.L_D3 = L_d3\r\n            L_Value = selectValue_P(L_d1, L_d2, L_d3)\r\n            //清空频率\r\n            pt(L_Value)\r\n            //吹气数据\r\n            val QY_d1 = DataFormatUtils.byteArrayToInt(\r\n                DataFormatUtils.hexStr2Bytes(\r\n                    \"00\" + data.substring(\r\n                        18,\r\n                        20\r\n                    )\r\n                )\r\n            )\r\n            val QY_d2 = DataFormatUtils.byteArrayToInt(\r\n                DataFormatUtils.hexStr2Bytes(\r\n                    \"00\" + data.substring(\r\n                        20,\r\n                        22\r\n                    )\r\n                )\r\n            )\r\n            val QY_d3 = DataFormatUtils.byteArrayToInt(\r\n                DataFormatUtils.hexStr2Bytes(\r\n                    \"00\" + data.substring(\r\n                        22,\r\n                        24\r\n                    )\r\n                )\r\n            )\r\n\r\n            //不做气压值的算法处理\r\n            QY_Value = selectValue_QY(QY_d1, QY_d2, QY_d3)\r\n\r\n            //频率\r\n            //PF_Value=DataFormatUtils.byteArrayToInt( DataFormatUtils.hexStr2Bytes(\"00\" + data.substring(24, 26)));\r\n            // CF_Value=DataFormatUtils.byteArrayToInt( DataFormatUtils.hexStr2Bytes(\"00\" + data.substring(26, 28)));\r\n            VI_Value = DataFormatUtils.byteArrayToInt(\r\n                DataFormatUtils.hexStr2Bytes(\r\n                    \"00\" + data.substring(\r\n                        30,\r\n                        32\r\n                    )\r\n                )\r\n            )\r\n        }\r\n        val stringBuffer = StringBuffer()\r\n        stringBuffer.append(\"电量值：\").append(VI_Value)\r\n        stringBuffer.append(\"距离值：\").append(L_Value)\r\n        stringBuffer.append(\"气压值：\").append(QY_Value)\r\n        stringBuffer.append(\"蓝牙连接值：\").append(BLS_Value)\r\n        stringBuffer.append(\"USB连接值：\").append(ULS_Value)\r\n        stringBuffer.append(\"通道打开状态值：\").append(TOS_Value)\r\n        stringBuffer.append(\"连接方式值：\").append(LKS_Value)\r\n        stringBuffer.append(\"按压位置正确值：\").append(PSR_Value)\r\n        stringBuffer.append(\"工作方式值：\").append(WS_Value)\r\n        stringBuffer.append(\"按压频率值：\").append(PF_Value)\r\n        stringBuffer.append(\"吹气频率值：\").append(CF_Value)\r\n\r\n        dataDTO.prSum = PR_SUM\r\n        dataDTO.qySum = QY_SUM\r\n        dataDTO.electricity = VI_Value\r\n        dataDTO.distance = L_Value\r\n        dataDTO.bpValue = QY_Value\r\n        dataDTO.blsType = BLS_Value\r\n        dataDTO.usbConnectType = ULS_Value\r\n        dataDTO.aisleType = TOS_Value\r\n        dataDTO.connectType = LKS_Value\r\n        dataDTO.psrType = PSR_Value\r\n        dataDTO.workType = WS_Value\r\n        dataDTO.cf = CF_Value\r\n        dataDTO.pf = PF_Value\r\n        dataDTO.isStart = isStart\r\n        dataDTO.ERR_PR_HIGH = ERR_PR_HIGH\r\n        dataDTO.ERR_PR_LOW = ERR_PR_LOW\r\n        dataDTO.ERR_PR_POSI = ERR_PR_POSI\r\n        dataDTO.ERR_QY_CLOSE = ERR_QY_CLOSE\r\n        dataDTO.ERR_QY_DEAD = ERR_QY_DEAD\r\n        dataDTO.ERR_QY_HIGH = ERR_QY_HIGH\r\n        dataDTO.ERR_QY_LOW = ERR_QY_LOW\r\n        dataDTO.ERR_PR_UNBACK = ERR_PR_UNBACK\r\n        return dataDTO\r\n    }\r\n\r\n    var isStart = false\r\n    fun dataClear() {\r\n        isStart = false\r\n        //电量值：  0-100%\r\n        VI_Value = 0\r\n        //距离值：  30-150\r\n        L_Value = 0\r\n        //气压值：  0-2000ml\r\n        QY_Value = 0\r\n        //蓝牙连接状态：   0-断开 1-连接\r\n        BLS_Value = 0\r\n        //按压频率：0-200\r\n        PF_Value = 0\r\n        //吹气频率：0-200\r\n        CF_Value = 0\r\n        //按压次数\r\n        PR_SUM = 0\r\n        //吹气次数\r\n        QY_SUM = 0\r\n        ERR_PR_UNBACK = 0\r\n        ERR_PR_HIGH = 0\r\n        ERR_PR_LOW = 0\r\n        ERR_PR_POSI = 0\r\n        ERR_QY_CLOSE = 0\r\n        ERR_QY_DEAD = 0\r\n        ERR_QY_HIGH = 0\r\n        ERR_QY_LOW = 0\r\n    }\r\n\r\n    fun setCF_Value() {\r\n        CF_Value = 0\r\n    }\r\n\r\n    var preTimePress: Long = 0\r\n\r\n    /*\r\n* 获取初始位置，每次连接成功后调用一次初始化方法\r\n* */\r\n\r\n    var preDistance: Long = 180\r\n\r\n    fun initPreDistance(data: String?) {\r\n        // long value=180;\r\n        if (data != null && data.length == 40) {\r\n            //按压距离\r\n            val L_d1 = DataFormatUtils.byteArrayToInt(\r\n                DataFormatUtils.hexStr2Bytes(\r\n                    \"00\" + data.substring(\r\n                        12,\r\n                        14\r\n                    )\r\n                )\r\n            )\r\n            val L_d2 = DataFormatUtils.byteArrayToInt(\r\n                DataFormatUtils.hexStr2Bytes(\r\n                    \"00\" + data.substring(\r\n                        14,\r\n                        16\r\n                    )\r\n                )\r\n            )\r\n            val L_d3 = DataFormatUtils.byteArrayToInt(\r\n                DataFormatUtils.hexStr2Bytes(\r\n                    \"00\" + data.substring(\r\n                        16,\r\n                        18\r\n                    )\r\n                )\r\n            )\r\n            //preDistance = ((L_d1 + L_d2 + L_d3) / 3).toLong()\r\n            preDistance=L_d1.toLong();\r\n        }\r\n    }\r\n\r\n    var UNBACK_FLAG = 0\r\n    var ERR_FLAG=0;\r\n    var PR_DOTTIMSE_NUMBER=0;\r\n\r\n    /*\r\n    * 根据按压三次相邻的距离值找到有效值。\r\n    * */\r\n    fun selectValue_P(L_d1: Int, L_d2: Int, L_d3: Int): Int {\r\n        var value = 0\r\n       // var sumflag= PR_SUM;\r\n        PR_DOTTIMSE_NUMBER+=3\r\n        Log.e(\"TAG7\", \"$L_d1  $L_d2  $L_d3\")\r\n        if (abs(preDistance - L_d1) < 10 && abs(preDistance - L_d2) < 10 && abs(preDistance - L_d3) < 10\r\n        ) {\r\n            return preDistance.toInt()\r\n        }\r\n        // int low_flag=0;\r\n        if (L_d1 > L_d2) {\r\n            if (L_d2 >= L_d3) {\r\n                value = L_d3\r\n                low_flag = 0\r\n                if (UNBACK_FLAG == 1) {\r\n                    ERR_PR_UNBACK++\r\n                    UNBACK_FLAG=0\r\n                    Log.e(\"TAG7\", \"未回弹\")\r\n                    ERR_FLAG=1;\r\n                }\r\n            } else {\r\n                if (low_flag == 0) {//防止在上升到最高点出现抖动导致次数误增加\r\n                    low_flag = 1\r\n                    PR_SUM++\r\n                    //  Log.e(\"TAG5\", \"$PR_SUM\")\r\n                    if(ERR_FLAG == 0){\r\n                        Err_PrTotal(L_d2)\r\n                    }else{\r\n                        ERR_FLAG = 0;\r\n                    }\r\n                    PR_DOTTIMSE_NUMBER-=1\r\n                    if(PR_SUM > 1){\r\n                        PF_Value=(60000/(PR_DOTTIMSE_NUMBER*30)).toInt()\r\n                        PR_DOTTIMSE_NUMBER=0;\r\n                    }\r\n                   // Log.e(\"TAG4\", \"$L_d2\")\r\n                    /*val changTimePress = System.currentTimeMillis()\r\n                    if (PR_SUM > 1) {\r\n                        val time = changTimePress - preTimePress + 40\r\n                        Log.e(\"TAG6\", \"$L_d2\")\r\n                        PF_Value = (60000 / time).toInt()\r\n                        if (PF_Value > 130) {\r\n                            PF_Value = 130;\r\n                        } else if (PF_Value < 80) {\r\n                            PF_Value = 80;\r\n                        }\r\n                     //   Log.e(\"TAG6\", \"$PF_Value\")\r\n                    }\r\n                    preTimePress = changTimePress*/\r\n                }\r\n                value = L_d2\r\n            }\r\n        } else if (L_d2 < L_d3) {\r\n            if (low_flag == 0) {\r\n                low_flag = 1\r\n                PR_SUM++\r\n                // Log.e(\"TAG5\", \"$PR_SUM\")\r\n                if(ERR_FLAG == 0){\r\n                    Err_PrTotal(L_d1)\r\n                }else{\r\n                    ERR_FLAG = 0;\r\n                }\r\n                if(PR_SUM > 1){\r\n                    PF_Value=(60000/(PR_DOTTIMSE_NUMBER*30)).toInt()\r\n                    PR_DOTTIMSE_NUMBER=0;\r\n                }\r\n                // Log.e(\"TAG6\", \"$L_d1\")\r\n                /*val changTimePress = System.currentTimeMillis()\r\n                if (PR_SUM > 1) {\r\n                    val time = changTimePress - preTimePress + 70\r\n                    PF_Value = (60000 / time).toInt()\r\n                    if (PF_Value > 130) {\r\n                        PF_Value = 130;\r\n                    } else if (PF_Value < 80) {\r\n                        PF_Value = 80;\r\n                    }\r\n                    // Log.e(\"TAG6\", \"$PF_Value\")\r\n                }\r\n                preTimePress = changTimePress*/\r\n               value= L_d1\r\n            } else {\r\n                if (abs(preDistance - L_d3) < 15) {\r\n                    UNBACK_FLAG = 0\r\n                    Log.e(\"TAG7\", \"回到初始位置，复位未回弹$L_d3\")\r\n                } else {\r\n                    UNBACK_FLAG = 1\r\n                }\r\n                value = L_d3\r\n            }\r\n\r\n        } else {\r\n            if (abs(preDistance - L_d2) < 15) {\r\n                UNBACK_FLAG = 0\r\n                Log.e(\"TAG7\", \"回到初始位置，复位未回弹$L_d2\")\r\n            } else {\r\n                UNBACK_FLAG = 1\r\n            }\r\n            value = L_d2\r\n        }\r\n        // Log.e(\"TAG1\", \"$value\")\r\n        // validDistance=value;\r\n        return value\r\n    }\r\n\r\n    //按压错误-按压未回弹\r\n    var ERR_PR_UNBACK = 0\r\n\r\n    //按压错误-按压不足\r\n    var ERR_PR_LOW = 0\r\n\r\n    //按压错误-按压过大\r\n    var ERR_PR_HIGH = 0\r\n\r\n    //按压错误-按压位置错误\r\n    var ERR_PR_POSI = 0\r\n\r\n    /**\r\n     * 初始化按压区间值\r\n     */\r\n    var PR_LOW_VALUE = 45\r\n    var PR_HIGH_VALUE = 60\r\n\r\n    private fun Err_PrTotal(l: Int) {\r\n\r\n        if (PSR_Value == 0) {\r\n            ERR_PR_POSI++\r\n        } else {\r\n            var value = abs(preDistance - l)\r\n            if (value < PR_LOW_VALUE) {\r\n                ERR_PR_LOW++\r\n                //   Log.e(\"TAG1\", \"按压不足\")\r\n                //    Log.e(\"TAG1\", \"$value\")\r\n            } else if (value > PR_HIGH_VALUE) {\r\n                ERR_PR_HIGH++\r\n                //    Log.e(\"TAG2\", \"按压过深\")\r\n                //   Log.e(\"TAG2\", \"$value\")\r\n            }\r\n            // Log.e(\"TAG3\", \"$value\")\r\n        }\r\n    }\r\n\r\n    //吹气错误-气压不足\r\n    var ERR_QY_LOW = 0\r\n\r\n    //吹气错误-气压过大\r\n    var ERR_QY_HIGH = 0\r\n\r\n    //吹气错误-气压进胃\r\n    var ERR_QY_DEAD = 0\r\n\r\n    //吹气错误-气道未打开错误\r\n    var ERR_QY_CLOSE = 0\r\n\r\n    fun ERR_QyTotal(value: Int) {\r\n        if (TOS_Value == 0) {\r\n            ERR_QY_CLOSE++\r\n        } else {\r\n            if (value in 1..39) {\r\n                ERR_QY_LOW++\r\n            } else if (value in 81..120) {\r\n                ERR_QY_HIGH++\r\n            } else if (value > 120) {\r\n                ERR_QY_DEAD++\r\n            }\r\n        }\r\n    }\r\n\r\n    var preTimeQY: Long = 0\r\n\r\n    /*\r\n * 根据吹气三次相邻的气压值找到有效值。\r\n * */\r\n    fun selectValue_QY(QY_d1: Int, QY_d2: Int, QY_d3: Int): Int {\r\n        var value = 0\r\n        if (QY_d1 > 0 || QY_d2 > 0 || QY_d3 > 0) {\r\n            top_flag = 1\r\n            Qliang = (QY_d1 + QY_d2 + QY_d3) * 30\r\n        }\r\n        if (QY_d1 == 0 && QY_d2 == 0 && QY_d3 == 0) {\r\n            if (top_flag == 1) {\r\n                ERR_QyTotal(max(QY_valueSet, false))//每次筛选最大吹气值，去做错误次数的判断\r\n                val changTimePress = System.currentTimeMillis()\r\n                ++QY_SUM\r\n                top_flag = 0\r\n                Qliang = 0\r\n                if (QY_SUM > 1) {\r\n                    val time = changTimePress - preTimeQY\r\n                    CF_Value = (60000 / time).toInt()\r\n                }\r\n                preTimeQY = changTimePress\r\n            }\r\n        }\r\n        value = if (QY_d1 <= QY_d2) {\r\n            if (QY_d2 <= QY_d3) {\r\n                QY_d3\r\n            } else {\r\n                //  top_flag=1;\r\n                QY_d2\r\n            }\r\n        } else {\r\n            if (QY_d2 >= QY_d3) {\r\n                QY_d3\r\n            } else {\r\n                QY_d2\r\n            }\r\n        }\r\n        if (value > 0) {\r\n            QY_valueSet2.add(value)\r\n            QY_valueSet.add(value)\r\n        }\r\n        return value\r\n    }\r\n\r\n\r\n    //判断按压是否停止\r\n    private const val count = 20\r\n    private fun pt(p: Int): Boolean {\r\n        if (p > (preDistance - 5)) {\r\n            if (pt_valueSet.size == count) pt_valueSet.removeFirst()\r\n            pt_valueSet.add(p)\r\n            if (pt_valueSet.size == count) {\r\n                pt_valueSet.clear()\r\n                PF_Value = 0\r\n                return true\r\n            }\r\n        } else {\r\n            pt_valueSet.clear()\r\n        }\r\n        return false\r\n    }\r\n\r\n    fun getData(): BaseDataDTO? {\r\n        return dataDTO\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/pr/perfectrecovery/utils/DataVolatile.kt b/app/src/main/java/com/pr/perfectrecovery/utils/DataVolatile.kt
--- a/app/src/main/java/com/pr/perfectrecovery/utils/DataVolatile.kt	(revision e3c97864515262ad4892c256898a95eeae23a082)
+++ b/app/src/main/java/com/pr/perfectrecovery/utils/DataVolatile.kt	(date 1645948127264)
@@ -337,7 +337,7 @@
         var value = 0
        // var sumflag= PR_SUM;
         PR_DOTTIMSE_NUMBER+=3
-        Log.e("TAG7", "$L_d1  $L_d2  $L_d3")
+        Log.e("TAG8", "$L_d1  $L_d2  $L_d3")
         if (abs(preDistance - L_d1) < 10 && abs(preDistance - L_d2) < 10 && abs(preDistance - L_d3) < 10
         ) {
             return preDistance.toInt()
@@ -350,7 +350,7 @@
                 if (UNBACK_FLAG == 1) {
                     ERR_PR_UNBACK++
                     UNBACK_FLAG=0
-                    Log.e("TAG7", "未回弹")
+                  //  Log.e("TAG7", "未回弹")
                     ERR_FLAG=1;
                 }
             } else {
@@ -365,6 +365,7 @@
                     }
                     PR_DOTTIMSE_NUMBER-=1
                     if(PR_SUM > 1){
+
                         PF_Value=(60000/(PR_DOTTIMSE_NUMBER*30)).toInt()
                         PR_DOTTIMSE_NUMBER=0;
                     }
