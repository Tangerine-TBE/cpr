Index: app/src/main/java/com/pr/perfectrecovery/activity/CPRActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pr.perfectrecovery.activity\r\n\r\nimport android.Manifest\r\nimport android.app.AlertDialog\r\nimport android.bluetooth.BluetoothAdapter\r\nimport android.bluetooth.BluetoothGatt\r\nimport android.content.BroadcastReceiver\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.IntentFilter\r\nimport android.content.pm.PackageManager\r\nimport android.hardware.usb.UsbManager\r\nimport android.location.LocationManager\r\nimport android.os.*\r\nimport android.provider.Settings\r\nimport android.text.TextUtils\r\nimport android.util.Log\r\nimport android.view.Gravity\r\nimport android.view.View\r\nimport android.widget.Toast\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.blankj.utilcode.util.GsonUtils\r\nimport com.blankj.utilcode.util.ScreenUtils\r\nimport com.blankj.utilcode.util.ToastUtils\r\nimport com.chad.library.adapter.base.BaseQuickAdapter\r\nimport com.chad.library.adapter.base.listener.OnItemClickListener\r\nimport com.chad.library.adapter.base.viewholder.BaseViewHolder\r\nimport com.clj.fastble.BleManager\r\nimport com.clj.fastble.callback.BleGattCallback\r\nimport com.clj.fastble.callback.BleNotifyCallback\r\nimport com.clj.fastble.callback.BleScanCallback\r\nimport com.clj.fastble.callback.BleWriteCallback\r\nimport com.clj.fastble.data.BleDevice\r\nimport com.clj.fastble.exception.BleException\r\nimport com.clj.fastble.scan.BleScanRuleConfig\r\nimport com.clj.fastble.utils.HexUtil\r\nimport com.hoho.android.usbserial.driver.CdcAcmSerialDriver\r\nimport com.hoho.android.usbserial.driver.ProbeTable\r\nimport com.hoho.android.usbserial.driver.UsbSerialDriver\r\nimport com.hoho.android.usbserial.driver.UsbSerialProber\r\nimport com.pr.perfectrecovery.BaseApplication\r\nimport com.pr.perfectrecovery.R\r\nimport com.pr.perfectrecovery.adapter.DeviceBluetoothAdapter\r\nimport com.pr.perfectrecovery.base.BaseActivity\r\nimport com.pr.perfectrecovery.base.BaseConstant\r\nimport com.pr.perfectrecovery.bean.BaseDataDTO\r\nimport com.pr.perfectrecovery.bean.ConfigBean\r\nimport com.pr.perfectrecovery.bean.MessageEventData\r\nimport com.pr.perfectrecovery.comm.ObserverManager\r\nimport com.pr.perfectrecovery.databinding.ActivityCpractivityBinding\r\nimport com.pr.perfectrecovery.databinding.ItemBluetoothBinding\r\nimport com.pr.perfectrecovery.livedata.StatusLiveData\r\nimport com.pr.perfectrecovery.utils.ConvertUtil\r\nimport com.pr.perfectrecovery.utils.DataVolatile01\r\nimport com.tencent.mmkv.MMKV\r\nimport org.greenrobot.eventbus.EventBus\r\nimport org.greenrobot.eventbus.Subscribe\r\nimport org.greenrobot.eventbus.ThreadMode\r\nimport java.util.*\r\n\r\n/**\r\n * CPR页面  蓝夜列表扫描链接\r\n */\r\nclass CPRActivity : BaseActivity() {\r\n    private lateinit var viewBinding: ActivityCpractivityBinding\r\n    private var isRefresh = false\r\n    private val mDeviceAdapter = DeviceBluetoothAdapter()\r\n    private var bleList = mutableListOf<BleDevice>()\r\n    private var connectList = arrayListOf<BleDevice>()\r\n    private var isInitValueMap = mutableMapOf<String, Boolean>()\r\n\r\n    companion object {\r\n        fun getCustomProber(): UsbSerialProber {\r\n            val customTable = ProbeTable()\r\n            customTable.addProduct(\r\n                0x16d0,\r\n                0x087e,\r\n                CdcAcmSerialDriver::class.java\r\n            ) // e.g. Digispark CDC\r\n            return UsbSerialProber(customTable)\r\n        }\r\n    }\r\n\r\n    //监听USB连接状态\r\n    var broadcastReceiver: BroadcastReceiver = object : BroadcastReceiver() {\r\n        override fun onReceive(context: Context?, intent: Intent) {\r\n            val action = intent.action\r\n            if (action == \"android.hardware.usb.action.USB_STATE\") {\r\n                val connected = intent.extras!!.getBoolean(\"connected\")\r\n                if (connected) {\r\n//                    Toast.makeText(this@CPRActivity, \"USB已连接\", Toast.LENGTH_SHORT).show()\r\n//                    viewBinding.tvMsg.text = \"USB已连接\"\r\n                } else {\r\n//                    viewBinding.tvMsg.text = \"USB已断开\"\r\n//                    Toast.makeText(this@CPRActivity, \"USB已断开\", Toast.LENGTH_SHORT).show()\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        viewBinding = ActivityCpractivityBinding.inflate(layoutInflater)\r\n        setContentView(viewBinding.root)\r\n        EventBus.getDefault().register(this)\r\n        registerBroadcast()\r\n        initView()\r\n        //初始化蓝牙管理器\r\n        initBluetooth()\r\n        initBle()\r\n        ttl()\r\n        viewBinding.cbBle.isChecked = true\r\n    }\r\n\r\n    private fun refresh() {\r\n        if (viewBinding.cbUsb.isChecked) {\r\n            val usbManager = getSystemService(USB_SERVICE) as UsbManager\r\n            val usbDefaultProber: UsbSerialProber = UsbSerialProber.getDefaultProber()\r\n            val usbCustomProber: UsbSerialProber = getCustomProber()\r\n            //        if (usbManager.deviceList.values == null || usbManager.deviceList.values.isEmpty()) {\r\n            //            viewBinding.ctUsb.isChecked = false\r\n            //        }\r\n            var bleDevice: BleDevice? = null\r\n            for (device in usbManager.deviceList.values) {\r\n                val driver: UsbSerialDriver = usbDefaultProber.probeDevice(device)\r\n                //ToastUtils.showShort(driver::class.java.simpleName.replace(\"SerialDriver\", \"\"))\r\n                mDeviceAdapter.setList(null)\r\n                for (port in driver.ports.indices) {\r\n                    bleDevice = BleDevice(driver)\r\n                    mDeviceAdapter.addData(bleDevice)\r\n                }\r\n            }\r\n            if (bleDevice != null) {\r\n                openTTL(bleDevice, 0)\r\n            }\r\n            stopRefresh()\r\n            //listAdapter.notifyDataSetChanged()\r\n            //        handler.removeCallbacks(runnable)\r\n            //        handler.postDelayed(runnable, 2000)\r\n        }\r\n    }\r\n\r\n    private fun registerBroadcast() {\r\n        val filter = IntentFilter()\r\n        filter.addAction(\"android.hardware.usb.action.USB_STATE\")\r\n        registerReceiver(broadcastReceiver, filter)\r\n    }\r\n\r\n    private fun initView() {\r\n        val jsonString = MMKV.defaultMMKV().decodeString(BaseConstant.MMKV_WM_CONFIGURATION)\r\n        val configBean = GsonUtils.fromJson(jsonString, ConfigBean::class.java)\r\n        DataVolatile01.PR_HIGH_VALUE = configBean.prHigh()\r\n        DataVolatile01.PR_LOW_VALUE = configBean.prLow()\r\n        DataVolatile01.QY_HIGH_VALUE = configBean.tidalVolumeEnd\r\n        DataVolatile01.QY_LOW_VALUE = configBean.tidalVolume\r\n        DataVolatile01.PR_DEFAULT_TIMES = configBean.prCount\r\n        DataVolatile01.QY_DEFAULT_TIMES = configBean.qyCount\r\n        //searchBle()\r\n        //查看是否有蓝牙权限\r\n        checkPermissions()\r\n        viewBinding.bottom.ivBack.setOnClickListener { finish() }\r\n        viewBinding.bottom.tvContinue.setOnClickListener {\r\n            startActivity(Intent(this, ConfigActivity::class.java))\r\n        }\r\n\r\n        viewBinding.recyclerview.layoutManager = LinearLayoutManager(this)\r\n        // 是否抵用滚动事件监听\r\n        //layoutManager.setChangeSelectInScrolling(false)\r\n        viewBinding.recyclerview.adapter = bluetoothAdapter\r\n\r\n        viewBinding.bottom.ivStart.setOnClickListener {\r\n            val intent = Intent(this, TrainingSingleActivity::class.java)\r\n            connectList.clear()\r\n            connectList.addAll(bleList)\r\n            connectList.distinctBy { listOf(it.mac, it.mac) }\r\n            intent.putParcelableArrayListExtra(BaseConstant.CONNECT_BLE_DEVICES, connectList)\r\n            startActivity(intent)\r\n        }\r\n\r\n        viewBinding.progressCircular.setOnClickListener {\r\n            BaseApplication.driver?.ResumeUsbList()\r\n            searchBle()\r\n        }\r\n        viewBinding.recyclerview.adapter = mDeviceAdapter\r\n        mDeviceAdapter.setOnItemClickListener(itemClick)\r\n\r\n        viewBinding.cbUsb.setOnCheckedChangeListener { buttonView, isChecked ->\r\n            if (isChecked) {\r\n                mDeviceAdapter.setList(null)\r\n                unBindBluetooth()\r\n                viewBinding.cbBle.isChecked = !isChecked\r\n                viewBinding.cbUsb.isChecked = isChecked\r\n                refresh()\r\n            }\r\n        }\r\n\r\n        viewBinding.cbBle.setOnCheckedChangeListener { buttonView, isChecked ->\r\n            if (isChecked) {\r\n                mDeviceAdapter.setList(null)\r\n                BaseApplication.driver?.CloseDevice()\r\n                searchBle()\r\n                viewBinding.cbUsb.isChecked = !isChecked\r\n                viewBinding.cbBle.isChecked = isChecked\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun bleWrite(bleDevice: BleDevice, mac: String) {\r\n        val gatt = BleManager.getInstance().getBluetoothGatt(bleDevice)\r\n        //蓝牙服务列表\r\n        val services = gatt.services\r\n        val bluetoothGattService = services[2]\r\n        val characteristic = bluetoothGattService.characteristics[1]\r\n        BleManager.getInstance().write(\r\n            bleDevice,\r\n            characteristic.service.uuid.toString(),\r\n            characteristic.uuid.toString(),\r\n            HexUtil.hexStringToBytes(mac),\r\n            object : BleWriteCallback() {\r\n                override fun onWriteSuccess(current: Int, total: Int, justWrite: ByteArray) {\r\n\r\n                }\r\n\r\n                override fun onWriteFailure(exception: BleException) {\r\n\r\n                }\r\n            })\r\n    }\r\n\r\n    private fun searchBle() {\r\n        val bluetoothAdapter = BluetoothAdapter.getDefaultAdapter()\r\n        if (!bluetoothAdapter.isEnabled) {\r\n            Toast.makeText(this, getString(R.string.please_open_blue), Toast.LENGTH_LONG)\r\n                .show()\r\n        } else {\r\n            mDeviceAdapter.setList(null)\r\n            if (!isRefresh) {\r\n                viewBinding.tvMsg.visibility = View.INVISIBLE\r\n                startRefresh()\r\n                checkPermissions()\r\n                isRefresh = true\r\n            } else {\r\n                isRefresh = false\r\n                stopRefresh()\r\n                //取消扫描蓝牙设备\r\n                BleManager.getInstance().cancelScan()\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    @Subscribe(sticky = true, threadMode = ThreadMode.MAIN)\r\n    public fun onEvent(event: MessageEventData) {\r\n        when (event.code) {\r\n            BaseConstant.EVENT_CPR_START -> {\r\n                isInitValueMap.clear()\r\n                bindBluetooth()\r\n                isStart = true\r\n            }\r\n            BaseConstant.EVENT_CPR_STOP -> {\r\n                isStart = false\r\n                unBindBluetooth()\r\n                //清空当前map数据\r\n                dataMap.values.forEach { item ->\r\n                    item.dataClear()\r\n                }\r\n            }\r\n            BaseConstant.EVENT_CPR_CLEAR -> {\r\n                //清空当前map数据\r\n                dataMap.values.forEach { item ->\r\n                    item.dataClear()\r\n                }\r\n            }\r\n            BaseConstant.CLEAR_DEVICE_HISTORY_DATA -> {\r\n                deviceCount = 0\r\n                unBindBluetooth()\r\n                Log.e(\"hunger_test_clear\", \" recieve message\")\r\n                //清空当前map数据\r\n                dataMap.values.forEach { item ->\r\n                    item.dataClear()\r\n                }\r\n                dataMap.clear()\r\n                isInitValueMap.clear()\r\n                Log.e(\"hunger_test_clear\", \" clear done\")\r\n\r\n            }\r\n            BaseConstant.EVENT_DO_BIND -> {\r\n                isInitValueMap.clear()\r\n                bindBluetooth()\r\n            }\r\n            BaseConstant.EVENT_DO_START -> {\r\n                isStart = true\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun bindBluetooth() {\r\n        unBindBluetooth()\r\n        bleList.forEach {\r\n            bind(it)\r\n        }\r\n    }\r\n\r\n    private fun unBindBluetooth() {\r\n        bleList.forEach {\r\n            unBind(it)\r\n        }\r\n    }\r\n\r\n    private val itemClick =\r\n        OnItemClickListener { adapter, view, position ->\r\n            if (isItemClickable) {\r\n                viewBinding.tvMsg.visibility = View.INVISIBLE\r\n                val bleDevice = mDeviceAdapter.getItem(position)\r\n                if (bleDevice.getmUsbSerialDriver() != null) {\r\n                    openTTL(bleDevice, position)\r\n                } else {\r\n                    if (!BleManager.getInstance().isConnected(bleDevice)) {\r\n                        if (count >= 6) {//处理提示语设备连接过多提示\r\n                            viewBinding.tvMsg.text = \"当前版本最多同时支持6台模型\"\r\n                            hintHandler.postDelayed(this::setTextNull, 2000)\r\n                        }\r\n                        BleManager.getInstance().cancelScan()\r\n                        connect(bleDevice, position)\r\n                    } else {\r\n                        BleManager.getInstance().disconnect(bleDevice)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    private val hintHandler = object : Handler(Looper.getMainLooper()) {\r\n        override fun handleMessage(msg: Message) {\r\n            super.handleMessage(msg)\r\n        }\r\n    }\r\n\r\n    private fun setTextNull() {\r\n        viewBinding.tvMsg.text = \"\"\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        refresh()\r\n//        showConnectedDevice()\r\n//        startRefresh()\r\n//        checkPermissions()\r\n    }\r\n\r\n    private fun initBluetooth() {\r\n        BleManager.getInstance().init(application)\r\n        BleManager.getInstance()\r\n            .enableLog(true)\r\n            .setReConnectCount(1, 5000)\r\n            .setConnectOverTime(5000)\r\n            .operateTimeout = 5000\r\n    }\r\n\r\n    private val REQUEST_CODE_OPEN_GPS = 1\r\n    private val REQUEST_CODE_PERMISSION_LOCATION = 2\r\n    private fun checkPermissions() {\r\n        val bluetoothAdapter = BluetoothAdapter.getDefaultAdapter()\r\n        if (bluetoothAdapter != null && !bluetoothAdapter.isEnabled) {\r\n            Toast.makeText(this, getString(R.string.please_open_blue), Toast.LENGTH_LONG).show()\r\n            return\r\n        }\r\n        val permissions = arrayOf(Manifest.permission.ACCESS_FINE_LOCATION)\r\n        val permissionDeniedList: MutableList<String> = ArrayList()\r\n        for (permission in permissions) {\r\n            val permissionCheck = ContextCompat.checkSelfPermission(this, permission)\r\n            if (permissionCheck == PackageManager.PERMISSION_GRANTED) {\r\n                onPermissionGranted(permission)\r\n            } else {\r\n                permissionDeniedList.add(permission)\r\n            }\r\n        }\r\n        if (permissionDeniedList.isNotEmpty()) {\r\n            val deniedPermissions = permissionDeniedList.toTypedArray()\r\n            ActivityCompat.requestPermissions(\r\n                this,\r\n                deniedPermissions,\r\n                REQUEST_CODE_PERMISSION_LOCATION\r\n            )\r\n        }\r\n    }\r\n\r\n    private val bluetoothAdapter = object :\r\n        BaseQuickAdapter<BleDevice, BaseViewHolder>(R.layout.item_bluetooth) {\r\n        override fun convert(holder: BaseViewHolder, item: BleDevice) {\r\n            val bind = ItemBluetoothBinding.bind(holder.itemView)\r\n            bind.tvBluetoothName.text = item.name\r\n            bind.tvBluetoothStatus.text = \"未连接\"\r\n        }\r\n    }\r\n\r\n    private fun onPermissionGranted(permission: String) {\r\n        when (permission) {\r\n            Manifest.permission.ACCESS_FINE_LOCATION -> if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && !checkGPSIsOpen()) {\r\n                AlertDialog.Builder(this)\r\n                    .setTitle(R.string.notifyTitle)\r\n                    .setMessage(R.string.gpsNotifyMsg)\r\n                    .setNegativeButton(\r\n                        R.string.cancel\r\n                    ) { dialog, which -> finish() }\r\n                    .setPositiveButton(\r\n                        R.string.setting\r\n                    ) { dialog, which ->\r\n                        val intent = Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS)\r\n                        startActivityForResult(intent, REQUEST_CODE_OPEN_GPS)\r\n                    }\r\n                    .setCancelable(false)\r\n                    .show()\r\n            } else {\r\n                initBle()\r\n                startScan()\r\n            }\r\n        }\r\n    }\r\n\r\n    private var isItemClickable = true\r\n    private var count = 0\r\n    private fun connect(bleDevice: BleDevice, position: Int) {\r\n        BleManager.getInstance()\r\n            .setConnectOverTime(5000)\r\n            .setOperateTimeout(5000)\r\n            .connect(bleDevice, object : BleGattCallback() {\r\n                override fun onStartConnect() {\r\n                    isItemClickable = false\r\n                    bleDevice.isLoading = true\r\n                    mDeviceAdapter.remove(bleDevice)\r\n                    mDeviceAdapter.addData(position, bleDevice)\r\n                }\r\n\r\n                override fun onConnectFail(bleDevice: BleDevice, exception: BleException) {\r\n                    bleDevice.isLoading = false\r\n                    bleDevice.isConnected = false\r\n                    mDeviceAdapter.remove(bleDevice)\r\n                    mDeviceAdapter.addData(position, bleDevice)\r\n                    isItemClickable = true\r\n                    if (exception.code == BleException.ERROR_CODE_TIMEOUT) {\r\n                        viewBinding.tvMsg.text = \"连接超时，请重新连接\"\r\n                    } else {\r\n                        viewBinding.tvMsg.text = \"连接失败，请重新连接\"\r\n                    }\r\n                }\r\n\r\n                override fun onConnectSuccess(\r\n                    bleDevice: BleDevice,\r\n                    gatt: BluetoothGatt,\r\n                    status: Int\r\n                ) {\r\n                    count++\r\n                    //处理已连接的设备靠前\r\n                    mDeviceAdapter.remove(bleDevice)\r\n                    bleDevice.isConnected = true\r\n                    bleDevice.isLoading = false\r\n                    bleDevice.count = count\r\n                    //添加已连接蓝牙\r\n                    if (mDeviceAdapter.data.size == 0) {\r\n                        mDeviceAdapter.addData(bleDevice)\r\n                    } else {\r\n                        if (count - 1 <= mDeviceAdapter.data.size) {\r\n                            mDeviceAdapter.addData(count - 1, bleDevice)\r\n                        } else {\r\n                            mDeviceAdapter.addData(bleDevice)\r\n                        }\r\n                    }\r\n//                viewBinding.textView.text = \"$count\"\r\n                    bleList.add(bleDevice)\r\n                    viewBinding.tvConnections.text = \"设备连接数：${count}\"\r\n                    bind(bleDevice)\r\n                    isItemClickable = true\r\n                    isRefreshPower = true\r\n                }\r\n\r\n                override fun onDisConnected(\r\n                    isActiveDisConnected: Boolean,\r\n                    bleDevice: BleDevice,\r\n                    gatt: BluetoothGatt,\r\n                    status: Int\r\n                ) {\r\n                    count--\r\n                    bleList.remove(bleDevice)\r\n                    if (isActiveDisConnected) {\r\n                        ToastUtils.showLong(bleDevice.name + getString(R.string.active_disconnected))\r\n                    } else {\r\n                        ToastUtils.showLong(bleDevice.name + getString(R.string.disconnected))\r\n                        ObserverManager.getInstance().notifyObserver(bleDevice)\r\n                    }\r\n                    EventBus.getDefault()\r\n                        .post(\r\n                            MessageEventData(\r\n                                BaseConstant.DEVICE_DISCONNECTED,\r\n                                bleDevice.mac,\r\n                                null\r\n                            )\r\n                        )\r\n                    viewBinding.tvConnections.text = \"设备连接数：${count}\"\r\n\r\n                    //断开蓝牙连接\r\n                    if (BleManager.getInstance().isConnected(bleDevice)) {\r\n                        BleManager.getInstance().disconnect(bleDevice)\r\n                    }\r\n                    if (count == 0) {\r\n                        EventBus.getDefault()\r\n                            .post(\r\n                                MessageEventData(\r\n                                    BaseConstant.EVENT_CPR_DISCONNENT,\r\n                                    \"\",\r\n                                    null\r\n                                )\r\n                            )\r\n                    }\r\n\r\n//                unBind(bleDevice)\r\n                    val newList = mutableListOf<BleDevice>()\r\n                    for (item in mDeviceAdapter.data) {\r\n                        if (item.count > bleDevice.count) {\r\n                            item.count--\r\n                        }\r\n                        newList.add(item)\r\n                    }\r\n                    unBind(bleDevice)\r\n                    mDeviceAdapter.remove(bleDevice)\r\n                    newList.remove(bleDevice)\r\n                    bleDevice.isConnected = false\r\n                    bleDevice.isLoading = false\r\n                    bleDevice.count = 0\r\n                    newList.add(bleDevice)\r\n                    mDeviceAdapter.setList(dedupList(newList))\r\n                    isItemClickable = true\r\n                }\r\n            })\r\n    }\r\n\r\n    /**\r\n     * 去重\r\n     */\r\n    private fun dedupList(list: MutableList<BleDevice>?): MutableList<BleDevice>? {\r\n        list?.distinctBy { listOf(it.mac, it.mac) }\r\n        return list\r\n    }\r\n\r\n    private fun initBle() {\r\n        val uuids: Array<String>?\r\n//        val str_uuid: String = et_uuid.getText().toString()\r\n        val str_uuid: String = \"\"\r\n        uuids = if (TextUtils.isEmpty(str_uuid)) {\r\n            null\r\n        } else {\r\n            str_uuid.split(\",\").toTypedArray()\r\n        }\r\n        var serviceUuids: Array<UUID?>? = null\r\n        if (uuids != null && uuids.isNotEmpty()) {\r\n            serviceUuids = arrayOfNulls(uuids.size)\r\n            for (i in uuids.indices) {\r\n                val name = uuids[i]\r\n                val components = name.split(\"-\").toTypedArray()\r\n                if (components.size != 5) {\r\n                    serviceUuids[i] = null\r\n                } else {\r\n                    serviceUuids[i] = UUID.fromString(uuids[i])\r\n                }\r\n            }\r\n        }\r\n\r\n        val names = arrayOf(\"WMFS\", \"D87A\")\r\n        val mac: String = \"\"\r\n        val isAutoConnect: Boolean = false\r\n        val scanRuleConfig = BleScanRuleConfig.Builder()\r\n            .setServiceUuids(serviceUuids) // 只扫描指定的服务的设备，可选\r\n            .setDeviceName(true, *names) // 只扫描指定广播名的设备，可选\r\n            .setDeviceMac(mac) // 只扫描指定mac的设备，可选\r\n            .setAutoConnect(isAutoConnect) // 连接时的autoConnect参数，可选，默认false\r\n            .setScanTimeOut(5000) // 扫描超时时间，可选，默认10秒\r\n            .build()\r\n        BleManager.getInstance().initScanRule(scanRuleConfig)\r\n    }\r\n\r\n    private fun startScan() {\r\n//        viewBinding.tvModelNum.visibility = View.INVISIBLE\r\n        BleManager.getInstance().scan(object : BleScanCallback() {\r\n            override fun onScanStarted(success: Boolean) {\r\n                //已连接的蓝牙添加进来\r\n                val deviceList = BleManager.getInstance().allConnectedDevice\r\n                mDeviceAdapter.data.clear()\r\n                mDeviceAdapter.setList(dedupList(deviceList))\r\n            }\r\n\r\n            override fun onLeScan(bleDevice: BleDevice) {\r\n                super.onLeScan(bleDevice)\r\n            }\r\n\r\n            override fun onScanning(bleDevice: BleDevice) {\r\n                //处理重复蓝牙问题\r\n                if (mDeviceAdapter.data.isNotEmpty()) {\r\n                    mDeviceAdapter.data.forEach { item ->\r\n                        if (bleDevice.mac == item.mac) {\r\n                            mDeviceAdapter.remove(item)\r\n                        }\r\n                    }\r\n                }\r\n                mDeviceAdapter.addData(bleDevice)\r\n                mDeviceAdapter.notifyDataSetChanged()\r\n            }\r\n\r\n            override fun onScanFinished(scanResultList: List<BleDevice>) {\r\n                mDeviceAdapter.data.let {\r\n                    if (it.size == 0) {\r\n                        viewBinding.tvMsg.visibility = View.VISIBLE\r\n                    }\r\n                }\r\n                stopRefresh()\r\n                isRefresh = false\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<String?>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n        when (requestCode) {\r\n            REQUEST_CODE_PERMISSION_LOCATION -> if (grantResults.size > 0) {\r\n                var i = 0\r\n                while (i < grantResults.size) {\r\n                    if (grantResults[i] == PackageManager.PERMISSION_GRANTED) {\r\n                        permissions[i]?.let { onPermissionGranted(it) }\r\n                    }\r\n                    i++\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun checkGPSIsOpen(): Boolean {\r\n        val locationManager = this.getSystemService(LOCATION_SERVICE) as LocationManager\r\n            ?: return false\r\n        return locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)\r\n    }\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        if (requestCode == REQUEST_CODE_OPEN_GPS) {\r\n            if (checkGPSIsOpen()) {\r\n//                initBle()\r\n                startScan()\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 开始刷新动画\r\n     */\r\n    private fun startRefresh() {\r\n        viewBinding.tvDesc.setText(R.string.searching_for_available_models)\r\n        viewBinding.progressCircular.indeterminateDrawable =\r\n            resources.getDrawable(R.drawable.progressbar_circle)\r\n        viewBinding.progressCircular.progressDrawable =\r\n            resources.getDrawable(R.drawable.progressbar_circle)\r\n    }\r\n\r\n    /**\r\n     * 停止刷新动画\r\n     */\r\n    private fun stopRefresh() {\r\n        viewBinding.tvDesc.setText(R.string.available_models)\r\n        viewBinding.progressCircular.indeterminateDrawable =\r\n            resources.getDrawable(R.drawable.icon_wm_refresh)\r\n        viewBinding.progressCircular.progressDrawable =\r\n            resources.getDrawable(R.drawable.icon_wm_refresh)\r\n    }\r\n\r\n    private fun unBind(bleDevice: BleDevice) {\r\n        val gatt = BleManager.getInstance().getBluetoothGatt(bleDevice) ?: return\r\n        //蓝牙服务列表\r\n        val services = gatt.services\r\n        val bluetoothGattService = services[2]\r\n        val characteristic = bluetoothGattService.characteristics[1]\r\n        BleManager.getInstance().stopNotify(\r\n            bleDevice,\r\n            characteristic.service.uuid.toString(),\r\n            characteristic.uuid.toString()\r\n        )\r\n    }\r\n\r\n    private val dataMap = mutableMapOf<String, DataVolatile01>()\r\n    private var dataDTO = BaseDataDTO()\r\n    var deviceCount = 0\r\n    private fun bind(bleDevice: BleDevice?) {\r\n        val gatt = BleManager.getInstance().getBluetoothGatt(bleDevice)\r\n        //蓝牙服务列表\r\n        val services = gatt.services\r\n        val bluetoothGattService = services[2]\r\n        val characteristic = bluetoothGattService.characteristics[1]\r\n        BleManager.getInstance().notify(\r\n            bleDevice,\r\n            characteristic.service.uuid.toString(),\r\n            characteristic.uuid.toString(),\r\n            object : BleNotifyCallback() {\r\n                override fun onNotifySuccess() {\r\n                    deviceCount++\r\n                    if (deviceCount == bleList.size) {\r\n                        EventBus.getDefault()\r\n                            .post(MessageEventData(BaseConstant.EVENT_CANCEL_DIALOG, \"\", null))\r\n                    }\r\n                    runOnUiThread(Runnable {\r\n                        Log.i(\"CPRActivity\", \"notify success\")\r\n                    })\r\n                }\r\n\r\n                override fun onNotifyFailure(exception: BleException) {\r\n                    runOnUiThread(Runnable {\r\n                        Log.i(\"CPRActivity\", exception.toString())\r\n                    })\r\n                }\r\n\r\n                override fun onCharacteristicChanged(data: ByteArray) {\r\n                    if (!BaseApplication.driver?.isConnected!! && characteristic != null) {\r\n                        val formatHexString = HexUtil.formatHexString(\r\n                            characteristic.value,\r\n                            false\r\n                        )\r\n                        runOnUiThread { Log.e(\"CPRActivity\", formatHexString) }\r\n                        Log.e(\"TAG9\", \"原始数据${formatHexString}\")\r\n                        sendMessage(formatHexString)\r\n                    }\r\n                }\r\n            })\r\n    }\r\n\r\n    private var isRefreshPower: Boolean = false\r\n    private var isStart = false\r\n    private fun sendMessage(formatHexString: String) {\r\n        if (TextUtils.isEmpty(formatHexString) || formatHexString.length < 18) {\r\n            return\r\n        }\r\n        val deviceMAC =\r\n            \"001b${formatHexString.substring(12)}\"\r\n        Log.e(\"TAG\", \"原始数据${formatHexString}\")\r\n        Log.e(\"TAG\", \"MAC:${deviceMAC}\")\r\n        val dataVolatile = dataMap[deviceMAC]\r\n        if (dataVolatile != null) {\r\n            dataDTO = dataVolatile.parseString(formatHexString)\r\n        } else {\r\n            val mDataVolatile = DataVolatile01()\r\n            mDataVolatile.initPreDistance(formatHexString, deviceMAC)\r\n            dataDTO = mDataVolatile.parseString(formatHexString)\r\n            dataMap[dataDTO.mac] = mDataVolatile\r\n        }\r\n        if (isStart) {\r\n            StatusLiveData.data.postValue(dataDTO)\r\n        }\r\n        //处理连接后电量显示\r\n        if (isRefreshPower) {\r\n            powerHandler.removeCallbacks(powerRunning)\r\n            powerHandler.postDelayed(powerRunning, 10000)\r\n            Handler().postDelayed(this::setPower, 500)\r\n        }\r\n    }\r\n\r\n    private val powerHandler = Handler(Looper.getMainLooper())\r\n    private val powerRunning = Runnable {\r\n        setPower()\r\n        powerHandler.postDelayed({\r\n            setPower()\r\n        }, 10000)\r\n    }\r\n\r\n    /**\r\n     * 设置列表电量\r\n     */\r\n    private fun setPower() {\r\n        val dataList = mutableListOf<BleDevice>()\r\n        mDeviceAdapter.data.forEachIndexed { index, item ->\r\n            if (item.isConnected) {\r\n                //将mac字符串转换一下去掉 冒号 ：\r\n                val replaceMac = item.mac.replace(\":\", \"\").toLowerCase()\r\n                Log.e(\"sendMessage\", \"ble MAC：${replaceMac}\")\r\n                dataMap.keys.forEach {\r\n                    val dataItme = dataMap[it]\r\n                    if (dataItme != null && replaceMac == dataItme.deviceMAC) {\r\n                        Log.e(\"sendMessage\", \"MAC：${dataItme.deviceMAC}\")\r\n                        Log.e(\"sendMessage\", \"电量值：${dataItme.VI_Value}\")\r\n                        item.power = dataItme.VI_Value\r\n//                        return@forEach\r\n                    }\r\n                }\r\n                mDeviceAdapter.notifyItemChanged(index, item)\r\n            }\r\n            dataList.add(item)\r\n        }\r\n        isRefreshPower = false\r\n        mDeviceAdapter.setList(dataList)\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        EventBus.getDefault().unregister(this)\r\n        BleManager.getInstance().disconnectAllDevice()\r\n        BleManager.getInstance().destroy()\r\n    }\r\n\r\n    private fun initTTL() {\r\n        if (BaseApplication.driver!!.isConnected) {\r\n            val retval: Int? = BaseApplication.driver?.ResumeUsbPermission()\r\n            if (retval == 0) {\r\n                if (BaseApplication.driver!!.SetConfig(\r\n                        115200, 8, 1, 0, 0\r\n                    )//配置串口波特率，函数说明可参照编程手册\r\n                ) {\r\n                    ToastUtils.showShort(\"串口设置成功!\")\r\n                } else {\r\n                    ToastUtils.showShort(\"串口设置失败!\")\r\n                }\r\n            } else if (retval == -2) {\r\n                ToastUtils.showShort(\"获取权限失败!\")\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun ttl() {\r\n        if (!BaseApplication.driver?.UsbFeatureSupported()!!) // 判断系统是否支持USB HOST\r\n        {\r\n            val dialog = androidx.appcompat.app.AlertDialog.Builder(this).create()\r\n            dialog.setCancelable(true)\r\n            dialog.setTitle(\"提示\")\r\n            dialog.setMessage(\"您的手机不支持USB HOST，请更换其他手机再试！\")\r\n            dialog.setButton(\r\n                androidx.appcompat.app.AlertDialog.BUTTON_POSITIVE, \"确定\"\r\n            ) { dialog, which -> }\r\n            dialog.show()\r\n            val lp = dialog.window!!.attributes\r\n//设置宽高，高度默认是自适应的，宽度根据屏幕宽度比例设置\r\n            //设置宽高，高度默认是自适应的，宽度根据屏幕宽度比例设置\r\n            lp.width = ScreenUtils.getScreenWidth() * 9 / 10\r\n//这里设置居中\r\n            //这里设置居中\r\n            lp.gravity = Gravity.CENTER\r\n            dialog.window!!.attributes = lp\r\n        }\r\n    }\r\n\r\n    private fun openTTL(bleDevice: BleDevice?, position: Int) {\r\n        if (BaseApplication.driver?.isConnected!!) {\r\n            when (BaseApplication.driver?.ResumeUsbList()) {\r\n                -1 -> { // ResumeUsbList方法用于枚举CH34X设备以及打开相关设备\r\n                    ToastUtils.showShort(\"打开设备失败!\")\r\n                    BaseApplication.driver?.CloseDevice()\r\n                }\r\n                0 -> {\r\n                    if (!BaseApplication.driver?.UartInit()!!) { //对串口设备进行初始化操作\r\n                        ToastUtils.showShort(\"设备初始化失败!\")\r\n                        return\r\n                    }\r\n                    ToastUtils.showShort(\"打开设备成功!\")\r\n                    bleDevice?.isConnected = true\r\n                    bleDevice?.isLoading = false\r\n                    mDeviceAdapter.notifyItemChanged(position, bleDevice)\r\n                    mDeviceAdapter.notifyDataSetChanged()\r\n                    initTTL()\r\n                    ReadThread().start() //开启读线程读取串口接收的数据\r\n                }\r\n                else -> {\r\n                    Toast.makeText(this, \"USB未授权限!\", Toast.LENGTH_SHORT).show()\r\n//                    val builder = androidx.appcompat.app.AlertDialog.Builder(this)\r\n//                    builder.setIcon(R.mipmap.icon_wm_logo)\r\n//                    builder.setTitle(\"未授权限\")\r\n//                    builder.setMessage(\"确认退出吗？\")\r\n//                    builder.setPositiveButton(\r\n//                        \"确定\"\r\n//                    ) { dialog, which ->\r\n//                        //System.exit(0)\r\n//                        dialog.dismiss()\r\n//                    }\r\n//                    builder.setNegativeButton(\r\n//                        \"返回\"\r\n//                    ) { dialog, which ->\r\n//                        dialog.dismiss()\r\n//                    }\r\n//                    builder.show()\r\n                }\r\n            }\r\n        } else {\r\n            //关闭USB TTL\r\n            Toast.makeText(this, \"关闭USB串口!\", Toast.LENGTH_SHORT).show()\r\n            try {\r\n                ToastUtils.showShort(\"打开设备成功!\")\r\n                bleDevice?.isConnected = false\r\n                bleDevice?.isLoading = false\r\n                mDeviceAdapter.notifyItemChanged(position, bleDevice)\r\n                mDeviceAdapter.notifyDataSetChanged()\r\n                Thread.sleep(200)\r\n            } catch (e: InterruptedException) {\r\n                e.printStackTrace()\r\n            }\r\n            BaseApplication.driver?.CloseDevice()\r\n//            totalrecv = 0\r\n        }\r\n    }\r\n\r\n    inner class ReadThread : Thread() {\r\n        override fun run() {\r\n            val buffer = ByteArray(64)\r\n            while (true) {\r\n                val msg = Message.obtain()\r\n                if (!BaseApplication.driver?.isConnected!!) {\r\n                    break\r\n                }\r\n                val length: Int = BaseApplication.driver!!.ReadData(buffer, 64)\r\n                if (length > 0) {\r\n                    runOnUiThread {\r\n                        val formatHexString = ConvertUtil.toHexString(buffer, length)\r\n                        Log.i(\"CPRActivity\", \"data -- ${formatHexString.trim()}\")\r\n                        sendMessage(formatHexString.trim())\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun finish() {\r\n        super.finish()\r\n        BleManager.getInstance().disconnectAllDevice()\r\n        BleManager.getInstance().destroy()\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/pr/perfectrecovery/activity/CPRActivity.kt b/app/src/main/java/com/pr/perfectrecovery/activity/CPRActivity.kt
--- a/app/src/main/java/com/pr/perfectrecovery/activity/CPRActivity.kt	(revision dbeee351700e1241a14909b9044d4d82cc00b756)
+++ b/app/src/main/java/com/pr/perfectrecovery/activity/CPRActivity.kt	(date 1657423666134)
@@ -180,7 +180,7 @@
         }
 
         viewBinding.progressCircular.setOnClickListener {
-            BaseApplication.driver?.ResumeUsbList()
+            //BaseApplication.driver?.ResumeUsbList()
             searchBle()
         }
         viewBinding.recyclerview.adapter = mDeviceAdapter
Index: app/src/main/res/layout/layout_press.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n        android:layout_width=\"@dimen/dp_100\"\r\n        android:layout_height=\"134dp\"\r\n        android:layout_gravity=\"center\"\r\n        android:background=\"@color/theme_color\">\r\n\r\n    <androidx.constraintlayout.widget.ConstraintLayout\r\n            android:id=\"@+id/constraintLayout2\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"match_parent\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toTopOf=\"parent\">\r\n\r\n        <CheckedTextView\r\n                android:id=\"@+id/viewTop\"\r\n                android:layout_width=\"@dimen/dp_100\"\r\n                android:layout_height=\"18dp\"\r\n                android:background=\"@drawable/press_bg\"\r\n                android:checked=\"false\"\r\n                app:layout_constraintEnd_toEndOf=\"parent\"\r\n                app:layout_constraintStart_toStartOf=\"parent\"\r\n                app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n        <View\r\n                android:id=\"@+id/viewCenter\"\r\n                android:layout_width=\"66dp\"\r\n                android:layout_height=\"78dp\"\r\n                android:background=\"@color/color_text_normal\"\r\n                app:layout_constraintEnd_toEndOf=\"@+id/viewTop\"\r\n                app:layout_constraintStart_toStartOf=\"@+id/viewTop\"\r\n                app:layout_constraintTop_toBottomOf=\"@+id/viewTop\" />\r\n\r\n        <CheckedTextView\r\n                android:id=\"@+id/viewBottom\"\r\n                android:layout_width=\"@dimen/dp_100\"\r\n                android:layout_height=\"18dp\"\r\n                android:background=\"@drawable/press_bg\"\r\n                android:checked=\"false\"\r\n                app:layout_constraintEnd_toEndOf=\"@+id/viewCenter\"\r\n                app:layout_constraintStart_toStartOf=\"@+id/viewCenter\"\r\n                app:layout_constraintTop_toBottomOf=\"@+id/viewCenter\" />\r\n\r\n        <ImageView\r\n                android:id=\"@+id/ivArrowUp\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginTop=\"@dimen/dp_30\"\r\n                android:rotation=\"180\"\r\n                android:src=\"@mipmap/icon_wm_arrow\"\r\n                android:visibility=\"invisible\"\r\n                app:layout_constraintEnd_toEndOf=\"@+id/viewCenter\"\r\n                app:layout_constraintStart_toStartOf=\"@+id/viewCenter\"\r\n                app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n        <ImageView\r\n                android:id=\"@+id/ivArrowDown\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginTop=\"@dimen/dp_40\"\r\n                android:src=\"@mipmap/icon_wm_arrow\"\r\n                android:visibility=\"invisible\"\r\n                app:layout_constraintBottom_toBottomOf=\"parent\"\r\n                app:layout_constraintEnd_toEndOf=\"@+id/viewCenter\"\r\n                app:layout_constraintStart_toStartOf=\"@+id/viewCenter\"\r\n                app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    </androidx.constraintlayout.widget.ConstraintLayout>\r\n\r\n    <LinearLayout\r\n            android:id=\"@+id/linearLayout\"\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"0dp\"\r\n            android:layout_marginTop=\"@dimen/dp_2\"\r\n            android:gravity=\"center_horizontal\"\r\n            app:layout_constraintBottom_toBottomOf=\"parent\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toTopOf=\"parent\">\r\n\r\n        <View\r\n                android:id=\"@+id/viewPress\"\r\n                android:layout_width=\"66dp\"\r\n                android:layout_height=\"12dp\"\r\n                android:background=\"@color/white\"\r\n                android:visibility=\"invisible\" />\r\n    </LinearLayout>\r\n    <CheckedTextView\r\n            android:id=\"@+id/ctBottomError\"\r\n            android:layout_width=\"66dp\"\r\n            android:layout_height=\"16dp\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            android:background=\"@drawable/press_error_bg\"\r\n            android:checked=\"false\"\r\n            app:layout_constraintBottom_toBottomOf=\"parent\"/>\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/layout_press.xml b/app/src/main/res/layout/layout_press.xml
--- a/app/src/main/res/layout/layout_press.xml	(revision dbeee351700e1241a14909b9044d4d82cc00b756)
+++ b/app/src/main/res/layout/layout_press.xml	(date 1657424038479)
@@ -2,7 +2,7 @@
 <androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
         xmlns:app="http://schemas.android.com/apk/res-auto"
         android:layout_width="@dimen/dp_100"
-        android:layout_height="134dp"
+        android:layout_height="131dp"
         android:layout_gravity="center"
         android:background="@color/theme_color">
 
Index: app/src/main/java/com/pr/perfectrecovery/view/PressLayoutView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pr.perfectrecovery.view\r\n\r\nimport android.content.Context\r\nimport android.os.Looper\r\nimport android.util.AttributeSet\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.widget.CheckedTextView\r\nimport android.widget.ImageView\r\nimport android.widget.LinearLayout\r\nimport android.widget.Scroller\r\nimport com.pr.perfectrecovery.R\r\nimport com.pr.perfectrecovery.bean.BaseDataDTO\r\nimport java.util.logging.Handler\r\nimport kotlin.math.abs\r\n\r\n/**\r\n * 自定义按压组合控件\r\n * 2022-1-3 10:12:55\r\n */\r\nclass PressLayoutView : LinearLayout {\r\n    private var scroller: Scroller? = null\r\n    private val mHandler = object : android.os.Handler(Looper.getMainLooper()) {}\r\n    private val mHandler2 = object : android.os.Handler(Looper.getMainLooper()) {}\r\n\r\n    private val runnable = Runnable {\r\n        ctBottomError?.isChecked = false\r\n    }\r\n\r\n    private val runnable2 = Runnable {\r\n        viewBottom!!.isChecked = false\r\n    }\r\n\r\n    constructor(context: Context) : super(context) {\r\n        initView(context)\r\n    }\r\n\r\n    constructor(context: Context, attrs: AttributeSet?) : super(context, attrs) {\r\n        initView(context)\r\n    }\r\n\r\n    constructor(context: Context, attrs: AttributeSet?, defStyleAttr: Int) : super(\r\n        context,\r\n        attrs,\r\n        defStyleAttr\r\n    ) {\r\n        initView(context)\r\n    }\r\n\r\n    constructor(\r\n        context: Context,\r\n        attrs: AttributeSet?,\r\n        defStyleAttr: Int,\r\n        defStyleRes: Int\r\n    ) : super(context, attrs, defStyleAttr, defStyleRes) {\r\n        initView(context)\r\n    }\r\n\r\n    /**\r\n     * 第三步：重写computeScroll（）方法\r\n     */\r\n    override fun computeScroll() {\r\n        super.computeScroll()\r\n        if (scroller!!.computeScrollOffset()) {\r\n            linearLayout!!.scrollTo(scroller!!.currX, scroller!!.currY)\r\n            invalidate() //重绘，在重绘调用draw（）方法中，内部会调用View的computeScroll()方法\r\n        } else {\r\n            setViewStatus()\r\n        }\r\n    }\r\n\r\n    private var viewLayout: View? = null\r\n    private var viewCenter: View? = null\r\n    private var viewPress: View? = null\r\n    private var ctBottomError: CheckedTextView? = null\r\n    private var viewTop: CheckedTextView? = null\r\n    private var viewBottom: CheckedTextView? = null\r\n    private var linearLayout: LinearLayout? = null\r\n    private var ivArrowUp: ImageView? = null\r\n    private var ivArrowDown: ImageView? = null\r\n\r\n    //初始化UI，可根据业务需求设置默认值。\r\n    private fun initView(context: Context) {\r\n        scroller = Scroller(context)\r\n        viewLayout = LayoutInflater.from(context).inflate(R.layout.layout_press, this, true)\r\n        viewTop = findViewById(R.id.viewTop)\r\n        viewBottom = findViewById(R.id.viewBottom)\r\n        viewCenter = findViewById(R.id.viewCenter)\r\n        ctBottomError = findViewById(R.id.ctBottomError)\r\n        viewPress = findViewById(R.id.viewPress)\r\n        linearLayout = findViewById(R.id.linearLayout)\r\n        ivArrowUp = findViewById(R.id.ivArrowUp)\r\n        ivArrowDown = findViewById(R.id.ivArrowDown)\r\n    }\r\n\r\n    private var newY = 0\r\n    fun smoothScrollTo(destY: Int, dataDTO: BaseDataDTO) {\r\n        Log.e(\"smoothScrollTo_1\", \"$destY\")\r\n        //距离值：  30-150\r\n        var destY = destY\r\n        destY = getNumber(destY, dataDTO)\r\n        val height = height - (viewPress!!.height + 40)\r\n        newY = abs(height.toFloat() / 10 * destY).toInt()\r\n\r\n        viewPress!!.visibility = VISIBLE\r\n        ivArrowUp!!.visibility = INVISIBLE\r\n        ivArrowDown!!.visibility = INVISIBLE\r\n        viewTop!!.isChecked = false\r\n//        viewBottom!!.isChecked = false\r\n        if (destY == 0) {\r\n            viewTop!!.isChecked = true\r\n        }\r\n        val scrollY = linearLayout!!.scrollY\r\n        scroller!!.startScroll(linearLayout!!.scrollX, scrollY, 0, -newY - scrollY)\r\n        if (destY == 9) { //正确的按压\r\n            viewBottom!!.isChecked = true\r\n//            ctBottomError?.isChecked = false\r\n            Log.e(\"smoothScrollTo\", \"按压正确\")\r\n            viewPress!!.visibility = INVISIBLE\r\n            ivArrowUp!!.visibility = INVISIBLE\r\n            ivArrowDown!!.visibility = INVISIBLE\r\n            mHandler.removeCallbacks(runnable2)\r\n            mHandler.postDelayed(runnable2, 150)\r\n        } else if (destY > 9) {\r\n            Log.e(\"smoothScrollTo\", \"按压过大\")\r\n            ctBottomError?.visibility = View.VISIBLE\r\n            ctBottomError?.isChecked = true\r\n            mHandler.removeCallbacks(runnable)\r\n            mHandler.postDelayed(runnable, 250)\r\n        }\r\n        invalidate()\r\n    }\r\n\r\n    fun setDown() {\r\n        ivArrowUp!!.visibility = INVISIBLE\r\n        ivArrowDown!!.visibility = VISIBLE\r\n    }\r\n\r\n    fun setUnBack() {\r\n        ivArrowUp!!.visibility = VISIBLE\r\n        ivArrowDown!!.visibility = INVISIBLE\r\n    }\r\n\r\n    private fun setViewStatus() {\r\n        Log.d(\"viewY\", \"\" + newY)\r\n        if (newY > viewTop!!.height) {\r\n            viewPress!!.visibility = VISIBLE\r\n        } else {\r\n            viewPress!!.visibility = INVISIBLE\r\n        }\r\n    }\r\n\r\n    private fun getNumber(value: Int, dataDTO: BaseDataDTO): Int {\r\n        val number = abs(dataDTO.preDistance - value)\r\n        val depthSegment = dataDTO.PR_LOW_VALUE / 8\r\n        Log.e(\"depth\", \"depthSegment: $depthSegment\")\r\n        Log.e(\"depth\", \"number: $number\")\r\n        Log.e(\"depth\", \"${dataDTO.PR_LOW_VALUE}/${dataDTO.PR_HIGH_VALUE}\")\r\n        if (number < 10) {\r\n            return 0\r\n        }\r\n        if (number < depthSegment) {\r\n            return 1\r\n        } else if (number < depthSegment * 2) {\r\n            return 2\r\n        } else if (number < depthSegment * 3) {\r\n            return 3\r\n        } else if (number < depthSegment * 4) {\r\n            return 4\r\n        } else if (number < depthSegment * 5) {\r\n            return 5\r\n        } else if (number < depthSegment * 6) {\r\n            return 6\r\n        } else if (number < depthSegment * 7) {\r\n            return 7\r\n        } else if (number < depthSegment * 8 || number < dataDTO.PR_LOW_VALUE) {\r\n            return 8\r\n        } else if (number in (dataDTO.PR_LOW_VALUE)..(dataDTO.PR_HIGH_VALUE)) {\r\n            return 9\r\n        } else if (number > dataDTO.PR_HIGH_VALUE) {\r\n            return 10\r\n        }\r\n        Log.e(\"depth\", \"depthSegment return = 0: $number\")\r\n        return 0\r\n    }\r\n\r\n    private var mScrollerCallBack: ScrollerCallBack? = null\r\n    fun setScrollerCallBack(mScrollerCallBack: ScrollerCallBack?) {\r\n        this.mScrollerCallBack = mScrollerCallBack\r\n    }\r\n\r\n    interface ScrollerCallBack {\r\n        fun onScrollerState(state: Int)\r\n    }\r\n\r\n    companion object {\r\n        const val TYPE_UP = 1 //未回弹\r\n        const val TYPE_MAX = 2 //按压过大\r\n        const val TYPE_MIN = 3 //按压不足\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/pr/perfectrecovery/view/PressLayoutView.kt b/app/src/main/java/com/pr/perfectrecovery/view/PressLayoutView.kt
--- a/app/src/main/java/com/pr/perfectrecovery/view/PressLayoutView.kt	(revision dbeee351700e1241a14909b9044d4d82cc00b756)
+++ b/app/src/main/java/com/pr/perfectrecovery/view/PressLayoutView.kt	(date 1657424283162)
@@ -100,7 +100,7 @@
         //距离值：  30-150
         var destY = destY
         destY = getNumber(destY, dataDTO)
-        val height = height - (viewPress!!.height + 40)
+        val height = height - (viewPress!!.height + 10)
         newY = abs(height.toFloat() / 10 * destY).toInt()
 
         viewPress!!.visibility = VISIBLE
@@ -111,6 +111,9 @@
         if (destY == 0) {
             viewTop!!.isChecked = true
         }
+        if (destY <= 9) {
+            ctBottomError?.isChecked = false
+        }
         val scrollY = linearLayout!!.scrollY
         scroller!!.startScroll(linearLayout!!.scrollX, scrollY, 0, -newY - scrollY)
         if (destY == 9) { //正确的按压
@@ -127,7 +130,7 @@
             ctBottomError?.visibility = View.VISIBLE
             ctBottomError?.isChecked = true
             mHandler.removeCallbacks(runnable)
-            mHandler.postDelayed(runnable, 250)
+            mHandler.postDelayed(runnable, 150)
         }
         invalidate()
     }
